var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
///<amd-module name="sabre-ngv-UIComponents-utils/Context" />
/// <ngv scope="public" />
define("sabre-ngv-UIComponents-utils/Context", ["require", "exports", "sabre-ngv-core/modules/ModuleContext"], function (require, exports, ModuleContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Cannot use IModuleContext['something'] for types - it seems to break generics
    // types are copied from IModuleContext
    /** @internal **/
    exports.context = new ModuleContext_1.ModuleContext("sabre-ngv-UIComponents-utils");
    /** @internal **/
    exports.cf = exports.context.cf.bind(exports.context);
    /** @internal **/
    exports.registerService = exports.context.registerService.bind(exports.context);
    /** @internal **/
    exports.getService = exports.context.getService.bind(exports.context);
});
///<amd-module name="sabre-ngv-UIComponents-utils/popper/Manager" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/popper/Manager", ["require", "exports", "react", "react", "prop-types"], function (require, exports, React, react_1, PropTypes) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Manager = (function (_super) {
        __extends(Manager, _super);
        function Manager() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._setTargetNode = function (node) {
                _this._targetNode = node;
            };
            _this._getTargetNode = function () {
                return _this._targetNode;
            };
            return _this;
        }
        Manager.prototype.getChildContext = function () {
            return {
                popperManager: {
                    setTargetNode: this._setTargetNode,
                    getTargetNode: this._getTargetNode,
                },
            };
        };
        Manager.prototype.render = function () {
            var _a = this.props, tag = _a.tag, children = _a.children, restProps = __rest(_a, ["tag", "children"]);
            if (tag !== false) {
                return react_1.createElement(tag, restProps, children);
            }
            else {
                return children;
            }
        };
        return Manager;
    }(React.Component));
    Manager.childContextTypes = {
        popperManager: PropTypes.object.isRequired,
    };
    Manager.propTypes = {
        tag: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
    };
    Manager.defaultProps = {
        tag: 'div',
    };
    exports.default = Manager;
});
///<amd-module name="sabre-ngv-UIComponents-utils/onClickOutside/onClickOutside" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/onClickOutside/onClickOutside", ["require", "exports", "react", "react-dom"], function (require, exports, react_2, react_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    function _objectWithoutProperties(source, excluded) {
        if (source == null)
            return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
                continue;
            target[key] = source[key];
        }
        if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
                key = sourceSymbolKeys[i];
                if (excluded.indexOf(key) >= 0)
                    continue;
                if (!Object.prototype.propertyIsEnumerable.call(source, key))
                    continue;
                target[key] = source[key];
            }
        }
        return target;
    }
    /**
     * Check whether some DOM node is our Component's node.
     */
    function isNodeFound(current, componentNode, ignoreClass) {
        if (current === componentNode) {
            return true;
        } // SVG <use/> elements do not technically reside in the rendered DOM, so
        // they do not have classList directly, but they offer a link to their
        // corresponding element, which can have classList. This extra check is for
        // that case.
        // See: http://www.w3.org/TR/SVG11/struct.html#InterfaceSVGUseElement
        // Discussion: https://github.com/Pomax/react-onclickoutside/pull/17
        if (current.correspondingElement) {
            return current.correspondingElement.classList.contains(ignoreClass);
        }
        return current.classList.contains(ignoreClass);
    }
    /**
     * Try to find our node in a hierarchy of nodes, returning the document
     * node as highest node if our node is not found in the path up.
     */
    function findHighest(current, componentNode, ignoreClass) {
        if (current === componentNode) {
            return true;
        } // If source=local then this event came from 'somewhere'
        // inside and should be ignored. We could handle this with
        // a layered approach, too, but that requires going back to
        // thinking in terms of Dom node nesting, running counter
        // to React's 'you shouldn't care about the DOM' philosophy.
        while (current.parentNode) {
            if (isNodeFound(current, componentNode, ignoreClass)) {
                return true;
            }
            current = current.parentNode;
        }
        return current;
    }
    /**
     * Check if the browser scrollbar was clicked
     */
    function clickedScrollbar(evt) {
        return document.documentElement.clientWidth <= evt.clientX || document.documentElement.clientHeight <= evt.clientY;
    }
    // ideally will get replaced with external dep
    // when rafrex/detect-passive-events#4 and rafrex/detect-passive-events#5 get merged in
    var testPassiveEventSupport = function testPassiveEventSupport() {
        if (typeof window === 'undefined' || typeof window.addEventListener !== 'function') {
            return;
        }
        var passive = false;
        var options = Object.defineProperty({}, 'passive', {
            get: function get() {
                passive = true;
            }
        });
        var noop = function noop() {
        };
        window.addEventListener('testPassiveEventSupport', noop, options);
        window.removeEventListener('testPassiveEventSupport', noop, options);
        return passive;
    };
    function autoInc(seed) {
        if (seed === void 0) {
            seed = 0;
        }
        return function () {
            return ++seed;
        };
    }
    var uid = autoInc();
    var passiveEventSupport;
    var handlersMap = {};
    var enabledInstances = {};
    var touchEvents = ['touchstart', 'touchmove'];
    var IGNORE_CLASS_NAME = 'ignore-react-onclickoutside';
    exports.IGNORE_CLASS_NAME = IGNORE_CLASS_NAME;
    /**
     * This function generates the HOC function that you'll use
     * in order to impart onOutsideClick listening to an
     * arbitrary component. It gets called at the end of the
     * bootstrapping code to yield an instance of the
     * onClickOutsideHOC function defined inside setupHOC().
     */
    function onClickOutside(WrappedComponent, config) {
        var _class, _temp;
        return _temp = _class =
            /*#__PURE__*/
            function (_Component) {
                _inheritsLoose(onClickOutside, _Component);
                function onClickOutside(props) {
                    var _this;
                    _this = _Component.call(this, props) || this;
                    _this.__outsideClickHandler = function (event) {
                        if (typeof _this.__clickOutsideHandlerProp === 'function') {
                            _this.__clickOutsideHandlerProp(event);
                            return;
                        }
                        var instance = _this.getInstance();
                        if (typeof instance.props.handleClickOutside === 'function') {
                            instance.props.handleClickOutside(event);
                            return;
                        }
                        if (typeof instance.handleClickOutside === 'function') {
                            instance.handleClickOutside(event);
                            return;
                        }
                        throw new Error('WrappedComponent lacks a handleClickOutside(event) function for processing outside click events.');
                    };
                    _this.enableOnClickOutside = function () {
                        if (typeof document === 'undefined' || enabledInstances[_this._uid]) {
                            return;
                        }
                        if (typeof passiveEventSupport === 'undefined') {
                            passiveEventSupport = testPassiveEventSupport();
                        }
                        enabledInstances[_this._uid] = true;
                        var events = _this.props.eventTypes;
                        if (!events.forEach) {
                            events = [events];
                        }
                        handlersMap[_this._uid] = function (event) {
                            if (_this.props.disableOnClickOutside)
                                return;
                            if (_this.componentNode === null)
                                return;
                            if (_this.props.preventDefault) {
                                event.preventDefault();
                            }
                            if (_this.props.stopPropagation) {
                                event.stopPropagation();
                            }
                            if (_this.props.excludeScrollbar && clickedScrollbar(event))
                                return;
                            var current = event.target;
                            if (findHighest(current, _this.componentNode, _this.props.outsideClickIgnoreClass) !== document) {
                                return;
                            }
                            _this.__outsideClickHandler(event);
                        };
                        events.forEach(function (eventName) {
                            var handlerOptions = null;
                            var isTouchEvent = touchEvents.indexOf(eventName) !== -1;
                            if (isTouchEvent && passiveEventSupport) {
                                handlerOptions = {
                                    passive: !_this.props.preventDefault
                                };
                            }
                            document.addEventListener(eventName, handlersMap[_this._uid], handlerOptions);
                        });
                    };
                    _this.disableOnClickOutside = function () {
                        delete enabledInstances[_this._uid];
                        var fn = handlersMap[_this._uid];
                        if (fn && typeof document !== 'undefined') {
                            var events = _this.props.eventTypes;
                            if (!events.forEach) {
                                events = [events];
                            }
                            events.forEach(function (eventName) {
                                return document.removeEventListener(eventName, fn);
                            });
                            delete handlersMap[_this._uid];
                        }
                    };
                    _this.getRef = function (ref) {
                        return _this.instanceRef = ref;
                    };
                    _this._uid = uid();
                    return _this;
                }
                /**
                 * Access the WrappedComponent's instance.
                 */
                var _proto = onClickOutside.prototype;
                _proto.getInstance = function getInstance() {
                    if (!WrappedComponent.prototype.isReactComponent) {
                        return this;
                    }
                    var ref = this.instanceRef;
                    return ref.getInstance ? ref.getInstance() : ref;
                };
                /**
                 * Add click listeners to the current document,
                 * linked to this component's state.
                 */
                _proto.componentDidMount = function componentDidMount() {
                    // If we are in an environment without a DOM such
                    // as shallow rendering or snapshots then we exit
                    // early to prevent any unhandled errors being thrown.
                    if (typeof document === 'undefined' || !document.createElement) {
                        return;
                    }
                    var instance = this.getInstance();
                    if (config && typeof config.handleClickOutside === 'function') {
                        this.__clickOutsideHandlerProp = config.handleClickOutside(instance);
                        if (typeof this.__clickOutsideHandlerProp !== 'function') {
                            throw new Error('WrappedComponent lacks a function for processing outside click events specified by the handleClickOutside config option.');
                        }
                    }
                    this.componentNode = react_dom_1.findDOMNode(this.getInstance());
                    this.enableOnClickOutside();
                };
                _proto.componentDidUpdate = function componentDidUpdate() {
                    this.componentNode = react_dom_1.findDOMNode(this.getInstance());
                };
                /**
                 * Remove all document's event listeners for this component
                 */
                _proto.componentWillUnmount = function componentWillUnmount() {
                    this.disableOnClickOutside();
                };
                /**
                 * Can be called to explicitly enable event listening
                 * for clicks and touches outside of this element.
                 */
                /**
                 * Pass-through render
                 */
                _proto.render = function render() {
                    // eslint-disable-next-line no-unused-vars
                    var _props = this.props, excludeScrollbar = _props.excludeScrollbar, props = _objectWithoutProperties(_props, ['excludeScrollbar']);
                    if (WrappedComponent.prototype.isReactComponent) {
                        props.ref = this.getRef;
                    }
                    else {
                        props.wrappedRef = this.getRef;
                    }
                    props.disableOnClickOutside = this.disableOnClickOutside;
                    props.enableOnClickOutside = this.enableOnClickOutside;
                    return react_2.createElement(WrappedComponent, props);
                };
                return onClickOutside;
            }(react_2.Component), _class.displayName = 'OnClickOutside(' + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ')', _class.defaultProps = {
            eventTypes: ['mousedown', 'touchstart'],
            excludeScrollbar: config && config.excludeScrollbar || false,
            outsideClickIgnoreClass: IGNORE_CLASS_NAME,
            preventDefault: false,
            stopPropagation: false
        }, _class.getClass = function () {
            return WrappedComponent.getClass ? WrappedComponent.getClass() : WrappedComponent;
        }, _temp;
    }
    exports.default = onClickOutside;
});
///<amd-module name="sabre-ngv-UIComponents-utils/popper/utils" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/popper/utils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Check if the given variable is a function
     * @method
     * @memberof Popper.Utils
     * @argument {Any} functionToCheck - variable to check
     * @returns {Boolean} answer to: is a function?
     */
    function isFunction(functionToCheck) {
        var getType = {};
        return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
    }
    exports.isFunction = isFunction;
    exports.Placements = {
        TOP: 'top',
        TOP_START: 'top-start',
        TOP_END: 'top-end',
        RIGHT: 'right',
        RIGHT_START: 'right-start',
        RIGHT_END: 'right-end',
        BOTTOM: 'bottom',
        BOTTOM_START: 'bottom-start',
        BOTTOM_END: 'bottom-end',
        LEFT: 'left',
        LEFT_START: 'left-start',
        LEFT_END: 'left-end',
    };
    exports.Directions = {
        UP: 'up',
        LEFT: 'left',
        RIGHT: 'right',
        DOWN: 'down',
    };
});
///<amd-module name="sabre-ngv-UIComponents-utils/popper/Popperjs" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/popper/Popperjs", ["require", "exports", "sabre-ngv-UIComponents-utils/popper/utils"], function (require, exports, utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
    var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
    var timeoutDuration = 0;
    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
        if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
            timeoutDuration = 1;
            break;
        }
    }
    function microtaskDebounce(fn) {
        var called = false;
        return function () {
            if (called) {
                return;
            }
            called = true;
            window.Promise.resolve().then(function () {
                called = false;
                fn();
            });
        };
    }
    function taskDebounce(fn) {
        var scheduled = false;
        return function () {
            if (!scheduled) {
                scheduled = true;
                setTimeout(function () {
                    scheduled = false;
                    fn();
                }, timeoutDuration);
            }
        };
    }
    var supportsMicroTasks = isBrowser && window.Promise;
    /**
     * Create a debounced version of a method, that's asynchronously deferred
     * but called in the minimum time possible.
     *
     * @method
     * @memberof Popper.Utils
     * @argument {Function} fn
     * @returns {Function}
     */
    var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
    /**
     * Get CSS computed property of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Eement} element
     * @argument {String} property
     */
    function getStyleComputedProperty(element, property) {
        if (element.nodeType !== 1) {
            return [];
        }
        // NOTE: 1 DOM access here
        var css = getComputedStyle(element);
        return property ? css[property] : css;
    }
    /**
     * Returns the parentNode or the host of the element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} parent
     */
    function getParentNode(element) {
        if (element.nodeName === 'HTML') {
            return element;
        }
        return element.parentNode || element.host;
    }
    /**
     * Returns the scrolling parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} scroll parent
     */
    function getScrollParent(element) {
        // Return body, `getScroll` will take care to get the correct `scrollTop` from it
        if (!element) {
            return document.body;
        }
        switch (element.nodeName) {
            case 'HTML':
            case 'BODY':
                return element.ownerDocument.body;
            case '#document':
                return element.body;
        }
        // Firefox want us to check `-x` and `-y` variations as well
        var _getStyleComputedProp = getStyleComputedProperty(element), overflow = _getStyleComputedProp.overflow, overflowX = _getStyleComputedProp.overflowX, overflowY = _getStyleComputedProp.overflowY;
        if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
            return element;
        }
        return getScrollParent(getParentNode(element));
    }
    /**
     * Returns the offset parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} offset parent
     */
    function getOffsetParent(element) {
        // NOTE: 1 DOM access here
        var offsetParent = element && element.offsetParent;
        var nodeName = offsetParent && offsetParent.nodeName;
        if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
            if (element) {
                return element.ownerDocument.documentElement;
            }
            return document.documentElement;
        }
        // .offsetParent will return the closest TD or TABLE in case
        // no offsetParent is present, I hate this job...
        if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
            return getOffsetParent(offsetParent);
        }
        return offsetParent;
    }
    function isOffsetContainer(element) {
        var nodeName = element.nodeName;
        if (nodeName === 'BODY') {
            return false;
        }
        return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
    }
    /**
     * Finds the root node (document, shadowDOM root) of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} node
     * @returns {Element} root node
     */
    function getRoot(node) {
        if (node.parentNode !== null) {
            return getRoot(node.parentNode);
        }
        return node;
    }
    /**
     * Finds the offset parent common to the two provided nodes
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element1
     * @argument {Element} element2
     * @returns {Element} common offset parent
     */
    function findCommonOffsetParent(element1, element2) {
        // This check is needed to avoid errors in case one of the elements isn't defined for any reason
        if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
            return document.documentElement;
        }
        // Here we make sure to give as "start" the element that comes first in the DOM
        var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
        var start = order ? element1 : element2;
        var end = order ? element2 : element1;
        // Get common ancestor container
        var range = document.createRange();
        range.setStart(start, 0);
        range.setEnd(end, 0);
        var commonAncestorContainer = range.commonAncestorContainer;
        // Both nodes are inside #document
        if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
            if (isOffsetContainer(commonAncestorContainer)) {
                return commonAncestorContainer;
            }
            return getOffsetParent(commonAncestorContainer);
        }
        // one of the nodes is inside shadowDOM, find which one
        var element1root = getRoot(element1);
        if (element1root.host) {
            return findCommonOffsetParent(element1root.host, element2);
        }
        else {
            return findCommonOffsetParent(element1, getRoot(element2).host);
        }
    }
    /**
     * Gets the scroll value of the given element in the given side (top and left)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {String} side `top` or `left`
     * @returns {number} amount of scrolled pixels
     */
    function getScroll(element, position) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
        var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
        var nodeName = element.nodeName;
        if (nodeName === 'BODY' || nodeName === 'HTML') {
            var html = element.ownerDocument.documentElement;
            var scrollingElement = element.ownerDocument.scrollingElement || html;
            return scrollingElement[upperSide];
        }
        return element[upperSide];
    }
    /*
     * Sum or subtract the element scroll values (left and top) from a given rect object
     * @method
     * @memberof Popper.Utils
     * @param {Object} rect - Rect object you want to change
     * @param {HTMLElement} element - The element from the function reads the scroll values
     * @param {Boolean} subtract - set to true if you want to subtract the scroll values
     * @return {Object} rect - The modifier rect object
     */
    function includeScroll(rect, element) {
        var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var scrollTop = getScroll(element, 'top');
        var scrollLeft = getScroll(element, 'left');
        var modifier = subtract ? -1 : 1;
        rect.top += scrollTop * modifier;
        rect.bottom += scrollTop * modifier;
        rect.left += scrollLeft * modifier;
        rect.right += scrollLeft * modifier;
        return rect;
    }
    /*
     * Helper to detect borders of a given element
     * @method
     * @memberof Popper.Utils
     * @param {CSSStyleDeclaration} styles
     * Result of `getStyleComputedProperty` on the given element
     * @param {String} axis - `x` or `y`
     * @return {number} borders - The borders size of the given axis
     */
    function getBordersSize(styles, axis) {
        var sideA = axis === 'x' ? 'Left' : 'Top';
        var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
        return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
    }
    /**
     * Tells if you are running Internet Explorer
     * @method
     * @memberof Popper.Utils
     * @argument {number} version to check
     * @returns {Boolean} isIE
     */
    var cache = {};
    var isIE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var version = args.length > 0 && args[0] !== undefined ? args[0] : 'all';
        version = version.toString();
        if (cache.hasOwnProperty(version)) {
            return cache[version];
        }
        switch (version) {
            case '11':
                cache[version] = navigator.userAgent.indexOf('Trident') !== -1;
                break;
            case '10':
                cache[version] = navigator.appVersion.indexOf('MSIE 10') !== -1;
                break;
            case 'all':
                cache[version] = navigator.userAgent.indexOf('Trident') !== -1 || navigator.userAgent.indexOf('MSIE') !== -1;
                break;
        }
        //Set IE
        cache.all = cache.all || Object.keys(cache).some(function (key) {
            return cache[key];
        });
        return cache[version];
    };
    function getSize(axis, body, html, computedStyle) {
        return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);
    }
    function getWindowSizes() {
        var body = document.body;
        var html = document.documentElement;
        var computedStyle = isIE(10) && getComputedStyle(html);
        return {
            height: getSize('Height', body, html, computedStyle),
            width: getSize('Width', body, html, computedStyle)
        };
    }
    var classCallCheck = function (instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    };
    var createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ('value' in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    var defineProperty = function (obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        }
        else {
            obj[key] = value;
        }
        return obj;
    };
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    /**
     * Given element offsets, generate an output similar to getBoundingClientRect
     * @method
     * @memberof Popper.Utils
     * @argument {Object} offsets
     * @returns {Object} ClientRect like output
     */
    function getClientRect(offsets) {
        return _extends({}, offsets, {
            right: offsets.left + offsets.width,
            bottom: offsets.top + offsets.height
        });
    }
    /**
     * Get bounding client rect of given element
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} element
     * @return {Object} client rect
     */
    function getBoundingClientRect(element) {
        var rect = {};
        // IE10 10 FIX: Please, don't ask, the element isn't
        // considered in DOM in some circumstances...
        // This isn't reproducible in IE10 compatibility mode of IE11
        try {
            if (isIE(10)) {
                rect = element.getBoundingClientRect();
                var scrollTop = getScroll(element, 'top');
                var scrollLeft = getScroll(element, 'left');
                rect.top += scrollTop;
                rect.left += scrollLeft;
                rect.bottom += scrollTop;
                rect.right += scrollLeft;
            }
            else {
                rect = element.getBoundingClientRect();
            }
        }
        catch (e) {
        }
        var result = {
            left: rect.left,
            top: rect.top,
            width: rect.right - rect.left,
            height: rect.bottom - rect.top
        };
        // subtract scrollbar size from sizes
        var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};
        var width = sizes.width || element.clientWidth || result.right - result.left;
        var height = sizes.height || element.clientHeight || result.bottom - result.top;
        var horizScrollbar = element.offsetWidth - width;
        var vertScrollbar = element.offsetHeight - height;
        // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
        // we make this check conditional for performance reasons
        if (horizScrollbar || vertScrollbar) {
            var styles = getStyleComputedProperty(element);
            horizScrollbar -= getBordersSize(styles, 'x');
            vertScrollbar -= getBordersSize(styles, 'y');
            result.width -= horizScrollbar;
            result.height -= vertScrollbar;
        }
        return getClientRect(result);
    }
    function getOffsetRectRelativeToArbitraryNode(children, parent, isFixedPosition) {
        var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var isIE10 = isIE(10);
        var isHTML = parent.nodeName === 'HTML';
        var childrenRect = getBoundingClientRect(children);
        var parentRect = getBoundingClientRect(parent);
        var scrollParent = getScrollParent(children);
        var styles = getStyleComputedProperty(parent);
        var borderTopWidth = parseFloat(styles.borderTopWidth);
        var borderLeftWidth = parseFloat(styles.borderLeftWidth);
        // In cases where the parent is fixed, we must ignore negative scroll in offset calc
        if (fixedPosition && parent.nodeName === 'HTML') {
            parentRect.top = Math.max(parentRect.top, 0);
            parentRect.left = Math.max(parentRect.left, 0);
        }
        var offsets = getClientRect({
            top: childrenRect.top - parentRect.top - borderTopWidth,
            left: childrenRect.left - parentRect.left - borderLeftWidth,
            width: childrenRect.width,
            height: childrenRect.height
        });
        offsets.marginTop = 0;
        offsets.marginLeft = 0;
        // Subtract margins of documentElement in case it's being used as parent
        // we do this only on HTML because it's the only element that behaves
        // differently when margins are applied to it. The margins are included in
        // the box of the documentElement, in the other cases not.
        if (!isIE10 && isHTML) {
            var marginTop = parseFloat(styles.marginTop);
            var marginLeft = parseFloat(styles.marginLeft);
            offsets.top -= borderTopWidth - marginTop;
            offsets.bottom -= borderTopWidth - marginTop;
            offsets.left -= borderLeftWidth - marginLeft;
            offsets.right -= borderLeftWidth - marginLeft;
            // Attach marginTop and marginLeft because in some circumstances we may need them
            offsets.marginTop = marginTop;
            offsets.marginLeft = marginLeft;
        }
        if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
            offsets = includeScroll(offsets, parent);
        }
        return offsets;
    }
    function getViewportOffsetRectRelativeToArtbitraryNode(element, isFixedPosition) {
        var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var html = element.ownerDocument.documentElement;
        var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
        var width = Math.max(html.clientWidth, window.innerWidth || 0);
        var height = Math.max(html.clientHeight, window.innerHeight || 0);
        var scrollTop = !excludeScroll ? getScroll(html) : 0;
        var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;
        var offset = {
            top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
            left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
            width: width,
            height: height
        };
        return getClientRect(offset);
    }
    /**
     * Check if the given element is fixed or is inside a fixed parent
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {Element} customContainer
     * @returns {Boolean} answer to "isFixed?"
     */
    function isFixed(element) {
        if (element == null) {
            return false;
        }
        var nodeName = element.nodeName;
        if (nodeName === 'BODY' || nodeName === 'HTML') {
            return false;
        }
        if (getStyleComputedProperty(element, 'position') === 'fixed') {
            return true;
        }
        var parentNode = getParentNode(element);
        if (!parentNode) {
            return false;
        }
        return isFixed(parentNode);
    }
    /**
     * Finds the first parent of an element that has a transformed property defined
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} first transformed parent or documentElement
     */
    function getFixedPositionOffsetParent(element) {
        // This check is needed to avoid errors in case one of the elements isn't defined for any reason
        if (!element || !element.parentElement || isIE()) {
            return document.documentElement;
        }
        var el = element.parentElement;
        while (el && getStyleComputedProperty(el, 'transform') === 'none') {
            el = el.parentElement;
        }
        return el || document.documentElement;
    }
    /**
     * Computed the boundaries limits and return them
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} popper
     * @param {HTMLElement} reference
     * @param {number} padding
     * @param {HTMLElement} boundariesElement - Element used to define the boundaries
     * @returns {Object} Coordinates of the boundaries
     */
    function getBoundaries(popper, reference, padding, boundariesElement, isPositionFixed) {
        var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        // NOTE: 1 DOM access here
        var boundaries = { top: 0, left: 0 };
        var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
        // Handle viewport case
        if (boundariesElement === 'viewport') {
            boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
        }
        else {
            // Handle other cases based on DOM element used as boundaries
            var boundariesNode = void 0;
            if (boundariesElement === 'scrollParent') {
                boundariesNode = getScrollParent(getParentNode(reference));
                if (boundariesNode.nodeName === 'BODY') {
                    boundariesNode = popper.ownerDocument.documentElement;
                }
            }
            else if (boundariesElement === 'window') {
                boundariesNode = popper.ownerDocument.documentElement;
            }
            else {
                boundariesNode = boundariesElement;
            }
            var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
            // In case of HTML, we need a different computation
            if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
                var _getWindowSizes = getWindowSizes(), height = _getWindowSizes.height, width = _getWindowSizes.width;
                boundaries.top += offsets.top - offsets.marginTop;
                boundaries.bottom = height + offsets.top;
                boundaries.left += offsets.left - offsets.marginLeft;
                boundaries.right = width + offsets.left;
            }
            else {
                // for all the other DOM elements, this one is good
                boundaries = offsets;
            }
        }
        // Add paddings
        boundaries.left += padding;
        boundaries.top += padding;
        boundaries.right -= padding;
        boundaries.bottom -= padding;
        return boundaries;
    }
    function getArea(_ref) {
        var width = _ref.width, height = _ref.height;
        return width * height;
    }
    /**
     * Utility used to transform the `auto` placement to the placement with more
     * available space.
     * @method
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement, padding) {
        if (padding === void 0) { padding = 0; }
        if (placement.indexOf('auto') === -1) {
            return placement;
        }
        var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
        var rects = {
            top: {
                width: boundaries.width,
                height: refRect.top - boundaries.top
            },
            right: {
                width: boundaries.right - refRect.right,
                height: boundaries.height
            },
            bottom: {
                width: boundaries.width,
                height: boundaries.bottom - refRect.bottom
            },
            left: {
                width: refRect.left - boundaries.left,
                height: boundaries.height
            }
        };
        var sortedAreas = Object.keys(rects).map(function (key) {
            return _extends({
                key: key
            }, rects[key], {
                area: getArea(rects[key])
            });
        }).sort(function (a, b) {
            return b.area - a.area;
        });
        var filteredAreas = sortedAreas.filter(function (_ref2) {
            var width = _ref2.width, height = _ref2.height;
            return width >= popper.clientWidth && height >= popper.clientHeight;
        });
        var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
        var variation = placement.split('-')[1];
        return computedPlacement + (variation ? '-' + variation : '');
    }
    /**
     * Get offsets to the reference element
     * @method
     * @memberof Popper.Utils
     * @param {Object} state
     * @param {Element} popper - the popper element
     * @param {Element} reference - the reference element (the popper will be relative to this)
     * @param {Element} fixedPosition - is in fixed position mode
     * @returns {Object} An object containing the offsets which will be applied to the popper
     */
    function getReferenceOffsets(state, popper, reference, isPositionFixed) {
        var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
        return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
    }
    /**
     * Get the outer sizes of the given element (offset size + margins)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Object} object containing width and height properties
     */
    function getOuterSizes(element) {
        var styles = getComputedStyle(element);
        var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
        var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
        var result = {
            width: element.offsetWidth + y,
            height: element.offsetHeight + x
        };
        return result;
    }
    /**
     * Get the opposite placement of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement
     * @returns {String} flipped placement
     */
    function getOppositePlacement(placement) {
        var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
        return placement.replace(/left|right|bottom|top/g, function (matched) {
            return hash[matched];
        });
    }
    /**
     * Get offsets to the popper
     * @method
     * @memberof Popper.Utils
     * @param {Object} position - CSS position the Popper will get applied
     * @param {HTMLElement} popper - the popper element
     * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
     * @param {String} placement - one of the valid placement options
     * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
     */
    function getPopperOffsets(popper, referenceOffsets, placement) {
        placement = placement.split('-')[0];
        // Get popper node sizes
        var popperRect = getOuterSizes(popper);
        // Add position, width and height to our offsets object
        var popperOffsets = {
            width: popperRect.width,
            height: popperRect.height
        };
        // depending by the popper placement we have to compute its offsets slightly differently
        var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
        var mainSide = isHoriz ? 'top' : 'left';
        var secondarySide = isHoriz ? 'left' : 'top';
        var measurement = isHoriz ? 'height' : 'width';
        var secondaryMeasurement = !isHoriz ? 'height' : 'width';
        popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
        if (placement === secondarySide) {
            popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
        }
        else {
            popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
        }
        return popperOffsets;
    }
    /**
     * Mimics the `find` method of Array
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function find(arr, check) {
        // use native find if supported
        if (Array.prototype.find) {
            return arr.find(check);
        }
        // use `filter` to obtain the same behavior of `find`
        return arr.filter(check)[0];
    }
    /**
     * Return the index of the matching object
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function findIndex(arr, prop, value) {
        // use native findIndex if supported
        if (Array.prototype.findIndex) {
            return arr.findIndex(function (cur) {
                return cur[prop] === value;
            });
        }
        // use `find` + `indexOf` if `findIndex` isn't supported
        var match = find(arr, function (obj) {
            return obj[prop] === value;
        });
        return arr.indexOf(match);
    }
    /**
     * Loop trough the list of modifiers and run them in order,
     * each of them will then edit the data object.
     * @method
     * @memberof Popper.Utils
     * @param {dataObject} data
     * @param {Array} modifiers
     * @param {String} ends - Optional modifier name used as stopper
     * @returns {dataObject}
     */
    function runModifiers(modifiers, data, ends) {
        var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
        modifiersToRun.forEach(function (modifier) {
            if (modifier['function']) {
                // eslint-disable-line dot-notation
                console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
            }
            var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
            if (modifier.enabled && utils_1.isFunction(fn)) {
                // Add properties to offsets to make them a complete clientRect object
                // we do this before each modifier to make sure the previous one doesn't
                // mess with these values
                data.offsets.popper = getClientRect(data.offsets.popper);
                data.offsets.reference = getClientRect(data.offsets.reference);
                data = fn(data, modifier);
            }
        });
        return data;
    }
    /**
     * Updates the position of the popper, computing the new offsets and applying
     * the new style.<br />
     * Prefer `scheduleUpdate` over `update` because of performance reasons.
     * @method
     * @memberof Popper
     */
    function update() {
        // if popper is destroyed, don't perform any further update
        if (this.state.isDestroyed) {
            return;
        }
        var data = {
            instance: this,
            styles: {},
            arrowStyles: {},
            attributes: {},
            flipped: false,
            offsets: {}
        };
        // compute reference element offsets
        data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
        // compute auto placement, store placement inside the data object,
        // modifiers will be able to edit `placement` if needed
        // and refer to originalPlacement to know the original value
        data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
        // store the computed placement inside `originalPlacement`
        data.originalPlacement = data.placement;
        data.positionFixed = this.options.positionFixed;
        // compute the popper offsets
        data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
        data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';
        // run the modifiers
        data = runModifiers(this.modifiers, data);
        // the first `update` will call `onCreate` callback
        // the other ones will call `onUpdate` callback
        if (!this.state.isCreated) {
            this.state.isCreated = true;
            this.options.onCreate(data);
        }
        else {
            this.options.onUpdate(data);
        }
    }
    /**
     * Helper used to know if the given modifier is enabled.
     * @method
     * @memberof Popper.Utils
     * @returns {Boolean}
     */
    function isModifierEnabled(modifiers, modifierName) {
        return modifiers.some(function (_ref) {
            var name = _ref.name, enabled = _ref.enabled;
            return enabled && name === modifierName;
        });
    }
    /**
     * Get the prefixed supported property name
     * @method
     * @memberof Popper.Utils
     * @argument {String} property (camelCase)
     * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
     */
    function getSupportedPropertyName(property) {
        var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
        var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
        for (var i = 0; i < prefixes.length - 1; i++) {
            var prefix = prefixes[i];
            var toCheck = prefix ? '' + prefix + upperProp : property;
            if (typeof document.body.style[toCheck] !== 'undefined') {
                return toCheck;
            }
        }
        return null;
    }
    /**
     * Destroy the popper
     * @method
     * @memberof Popper
     */
    function destroy() {
        this.state.isDestroyed = true;
        // touch DOM only if `applyStyle` modifier is enabled
        if (isModifierEnabled(this.modifiers, 'applyStyle')) {
            this.popper.removeAttribute('x-placement');
            this.popper.style.left = '';
            this.popper.style.position = '';
            this.popper.style.top = '';
            this.popper.style[getSupportedPropertyName('transform')] = '';
        }
        this.disableEventListeners();
        // remove the popper if user explicity asked for the deletion on destroy
        // do not use `remove` because IE11 doesn't support it
        if (this.options.removeOnDestroy) {
            this.popper.parentNode.removeChild(this.popper);
        }
        return this;
    }
    /**
     * Get the window associated with the element
     * @argument {Element} element
     * @returns {Window}
     */
    function getWindow(element) {
        var ownerDocument = element.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView : window;
    }
    function attachToScrollParents(scrollParent, event, callback, scrollParents) {
        var isBody = scrollParent.nodeName === 'BODY';
        var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
        target.addEventListener(event, callback, { passive: true });
        if (!isBody) {
            attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
        }
        scrollParents.push(target);
    }
    /**
     * Setup needed event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function setupEventListeners(reference, options, state, updateBound) {
        // Resize event listener on window
        state.updateBound = updateBound;
        getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });
        // Scroll event listener on scroll parents
        var scrollElement = getScrollParent(reference);
        attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
        state.scrollElement = scrollElement;
        state.eventsEnabled = true;
        return state;
    }
    /**
     * It will add resize/scroll events and start recalculating
     * position of the popper element when they are triggered.
     * @method
     * @memberof Popper
     */
    function enableEventListeners() {
        if (!this.state.eventsEnabled) {
            this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
        }
    }
    /**
     * Remove event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function removeEventListeners(reference, state) {
        // Remove resize event listener on window
        getWindow(reference).removeEventListener('resize', state.updateBound);
        // Remove scroll event listener on scroll parents
        state.scrollParents.forEach(function (target) {
            target.removeEventListener('scroll', state.updateBound);
        });
        // Reset state
        state.updateBound = null;
        state.scrollParents = [];
        state.scrollElement = null;
        state.eventsEnabled = false;
        return state;
    }
    /**
     * It will remove resize/scroll events and won't recalculate popper position
     * when they are triggered. It also won't trigger onUpdate callback anymore,
     * unless you call `update` method manually.
     * @method
     * @memberof Popper
     */
    function disableEventListeners() {
        if (this.state.eventsEnabled) {
            cancelAnimationFrame(this.scheduleUpdate);
            this.state = removeEventListeners(this.reference, this.state);
        }
    }
    /**
     * Tells if a given input is a number
     * @method
     * @memberof Popper.Utils
     * @param {*} input to check
     * @return {Boolean}
     */
    function isNumeric(n) {
        return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
    }
    /**
     * Set the style to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the style to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setStyles(element, styles) {
        Object.keys(styles).forEach(function (prop) {
            var unit = '';
            // add unit if the value is numeric and is one of the following
            if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
                unit = 'px';
            }
            element.style[prop] = styles[prop] + unit;
        });
    }
    /**
     * Set the attributes to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the attributes to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setAttributes(element, attributes) {
        Object.keys(attributes).forEach(function (prop) {
            var value = attributes[prop];
            if (value !== false) {
                element.setAttribute(prop, attributes[prop]);
            }
            else {
                element.removeAttribute(prop);
            }
        });
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} data.styles - List of style properties - values to apply to popper element
     * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The same data object
     */
    function applyStyle(data) {
        // any property present in `data.styles` will be applied to the popper,
        // in this way we can make the 3rd party modifiers add custom styles to it
        // Be aware, modifiers could override the properties defined in the previous
        // lines of this modifier!
        setStyles(data.instance.popper, data.styles);
        // any property present in `data.attributes` will be applied to the popper,
        // they will be set as HTML attributes of the element
        setAttributes(data.instance.popper, data.attributes);
        // if arrowElement is defined and arrowStyles has some properties
        if (data.arrowElement && Object.keys(data.arrowStyles).length) {
            setStyles(data.arrowElement, data.arrowStyles);
        }
        return data;
    }
    /**
     * Set the x-placement attribute before everything else because it could be used
     * to add margins to the popper margins needs to be calculated to get the
     * correct popper offsets.
     * @method
     * @memberof Popper.modifiers
     * @param {HTMLElement} reference - The reference element used to position the popper
     * @param {HTMLElement} popper - The HTML element used as popper.
     * @param {Object} options - Popper.js options
     */
    function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
        // compute reference element offsets
        var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
        // compute auto placement, store placement inside the data object,
        // modifiers will be able to edit `placement` if needed
        // and refer to originalPlacement to know the original value
        var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
        popper.setAttribute('x-placement', placement);
        // Apply `position` to popper before anything else because
        // without the position applied we can't guarantee correct computations
        setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });
        return options;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeStyle(data, options) {
        var x = options.x, y = options.y;
        var popper = data.offsets.popper;
        // Remove this legacy support in Popper.js v2
        var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
            return modifier.name === 'applyStyle';
        }).gpuAcceleration;
        if (legacyGpuAccelerationOption !== undefined) {
            console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
        }
        var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
        var offsetParent = getOffsetParent(data.instance.popper);
        var offsetParentRect = getBoundingClientRect(offsetParent);
        // Styles
        var styles = {
            position: popper.position
        };
        // floor sides to avoid blurry text
        var offsets = {
            left: Math.floor(popper.left),
            top: Math.floor(popper.top),
            bottom: Math.floor(popper.bottom),
            right: Math.floor(popper.right)
        };
        var sideA = x === 'bottom' ? 'top' : 'bottom';
        var sideB = y === 'right' ? 'left' : 'right';
        // if gpuAcceleration is set to `true` and transform is supported,
        //  we use `translate3d` to apply the position to the popper we
        // automatically use the supported prefixed version if needed
        var prefixedProperty = getSupportedPropertyName('transform');
        // now, let's make a step back and look at this code closely (wtf?)
        // If the content of the popper grows once it's been positioned, it
        // may happen that the popper gets misplaced because of the new content
        // overflowing its reference element
        // To avoid this problem, we provide two options (x and y), which allow
        // the consumer to define the offset origin.
        // If we position a popper on top of a reference element, we can set
        // `x` to `top` to make the popper grow towards its top instead of
        // its bottom.
        var left = void 0, top = void 0;
        if (sideA === 'bottom') {
            top = -offsetParentRect.height + offsets.bottom;
        }
        else {
            top = offsets.top;
        }
        if (sideB === 'right') {
            left = -offsetParentRect.width + offsets.right;
        }
        else {
            left = offsets.left;
        }
        if (gpuAcceleration && prefixedProperty) {
            styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
            styles[sideA] = 0;
            styles[sideB] = 0;
            styles.willChange = 'transform';
        }
        else {
            // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
            var invertTop = sideA === 'bottom' ? -1 : 1;
            var invertLeft = sideB === 'right' ? -1 : 1;
            styles[sideA] = top * invertTop;
            styles[sideB] = left * invertLeft;
            styles.willChange = sideA + ', ' + sideB;
        }
        // Attributes
        var attributes = {
            'x-placement': data.placement
        };
        // Update `data` attributes, styles and arrowStyles
        data.attributes = _extends({}, attributes, data.attributes);
        data.styles = _extends({}, styles, data.styles);
        data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
        return data;
    }
    /**
     * Helper used to know if the given modifier depends from another one.<br />
     * It checks if the needed modifier is listed and enabled.
     * @method
     * @memberof Popper.Utils
     * @param {Array} modifiers - list of modifiers
     * @param {String} requestingName - name of requesting modifier
     * @param {String} requestedName - name of requested modifier
     * @returns {Boolean}
     */
    function isModifierRequired(modifiers, requestingName, requestedName) {
        var requesting = find(modifiers, function (_ref) {
            var name = _ref.name;
            return name === requestingName;
        });
        var isRequired = !!requesting && modifiers.some(function (modifier) {
            return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
        });
        if (!isRequired) {
            var _requesting = '`' + requestingName + '`';
            var requested = '`' + requestedName + '`';
            console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
        }
        return isRequired;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function arrow(data, options) {
        var _data$offsets$arrow;
        // arrow depends on keepTogether in order to work
        if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
            return data;
        }
        var arrowElement = options.element;
        // if arrowElement is a string, suppose it's a CSS selector
        if (typeof arrowElement === 'string') {
            arrowElement = data.instance.popper.querySelector(arrowElement);
            // if arrowElement is not found, don't run the modifier
            if (!arrowElement) {
                return data;
            }
        }
        else {
            // if the arrowElement isn't a query selector we must check that the
            // provided DOM node is child of its popper node
            if (!data.instance.popper.contains(arrowElement)) {
                console.warn('WARNING: `arrow.element` must be child of its popper element!');
                return data;
            }
        }
        var placement = data.placement.split('-')[0];
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var isVertical = ['left', 'right'].indexOf(placement) !== -1;
        var len = isVertical ? 'height' : 'width';
        var sideCapitalized = isVertical ? 'Top' : 'Left';
        var side = sideCapitalized.toLowerCase();
        var altSide = isVertical ? 'left' : 'top';
        var opSide = isVertical ? 'bottom' : 'right';
        var arrowElementSize = getOuterSizes(arrowElement)[len];
        //
        // extends keepTogether behavior making sure the popper and its
        // reference have enough pixels in conjuction
        //
        // top/left side
        if (reference[opSide] - arrowElementSize < popper[side]) {
            data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
        }
        // bottom/right side
        if (reference[side] + arrowElementSize > popper[opSide]) {
            data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
        }
        data.offsets.popper = getClientRect(data.offsets.popper);
        // compute center of the popper
        var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
        // Compute the sideValue using the updated popper offsets
        // take popper margin in account because we don't have this info available
        var css = getStyleComputedProperty(data.instance.popper);
        var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
        var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
        var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
        // prevent arrowElement from being placed not contiguously to its popper
        sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
        data.arrowElement = arrowElement;
        data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
        return data;
    }
    /**
     * Get the opposite placement variation of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement variation
     * @returns {String} flipped placement variation
     */
    function getOppositeVariation(variation) {
        if (variation === 'end') {
            return 'start';
        }
        else if (variation === 'start') {
            return 'end';
        }
        return variation;
    }
    /**
     * List of accepted placements to use as values of the `placement` option.<br />
     * Valid placements are:
     * - `auto`
     * - `top`
     * - `right`
     * - `bottom`
     * - `left`
     *
     * Each placement can have a variation from this list:
     * - `-start`
     * - `-end`
     *
     * Variations are interpreted easily if you think of them as the left to right
     * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
     * is right.<br />
     * Vertically (`left` and `right`), `start` is top and `end` is bottom.
     *
     * Some valid examples are:
     * - `top-end` (on top of reference, right aligned)
     * - `right-start` (on right of reference, top aligned)
     * - `bottom` (on bottom, centered)
     * - `auto-right` (on the side with more space available, alignment depends by placement)
     *
     * @static
     * @type {Array}
     * @enum {String}
     * @readonly
     * @method placements
     * @memberof Popper
     */
    var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];
    // Get rid of `auto` `auto-start` and `auto-end`
    var validPlacements = placements.slice(3);
    /**
     * Given an initial placement, returns all the subsequent placements
     * clockwise (or counter-clockwise).
     *
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement - A valid placement (it accepts variations)
     * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
     * @returns {Array} placements including their variations
     */
    function clockwise(placement, counter) {
        if (counter === void 0) { counter = false; }
        var index = validPlacements.indexOf(placement);
        var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
        return counter ? arr.reverse() : arr;
    }
    var BEHAVIORS = {
        FLIP: 'flip',
        CLOCKWISE: 'clockwise',
        COUNTERCLOCKWISE: 'counterclockwise'
    };
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function flip(data, options) {
        // if `inner` modifier is enabled, we can't use the `flip` modifier
        if (isModifierEnabled(data.instance.modifiers, 'inner')) {
            return data;
        }
        if (data.flipped && data.placement === data.originalPlacement) {
            // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
            return data;
        }
        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
        var placement = data.placement.split('-')[0];
        var placementOpposite = getOppositePlacement(placement);
        var variation = data.placement.split('-')[1] || '';
        var flipOrder = [];
        switch (options.behavior) {
            case BEHAVIORS.FLIP:
                flipOrder = [placement, placementOpposite];
                break;
            case BEHAVIORS.CLOCKWISE:
                flipOrder = clockwise(placement);
                break;
            case BEHAVIORS.COUNTERCLOCKWISE:
                flipOrder = clockwise(placement, true);
                break;
            default:
                flipOrder = options.behavior;
        }
        flipOrder.forEach(function (step, index) {
            if (placement !== step || flipOrder.length === index + 1) {
                return data;
            }
            placement = data.placement.split('-')[0];
            placementOpposite = getOppositePlacement(placement);
            var popperOffsets = data.offsets.popper;
            var refOffsets = data.offsets.reference;
            // using floor because the reference offsets may contain decimals we are not going to consider here
            var floor = Math.floor;
            var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
            var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
            var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
            var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
            var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
            var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;
            // flip the variation if required
            var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
            var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);
            if (overlapsRef || overflowsBoundaries || flippedVariation) {
                // this boolean to detect any flip loop
                data.flipped = true;
                if (overlapsRef || overflowsBoundaries) {
                    placement = flipOrder[index + 1];
                }
                if (flippedVariation) {
                    variation = getOppositeVariation(variation);
                }
                data.placement = placement + (variation ? '-' + variation : '');
                // this object contains `position`, we want to preserve it along with
                // any additional property we may add in the future
                data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
                data = runModifiers(data.instance.modifiers, data, 'flip');
            }
        });
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function keepTogether(data) {
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var placement = data.placement.split('-')[0];
        var floor = Math.floor;
        var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
        var side = isVertical ? 'right' : 'bottom';
        var opSide = isVertical ? 'left' : 'top';
        var measurement = isVertical ? 'width' : 'height';
        if (popper[side] < floor(reference[opSide])) {
            data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
        }
        if (popper[opSide] > floor(reference[side])) {
            data.offsets.popper[opSide] = floor(reference[side]);
        }
        return data;
    }
    /**
     * Converts a string containing value + unit into a px value number
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} str - Value + unit string
     * @argument {String} measurement - `height` or `width`
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @returns {Number|String}
     * Value in pixels, or original string if no values were extracted
     */
    function toValue(str, measurement, popperOffsets, referenceOffsets) {
        // separate value from unit
        var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
        var value = +split[1];
        var unit = split[2];
        // If it's not a number it's an operator, I guess
        if (!value) {
            return str;
        }
        if (unit.indexOf('%') === 0) {
            var element = void 0;
            switch (unit) {
                case '%p':
                    element = popperOffsets;
                    break;
                case '%':
                case '%r':
                default:
                    element = referenceOffsets;
            }
            var rect = getClientRect(element);
            return rect[measurement] / 100 * value;
        }
        else if (unit === 'vh' || unit === 'vw') {
            // if is a vh or vw, we calculate the size based on the viewport
            var size = void 0;
            if (unit === 'vh') {
                size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            }
            else {
                size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
            }
            return size / 100 * value;
        }
        else {
            // if is an explicit pixel unit, we get rid of the unit and keep the value
            // if is an implicit unit, it's px, and we return just the value
            return value;
        }
    }
    /**
     * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} offset
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @argument {String} basePlacement
     * @returns {Array} a two cells array with x and y offsets in numbers
     */
    function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
        var offsets = [0, 0];
        // Use height if placement is left or right and index is 0 otherwise use width
        // in this way the first offset will use an axis and the second one
        // will use the other one
        var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;
        // Split the offset string to obtain a list of values and operands
        // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
        var fragments = offset.split(/(\+|\-)/).map(function (frag) {
            return frag.trim();
        });
        // Detect if the offset string contains a pair of values or a single one
        // they could be separated by comma or space
        var divider = fragments.indexOf(find(fragments, function (frag) {
            return frag.search(/,|\s/) !== -1;
        }));
        if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
            console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
        }
        // If divider is found, we divide the list of values and operands to divide
        // them by ofset X and Y.
        var splitRegex = /\s*,\s*|\s+/;
        var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
        // Convert the values with units to absolute pixels to allow our computations
        ops = ops.map(function (op, index) {
            // Most of the units rely on the orientation of the popper
            var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
            var mergeWithPrevious = false;
            return op
                .reduce(function (a, b) {
                if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
                    a[a.length - 1] = b;
                    mergeWithPrevious = true;
                    return a;
                }
                else if (mergeWithPrevious) {
                    a[a.length - 1] += b;
                    mergeWithPrevious = false;
                    return a;
                }
                else {
                    return a.concat(b);
                }
            }, [])
                .map(function (str) {
                return toValue(str, measurement, popperOffsets, referenceOffsets);
            });
        });
        // Loop trough the offsets arrays and execute the operations
        ops.forEach(function (op, index) {
            op.forEach(function (frag, index2) {
                if (isNumeric(frag)) {
                    offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
                }
            });
        });
        return offsets;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @argument {Number|String} options.offset=0
     * The offset value as described in the modifier description
     * @returns {Object} The data object, properly modified
     */
    function offset(data, _ref) {
        var offset = _ref.offset;
        var placement = data.placement, _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var basePlacement = placement.split('-')[0];
        var offsets = void 0;
        if (isNumeric(+offset)) {
            offsets = [+offset, 0];
        }
        else {
            offsets = parseOffset(offset, popper, reference, basePlacement);
        }
        if (basePlacement === 'left') {
            popper.top += offsets[0];
            popper.left -= offsets[1];
        }
        else if (basePlacement === 'right') {
            popper.top += offsets[0];
            popper.left += offsets[1];
        }
        else if (basePlacement === 'top') {
            popper.left += offsets[0];
            popper.top -= offsets[1];
        }
        else if (basePlacement === 'bottom') {
            popper.left += offsets[0];
            popper.top += offsets[1];
        }
        data.popper = popper;
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function preventOverflow(data, options) {
        var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
        // If offsetParent is the reference element, we really want to
        // go one step up and use the next offsetParent as reference to
        // avoid to make this modifier completely useless and look like broken
        if (data.instance.reference === boundariesElement) {
            boundariesElement = getOffsetParent(boundariesElement);
        }
        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
        options.boundaries = boundaries;
        var order = options.priority;
        var popper = data.offsets.popper;
        var check = {
            primary: function primary(placement) {
                var value = popper[placement];
                if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
                    value = Math.max(popper[placement], boundaries[placement]);
                }
                return defineProperty({}, placement, value);
            },
            secondary: function secondary(placement) {
                var mainSide = placement === 'right' ? 'left' : 'top';
                var value = popper[mainSide];
                if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
                    value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
                }
                return defineProperty({}, mainSide, value);
            }
        };
        order.forEach(function (placement) {
            var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
            popper = _extends({}, popper, check[side](placement));
        });
        data.offsets.popper = popper;
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function shift(data) {
        var placement = data.placement;
        var basePlacement = placement.split('-')[0];
        var shiftvariation = placement.split('-')[1];
        // if shift shiftvariation is specified, run the modifier
        if (shiftvariation) {
            var _data$offsets = data.offsets, reference = _data$offsets.reference, popper = _data$offsets.popper;
            var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
            var side = isVertical ? 'left' : 'top';
            var measurement = isVertical ? 'width' : 'height';
            var shiftOffsets = {
                start: defineProperty({}, side, reference[side]),
                end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
            };
            data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
        }
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function hide(data) {
        if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
            return data;
        }
        var refRect = data.offsets.reference;
        var bound = find(data.instance.modifiers, function (modifier) {
            return modifier.name === 'preventOverflow';
        }).boundaries;
        if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === true) {
                return data;
            }
            data.hide = true;
            data.attributes['x-out-of-boundaries'] = '';
        }
        else {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === false) {
                return data;
            }
            data.hide = false;
            data.attributes['x-out-of-boundaries'] = false;
        }
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function inner(data) {
        var placement = data.placement;
        var basePlacement = placement.split('-')[0];
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
        var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
        popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
        data.placement = getOppositePlacement(placement);
        data.offsets.popper = getClientRect(popper);
        return data;
    }
    /**
     * Modifier function, each modifier can have a function of this type assigned
     * to its `fn` property.<br />
     * These functions will be called on each update, this means that you must
     * make sure they are performant enough to avoid performance bottlenecks.
     *
     * @function ModifierFn
     * @argument {dataObject} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {dataObject} The data object, properly modified
     */
    /**
     * Modifiers are plugins used to alter the behavior of your poppers.<br />
     * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
     * needed by the library.
     *
     * Usually you don't want to override the `order`, `fn` and `onLoad` props.
     * All the other properties are configurations that could be tweaked.
     * @namespace modifiers
     */
    var modifiers = {
        /**
         * Modifier used to shift the popper on the start or end of its reference
         * element.<br />
         * It will read the variation of the `placement` property.<br />
         * It can be one either `-end` or `-start`.
         * @memberof modifiers
         * @inner
         */
        shift: {
            /** @prop {number} order=100 - Index used to define the order of execution */
            order: 100,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: shift
        },
        /**
         * The `offset` modifier can shift your popper on both its axis.
         *
         * It accepts the following units:
         * - `px` or unitless, interpreted as pixels
         * - `%` or `%r`, percentage relative to the length of the reference element
         * - `%p`, percentage relative to the length of the popper element
         * - `vw`, CSS viewport width unit
         * - `vh`, CSS viewport height unit
         *
         * For length is intended the main axis relative to the placement of the popper.<br />
         * This means that if the placement is `top` or `bottom`, the length will be the
         * `width`. In case of `left` or `right`, it will be the height.
         *
         * You can provide a single value (as `Number` or `String`), or a pair of values
         * as `String` divided by a comma or one (or more) white spaces.<br />
         * The latter is a deprecated method because it leads to confusion and will be
         * removed in v2.<br />
         * Additionally, it accepts additions and subtractions between different units.
         * Note that multiplications and divisions aren't supported.
         *
         * Valid examples are:
         * ```
         * 10
         * '10%'
         * '10, 10'
         * '10%, 10'
         * '10 + 10%'
         * '10 - 5vh + 3%'
         * '-10px + 5vh, 5px - 6%'
         * ```
         * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
         * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
         * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)
         *
         * @memberof modifiers
         * @inner
         */
        offset: {
            /** @prop {number} order=200 - Index used to define the order of execution */
            order: 200,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: offset,
            /** @prop {Number|String} offset=0
             * The offset value as described in the modifier description
             */
            offset: 0
        },
        /**
         * Modifier used to prevent the popper from being positioned outside the boundary.
         *
         * An scenario exists where the reference itself is not within the boundaries.<br />
         * We can say it has "escaped the boundaries" — or just "escaped".<br />
         * In this case we need to decide whether the popper should either:
         *
         * - detach from the reference and remain "trapped" in the boundaries, or
         * - if it should ignore the boundary and "escape with its reference"
         *
         * When `escapeWithReference` is set to`true` and reference is completely
         * outside its boundaries, the popper will overflow (or completely leave)
         * the boundaries in order to remain attached to the edge of the reference.
         *
         * @memberof modifiers
         * @inner
         */
        preventOverflow: {
            /** @prop {number} order=300 - Index used to define the order of execution */
            order: 300,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: preventOverflow,
            /**
             * @prop {Array} [priority=['left','right','top','bottom']]
             * Popper will try to prevent overflow following these priorities by default,
             * then, it could overflow on the left and on top of the `boundariesElement`
             */
            priority: ['left', 'right', 'top', 'bottom'],
            /**
             * @prop {number} padding=5
             * Amount of pixel used to define a minimum distance between the boundaries
             * and the popper this makes sure the popper has always a little padding
             * between the edges of its container
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='scrollParent'
             * Boundaries used by the modifier, can be `scrollParent`, `window`,
             * `viewport` or any DOM element.
             */
            boundariesElement: 'scrollParent'
        },
        /**
         * Modifier used to make sure the reference and its popper stay near eachothers
         * without leaving any gap between the two. Expecially useful when the arrow is
         * enabled and you want to assure it to point to its reference element.
         * It cares only about the first axis, you can still have poppers with margin
         * between the popper and its reference element.
         * @memberof modifiers
         * @inner
         */
        keepTogether: {
            /** @prop {number} order=400 - Index used to define the order of execution */
            order: 400,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: keepTogether
        },
        /**
         * This modifier is used to move the `arrowElement` of the popper to make
         * sure it is positioned between the reference element and its popper element.
         * It will read the outer size of the `arrowElement` node to detect how many
         * pixels of conjuction are needed.
         *
         * It has no effect if no `arrowElement` is provided.
         * @memberof modifiers
         * @inner
         */
        arrow: {
            /** @prop {number} order=500 - Index used to define the order of execution */
            order: 500,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: arrow,
            /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
            element: '[x-arrow]'
        },
        /**
         * Modifier used to flip the popper's placement when it starts to overlap its
         * reference element.
         *
         * Requires the `preventOverflow` modifier before it in order to work.
         *
         * **NOTE:** this modifier will interrupt the current update cycle and will
         * restart it if it detects the need to flip the placement.
         * @memberof modifiers
         * @inner
         */
        flip: {
            /** @prop {number} order=600 - Index used to define the order of execution */
            order: 600,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: flip,
            /**
             * @prop {String|Array} behavior='flip'
             * The behavior used to change the popper's placement. It can be one of
             * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
             * placements (with optional variations).
             */
            behavior: 'flip',
            /**
             * @prop {number} padding=5
             * The popper will flip if it hits the edges of the `boundariesElement`
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='viewport'
             * The element which will define the boundaries of the popper position,
             * the popper will never be placed outside of the defined boundaries
             * (except if keepTogether is enabled)
             */
            boundariesElement: 'viewport'
        },
        /**
         * Modifier used to make the popper flow toward the inner of the reference element.
         * By default, when this modifier is disabled, the popper will be placed outside
         * the reference element.
         * @memberof modifiers
         * @inner
         */
        inner: {
            /** @prop {number} order=700 - Index used to define the order of execution */
            order: 700,
            /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
            enabled: false,
            /** @prop {ModifierFn} */
            fn: inner
        },
        /**
         * Modifier used to hide the popper when its reference element is outside of the
         * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
         * be used to hide with a CSS selector the popper when its reference is
         * out of boundaries.
         *
         * Requires the `preventOverflow` modifier before it in order to work.
         * @memberof modifiers
         * @inner
         */
        hide: {
            /** @prop {number} order=800 - Index used to define the order of execution */
            order: 800,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: hide
        },
        /**
         * Computes the style that will be applied to the popper element to gets
         * properly positioned.
         *
         * Note that this modifier will not touch the DOM, it just prepares the styles
         * so that `applyStyle` modifier can apply it. This separation is useful
         * in case you need to replace `applyStyle` with a custom implementation.
         *
         * This modifier has `850` as `order` value to maintain backward compatibility
         * with previous versions of Popper.js. Expect the modifiers ordering method
         * to change in future major versions of the library.
         *
         * @memberof modifiers
         * @inner
         */
        computeStyle: {
            /** @prop {number} order=850 - Index used to define the order of execution */
            order: 850,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: computeStyle,
            /**
             * @prop {Boolean} gpuAcceleration=!(window.devicePixelRatio < 1.5 && /Win/.test(navigator.platform))
             * If true, it uses the CSS 3d transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties.
             */
            gpuAcceleration: !(window.devicePixelRatio < 1.5 && /Win/.test(navigator.platform)),
            /**
             * @prop {string} [x='bottom']
             * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
             * Change this if your popper should grow in a direction different from `bottom`
             */
            x: 'bottom',
            /**
             * @prop {string} [x='left']
             * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
             * Change this if your popper should grow in a direction different from `right`
             */
            y: 'right'
        },
        /**
         * Applies the computed styles to the popper element.
         *
         * All the DOM manipulations are limited to this modifier. This is useful in case
         * you want to integrate Popper.js inside a framework or view library and you
         * want to delegate all the DOM manipulations to it.
         *
         * Note that if you disable this modifier, you must make sure the popper element
         * has its position set to `absolute` before Popper.js can do its work!
         *
         * Just disable this modifier and define you own to achieve the desired effect.
         *
         * @memberof modifiers
         * @inner
         */
        applyStyle: {
            /** @prop {number} order=900 - Index used to define the order of execution */
            order: 900,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: applyStyle,
            /** @prop {Function} */
            onLoad: applyStyleOnLoad,
            /**
             * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
             * @prop {Boolean} gpuAcceleration=!(window.devicePixelRatio < 1.5 && /Win/.test(navigator.platform))
             * If true, it uses the CSS 3d transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties.
             */
            gpuAcceleration: undefined
        }
    };
    /**
     * The `dataObject` is an object containing all the informations used by Popper.js
     * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
     * @name dataObject
     * @property {Object} data.instance The Popper.js instance
     * @property {String} data.placement Placement applied to popper
     * @property {String} data.originalPlacement Placement originally defined on init
     * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
     * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.
     * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
     * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.boundaries Offsets of the popper boundaries
     * @property {Object} data.offsets The measurements of popper, reference and arrow elements.
     * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
     */
    /**
     * Default options provided to Popper.js constructor.<br />
     * These can be overriden using the `options` argument of Popper.js.<br />
     * To override an option, simply pass as 3rd argument an object with the same
     * structure of this object, example:
     * ```
     * new Popper(ref, pop, {
     *   modifiers: {
     *     preventOverflow: { enabled: false }
     *   }
     * })
     * ```
     * @type {Object}
     * @static
     * @memberof Popper
     */
    var Defaults = {
        /**
         * Popper's placement
         * @prop {Popper.placements} placement='bottom'
         */
        placement: 'bottom',
        /**
         * Set this to true if you want popper to position it self in 'fixed' mode
         * @prop {Boolean} positionFixed=false
         */
        positionFixed: true,
        /**
         * Whether events (resize, scroll) are initially enabled
         * @prop {Boolean} eventsEnabled=true
         */
        eventsEnabled: true,
        /**
         * Set to true if you want to automatically remove the popper when
         * you call the `destroy` method.
         * @prop {Boolean} removeOnDestroy=false
         */
        removeOnDestroy: false,
        /**
         * Callback called when the popper is created.<br />
         * By default, is set to no-op.<br />
         * Access Popper.js instance with `data.instance`.
         * @prop {onCreate}
         */
        onCreate: function onCreate() {
        },
        /**
         * Callback called when the popper is updated, this callback is not called
         * on the initialization/creation of the popper, but only on subsequent
         * updates.<br />
         * By default, is set to no-op.<br />
         * Access Popper.js instance with `data.instance`.
         * @prop {onUpdate}
         */
        onUpdate: function onUpdate() {
        },
        /**
         * List of modifiers used to modify the offsets before they are applied to the popper.
         * They provide most of the functionalities of Popper.js
         * @prop {modifiers}
         */
        modifiers: modifiers
    };
    /**
     * @callback onCreate
     * @param {dataObject} data
     */
    /**
     * @callback onUpdate
     * @param {dataObject} data
     */
    // Utils
    // Methods
    var Popper = function () {
        /**
         * Create a new Popper.js instance
         * @class Popper
         * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
         * @param {HTMLElement} popper - The HTML element used as popper.
         * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
         * @return {Object} instance - The generated Popper.js instance
         */
        function Popper(reference, popper) {
            var _this = this;
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            classCallCheck(this, Popper);
            this.scheduleUpdate = function () {
                return requestAnimationFrame(_this.update);
            };
            // make update() debounced, so that it only runs at most once-per-tick
            this.update = debounce(this.update.bind(this));
            // with {} we create a new object with the options inside it
            this.options = _extends({}, Defaults, options);
            // init state
            this.state = {
                isDestroyed: false,
                isCreated: false,
                scrollParents: []
            };
            // get reference and popper elements (allow jQuery wrappers)
            this.reference = reference && reference.jquery ? reference[0] : reference;
            this.popper = popper && popper.jquery ? popper[0] : popper;
            // Deep merge modifiers options
            this.options.modifiers = {};
            Object.keys(_extends({}, Defaults.modifiers, options.modifiers)).forEach(function (name) {
                _this.options.modifiers[name] = _extends({}, Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
            });
            // Refactoring modifiers' list (Object => Array)
            this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
                return _extends({
                    name: name
                }, _this.options.modifiers[name]);
            })
                .sort(function (a, b) {
                return a.order - b.order;
            });
            // modifiers have the ability to execute arbitrary code when Popper.js get inited
            // such code is executed in the same order of its modifier
            // they could add new properties to their options configuration
            // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
            this.modifiers.forEach(function (modifierOptions) {
                if (modifierOptions.enabled && utils_1.isFunction(modifierOptions.onLoad)) {
                    modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
                }
            });
            // fire the first update to position the popper in the right place
            this.update();
            var eventsEnabled = this.options.eventsEnabled;
            if (eventsEnabled) {
                // setup event listeners, they will take care of update the position in specific situations
                this.enableEventListeners();
            }
            this.state.eventsEnabled = eventsEnabled;
        }
        // We can't use class properties because they don't get listed in the
        // class prototype and break stuff like Sinon stubs
        createClass(Popper, [{
                key: 'update',
                value: function update$$1() {
                    return update.call(this);
                }
            }, {
                key: 'destroy',
                value: function destroy$$1() {
                    return destroy.call(this);
                }
            }, {
                key: 'enableEventListeners',
                value: function enableEventListeners$$1() {
                    return enableEventListeners.call(this);
                }
            }, {
                key: 'disableEventListeners',
                value: function disableEventListeners$$1() {
                    return disableEventListeners.call(this);
                }
                /**
                 * Schedule an update, it will run on the next UI update available
                 * @method scheduleUpdate
                 * @memberof Popper
                 */
                /**
                 * Collection of utilities useful when writing custom modifiers.
                 * Starting from version 1.7, this method is available only if you
                 * include `popper-utils.js` before `popper.js`.
                 *
                 * **DEPRECATION**: This way to access PopperUtils is deprecated
                 * and will be removed in v2! Use the PopperUtils module directly instead.
                 * Due to the high instability of the methods contained in Utils, we can't
                 * guarantee them to follow semver. Use them at your own risk!
                 * @static
                 * @private
                 * @type {Object}
                 * @deprecated since version 1.8
                 * @member Utils
                 * @memberof Popper
                 */
            }], null);
        return Popper;
    }();
    /**
     * The `referenceObject` is an object that provides an interface compatible with Popper.js
     * and lets you use it as replacement of a real DOM node.<br />
     * You can use this method to position a popper relatively to a set of coordinates
     * in case you don't have a DOM node to use as reference.
     *
     * ```
     * new Popper(referenceObject, popperNode);
     * ```
     *
     * NB: This feature isn't supported in Internet Explorer 10
     * @name referenceObject
     * @property {Function} data.getBoundingClientRect
     * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
     * @property {number} data.clientWidth
     * An ES6 getter that will return the width of the virtual reference element.
     * @property {number} data.clientHeight
     * An ES6 getter that will return the height of the virtual reference element.
     */
    Popper.Utils = (typeof window !== 'undefined' ? window : window).PopperUtils;
    Popper.placements = placements;
    Popper.Defaults = Defaults;
    exports.default = Popper;
});
//# sourceMappingURL=popper.js.map
///<amd-module name="sabre-ngv-UIComponents-utils/popper/Popper" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/popper/Popper", ["require", "exports", "react", "react", "prop-types", "sabre-ngv-UIComponents-utils/popper/Popperjs"], function (require, exports, React, react_3, PropTypes, Popperjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var noop = function () { return null; };
    var Popper = (function (_super) {
        __extends(Popper, _super);
        function Popper() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {};
            _this._setArrowNode = function (node) {
                _this._arrowNode = node;
            };
            _this._getTargetNode = function () {
                return _this.context.popperManager && _this.context.popperManager.getTargetNode()
                    || _this.props.getTargetNode();
            };
            _this._getOffsets = function (data) {
                return Object.keys(data.offsets).map(function (key) { return data.offsets[key]; });
            };
            _this._isDataDirty = function (data) {
                if (_this.state.data) {
                    return (JSON.stringify(_this._getOffsets(_this.state.data)) !==
                        JSON.stringify(_this._getOffsets(data)));
                }
                else {
                    return true;
                }
            };
            _this._updateStateModifier = {
                enabled: true,
                order: 900,
                fn: function (data) {
                    if (_this._isDataDirty(data)) {
                        _this.setState({ data: data });
                    }
                    return data;
                },
            };
            _this._getPopperStyle = function () {
                var data = _this.state.data;
                // If Popper isn't instantiated, hide the popperElement
                // to avoid flash of unstyled content
                if (!_this._popper || !data) {
                    return {
                        position: 'absolute',
                        pointerEvents: 'none',
                        opacity: 0,
                    };
                }
                var _a = data.offsets.popper, top = _a.top, left = _a.left, position = _a.position;
                var otherStyles = _this._extractStylesFromState(data.styles, data.placement);
                return __assign({ position: position }, otherStyles);
            };
            _this._getPopperPlacement = function () {
                return !!_this.state.data ? _this.state.data.placement : undefined;
            };
            _this._getPopperHide = function () {
                return !!_this.state.data && _this.state.data.hide ? '' : undefined;
            };
            _this._getArrowStyle = function () {
                if (!_this.state.data || !_this.state.data.offsets.arrow) {
                    return {};
                }
                else {
                    var _a = _this.state.data.offsets.arrow, top_1 = _a.top, left = _a.left;
                    return { top: top_1, left: left };
                }
            };
            return _this;
        }
        Popper.prototype._extractStylesFromState = function (styles, placement) {
            return this.props.forcePreciseAlign ?
                this._hackRecalculatePositioningStyle(styles, placement) :
                styles;
        };
        ;
        Popper.prototype._hackRecalculatePositioningStyle = function (styles, placement) {
            if (this._isTransformUsed(styles) && this._arePopperOffsetsAvailable()) {
                var offsets = this.state.data.offsets.popper;
                styles['transform'] = 'translate3d(' + Math.round(offsets.left) + 'px, ' + Math.round(this._getPositionedTopOffset(offsets.top, placement)) + 'px, 0)';
            }
            return styles;
        };
        ;
        /* The purpose of this method is to move dropdown(popper) to
         correct position when it is open on top of field (normally it is obstructing the field).
         The "magic value" fieldOffset is the size of the field, which in case of our application
         stays the same. This is hack solution that needs to be addressed in new implementation
         of dropdowns */
        Popper.prototype._getPositionedTopOffset = function (offset, placement) {
            var fieldOffset = this.props.fieldOffset;
            return placement === "top-start" && fieldOffset ? offset - fieldOffset : offset;
        };
        Popper.prototype._isTransformUsed = function (styles) {
            return styles['left'] === 0
                && styles['top'] === 0
                && styles['position'] === 'fixed'
                && styles['willChange'] === 'transform';
        };
        ;
        Popper.prototype._arePopperOffsetsAvailable = function () {
            return this.state.data
                && this.state.data.offsets
                && this.state.data.offsets.popper
                && this.state.data.offsets.popper.top >= 0
                && this.state.data.offsets.popper.left >= 0;
        };
        ;
        Popper.prototype.getChildContext = function () {
            return {
                popper: {
                    setArrowNode: this._setArrowNode,
                    getArrowStyle: this._getArrowStyle,
                },
            };
        };
        Popper.prototype.componentDidMount = function () {
            this._updatePopper();
        };
        Popper.prototype.componentDidUpdate = function (lastProps) {
            if (lastProps.placement !== this.props.placement ||
                lastProps.eventsEnabled !== this.props.eventsEnabled) {
                this._updatePopper();
            }
            if (this._popper && lastProps.children !== this.props.children) {
                this._popper.scheduleUpdate();
            }
        };
        Popper.prototype.componentWillUnmount = function () {
            this._destroyPopper();
        };
        Popper.prototype._updatePopper = function () {
            this._destroyPopper();
            if (this._node) {
                this._createPopper();
            }
        };
        Popper.prototype._createPopper = function () {
            var _a = this.props, placement = _a.placement, eventsEnabled = _a.eventsEnabled;
            var modifiers = __assign({}, this.props.modifiers, { applyStyle: __assign({}, this.props.modifiers.applyStyle, { enabled: false }), updateState: this._updateStateModifier });
            if (this._arrowNode) {
                modifiers.arrow = {
                    element: this._arrowNode,
                };
            }
            this._popper = new Popperjs_1.default(this._getTargetNode(), this._node, {
                placement: placement,
                eventsEnabled: eventsEnabled,
                modifiers: modifiers
            });
            // schedule an update to make sure everything gets positioned correct
            // after being instantiated
            this._popper.scheduleUpdate();
        };
        Popper.prototype._destroyPopper = function () {
            if (this._popper) {
                this._popper.destroy();
            }
        };
        Popper.prototype.render = function () {
            var _this = this;
            var _a = this.props, component = _a.component, innerRef = _a.innerRef, placement = _a.placement, eventsEnabled = _a.eventsEnabled, modifiers = _a.modifiers, children = _a.children, forcePreciseAlign = _a.forcePreciseAlign, fieldOffset = _a.fieldOffset, restProps = __rest(_a, ["component", "innerRef", "placement", "eventsEnabled", "modifiers", "children", "forcePreciseAlign", "fieldOffset"]);
            var popperRef = function (node) {
                _this._node = node;
                if (typeof innerRef === 'function') {
                    innerRef(node);
                }
            };
            var popperStyle = this._getPopperStyle();
            var popperPlacement = this._getPopperPlacement();
            var popperHide = this._getPopperHide();
            if (typeof children === 'function') {
                var popperProps = (_b = {
                        ref: popperRef,
                        style: popperStyle
                    },
                    _b['data-placement'] = popperPlacement,
                    _b['data-x-out-of-boundaries'] = popperHide,
                    _b);
                return children({
                    popperProps: popperProps,
                    restProps: restProps,
                    scheduleUpdate: this._popper && this._popper.scheduleUpdate,
                });
            }
            var componentProps = __assign({}, restProps, { style: __assign({}, restProps.style, popperStyle), 'data-placement': popperPlacement, 'data-x-out-of-boundaries': popperHide });
            if (typeof component === 'string') {
                componentProps.ref = popperRef;
            }
            else {
                componentProps.innerRef = popperRef;
            }
            return react_3.createElement(component, componentProps, children);
            var _b;
        };
        return Popper;
    }(React.Component));
    Popper.contextTypes = {
        popperManager: PropTypes.object.isRequired,
    };
    Popper.childContextTypes = {
        popper: PropTypes.object.isRequired,
    };
    Popper.propTypes = {
        component: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
        innerRef: PropTypes.func,
        placement: PropTypes.oneOf(Popperjs_1.default.placements),
        eventsEnabled: PropTypes.bool,
        modifiers: PropTypes.object,
        children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
        forcePreciseAlign: PropTypes.bool
    };
    Popper.defaultProps = {
        component: 'div',
        placement: 'bottom',
        eventsEnabled: true,
        modifiers: {},
    };
    exports.default = Popper;
});
///<amd-module name="sabre-ngv-UIComponents-utils/reactNativeListener/ReactNativeListener" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/reactNativeListener/ReactNativeListener", ["require", "exports", "react", "prop-types", "react-dom"], function (require, exports, React, PropTypes, ReactDOM) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var events = [
        'KeyDown',
        'KeyPress',
        'KeyUp',
        'Click',
        'ContextMenu',
        'DoubleClick',
        'Drag',
        'DragEnd',
        'DragEnter',
        'DragExit',
        'DragLeave',
        'DragOver',
        'DragStart',
        'Drop',
        'Focus',
        'MouseDown',
        'MouseEnter',
        'MouseLeave',
        'MouseMove',
        'MouseOut',
        'MouseOver',
        'MouseUp'
    ];
    var aliases = {
        DoubleClick: 'dblclick'
    };
    var toEventName = function (event) {
        return (aliases[event] || event).toLowerCase();
    };
    var ReactNativeListener = (function (_super) {
        __extends(ReactNativeListener, _super);
        function ReactNativeListener() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReactNativeListener.prototype.componentDidMount = function () {
            var props = this.props;
            var element = ReactDOM.findDOMNode(this);
            if (element) {
                events.forEach(function (event) {
                    var capture = props['on' + event + 'Capture'];
                    var bubble = props['on' + event];
                    var stop = props['stop' + event];
                    if (capture && typeof capture === 'function') {
                        element.addEventListener(toEventName(event), capture, true);
                    }
                    if (bubble && typeof bubble === 'function') {
                        element.addEventListener(toEventName(event), bubble, false);
                    }
                    if (stop === true) {
                        element.addEventListener(toEventName(event), function (nativeEvent) { return nativeEvent.stopPropagation(); }, false);
                    }
                });
            }
        };
        ReactNativeListener.prototype.render = function () {
            return this.props.children;
        };
        return ReactNativeListener;
    }(React.Component));
    ReactNativeListener.displayName = 'NativeListener';
    ReactNativeListener.propTypes = __assign({ children: function (props, propName) {
            if (props[propName].length) {
                return new Error('NativeListener can only wrap one element');
            }
        } }, events.reduce(function (accumulator, event) {
        return (__assign({}, accumulator, (_a = {}, _a["on" + event] = PropTypes.func, _a["on" + event + "Capture"] = PropTypes.func, _a["stop" + event] = PropTypes.bool, _a)));
        var _a;
    }, {}));
    exports.default = ReactNativeListener;
});
define("sabre-ngv-UIComponents-utils/popper/Target", ["require", "exports", "react", "prop-types"], function (require, exports, react_4, PropTypes) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Target = function (props, context) {
        var _a = props.component, component = _a === void 0 ? 'div' : _a, innerRef = props.innerRef, children = props.children, restProps = __rest(props, ["component", "innerRef", "children"]);
        var popperManager = context.popperManager;
        var targetRef = function (node) {
            popperManager.setTargetNode(node);
            if (typeof innerRef === 'function') {
                innerRef(node);
            }
        };
        if (typeof children === 'function') {
            var targetProps = { ref: targetRef };
            return children({ targetProps: targetProps, restProps: restProps });
        }
        var componentProps = __assign({}, restProps);
        if (typeof component === 'string') {
            componentProps.ref = targetRef;
        }
        else {
            componentProps.innerRef = targetRef;
        }
        return react_4.createElement(component, componentProps, children);
    };
    Target.contextTypes = {
        popperManager: PropTypes.object.isRequired,
    };
    Target.propTypes = {
        component: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
        innerRef: PropTypes.func,
        children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    };
    exports.default = Target;
});
///<amd-module name="sabre-ngv-UIComponents-utils/classMerge/classMerge" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/classMerge/classMerge", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Create className string built from different kinds of sources
     *
     * @param {Mergable} args
     * @returns {string}
     */
    function classMerge() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return args
            .reduce(addClass, [])
            .join(' ');
    }
    exports.classMerge = classMerge;
    function addClass(acc, classDesc) {
        if (!classDesc) {
            return acc;
        }
        if (classDesc instanceof Array) {
            acc.push(classMerge.apply(null, classDesc));
            return acc;
        }
        if (typeof classDesc === 'string' || typeof classDesc === 'number') {
            acc.push(classDesc.toString());
            return acc;
        }
        if (typeof classDesc === 'object') {
            Object.keys(classDesc)
                .filter(function (key) { return !!classDesc[key]; })
                .forEach(function (key) { return acc.push(key); });
            return acc;
        }
        return acc;
    }
});
///<amd-module name="sabre-ngv-UIComponents-utils/popper/Arrow" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/popper/Arrow", ["require", "exports", "react", "prop-types"], function (require, exports, react_5, PropTypes) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Arrow = function (props, context) {
        var _a = props.component, component = _a === void 0 ? 'span' : _a, innerRef = props.innerRef, children = props.children, restProps = __rest(props, ["component", "innerRef", "children"]);
        var popper = context.popper;
        var arrowRef = function (node) {
            popper.setArrowNode(node);
            if (typeof innerRef === 'function') {
                innerRef(node);
            }
        };
        var arrowStyle = popper && popper.getArrowStyle() || props.arrowStyles;
        if (typeof children === 'function') {
            var arrowProps = {
                ref: arrowRef,
                style: arrowStyle,
            };
            return children({ arrowProps: arrowProps, restProps: restProps });
        }
        var componentProps = __assign({}, restProps, { style: __assign({}, arrowStyle, restProps.style) });
        if (typeof component === 'string') {
            componentProps.ref = arrowRef;
        }
        else {
            componentProps.innerRef = arrowRef;
        }
        return react_5.createElement(component, componentProps, children);
    };
    Arrow.contextTypes = {
        popper: PropTypes.object.isRequired,
    };
    Arrow.propTypes = {
        component: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
        innerRef: PropTypes.func,
        children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    };
    exports.default = Arrow;
});
///<amd-module name="sabre-ngv-UIComponents-utils/popper/popper_component" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/popper/popper_component", ["require", "exports", "react", "prop-types", "sabre-ngv-UIComponents-utils/popper/Popper", "sabre-ngv-UIComponents-utils/popper/Manager", "sabre-ngv-UIComponents-utils/popper/Target", "sabre-ngv-UIComponents-utils/classMerge/classMerge", "sabre-ngv-UIComponents-utils/popper/Arrow"], function (require, exports, React, PropTypes, Popper_1, Manager_1, Target_1, classMerge_1, Arrow_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.popperPlacementPositions = [
        'auto',
        'auto-left',
        'auto-right',
        'bottom',
        'bottom-end',
        'bottom-start',
        'left',
        'left-end',
        'left-start',
        'right',
        'right-end',
        'right-start',
        'top',
        'top-end',
        'top-start'
    ];
    var PopperComponent = (function (_super) {
        __extends(PopperComponent, _super);
        function PopperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PopperComponent, "defaultProps", {
            get: function () {
                return {
                    hidePopper: true,
                    popperModifiers: {
                        preventOverflow: {
                            enabled: true,
                            escapeWithReference: true,
                            boundariesElement: 'viewport'
                        }
                    },
                    popperPlacement: 'bottom-start'
                };
            },
            enumerable: true,
            configurable: true
        });
        PopperComponent.prototype.render = function () {
            var _a = this.props, className = _a.className, hidePopper = _a.hidePopper, popperComponent = _a.popperComponent, popperModifiers = _a.popperModifiers, popperPlacement = _a.popperPlacement, targetComponent = _a.targetComponent, children = _a.children, hasArrow = _a.hasArrow, arrowStyles = _a.arrowStyles;
            var popper;
            if (!hidePopper) {
                var classes = classMerge_1.classMerge('react-popper', className);
                popper = (React.createElement(Popper_1.default, { className: classes, modifiers: popperModifiers, placement: popperPlacement },
                    hasArrow && React.createElement(Arrow_1.default, { className: "popper_arrow" }),
                    popperComponent || children));
            }
            if (this.props.popperContainer) {
                popper = React.createElement(this.props.popperContainer, popper);
            }
            return (React.createElement(Manager_1.default, null,
                React.createElement(Target_1.default, { className: "react-popper-wrapper" }, targetComponent),
                popper));
        };
        return PopperComponent;
    }(React.Component));
    PopperComponent.propTypes = {
        className: PropTypes.string,
        hidePopper: PropTypes.bool,
        popperComponent: PropTypes.element,
        popperModifiers: PropTypes.object,
        popperPlacement: PropTypes.oneOf(exports.popperPlacementPositions),
        popperContainer: PropTypes.func,
        targetComponent: PropTypes.element
    };
    exports.default = PopperComponent;
});
///<amd-module name="sabre-ngv-UIComponents-utils/promiseTimeout/promiseTimeout" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/promiseTimeout/promiseTimeout", ["require", "exports"], function (require, exports) {
    "use strict";
    var _this = this;
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Rejects a promise with a {@link TimeoutError} if it does not settle within
     * the specified timeout.
     *
     * @param {Promise} promise The promise.
     * @param {number} timeoutMillis Number of milliseconds to wait on settling.
     * @returns {Promise} Either resolves/rejects with `promise`, or rejects with
     *                   `TimeoutError`, whichever settles first.
     */
    exports.timeout = function (promise, timeoutMillis) {
        var error = new exports.TimeoutError(), timeout;
        return Promise.race([
            promise,
            new Promise(function (resolve, reject) {
                timeout = setTimeout(function () {
                    reject(error);
                }, timeoutMillis);
            }),
        ]).then(function (v) {
            clearTimeout(timeout);
            return v;
        }, function (err) {
            clearTimeout(timeout);
            throw err;
        });
    };
    /**
     * Exception indicating that the timeout expired.
     */
    exports.TimeoutError = function () {
        Error.call(_this);
        _this.stack = Error().stack;
        _this.message = 'Timeout';
    };
    exports.TimeoutError.prototype = Object.create(Error.prototype);
    exports.TimeoutError.prototype.name = 'TimeoutError';
});
///<amd-module name="sabre-ngv-UIComponents-utils/popper/PopperTooltip" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/popper/PopperTooltip", ["require", "exports", "sabre-ngv-UIComponents-utils/popper/Popperjs", "react", "react", "sabre-ngv-UIComponents-utils/classMerge/classMerge"], function (require, exports, Popperjs_2, React, react_6, classMerge_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @deprecated use WithTooltip instead
     */
    var PopperTooltip = (function (_super) {
        __extends(PopperTooltip, _super);
        function PopperTooltip(props) {
            var _this = _super.call(this, props) || this;
            _this.popperOptions = _this.popperOptions.bind(_this);
            _this.parentRef = _this.parentRef.bind(_this);
            _this.hideTooltip = _this.hideTooltip.bind(_this);
            _this.showTooltip = _this.showTooltip.bind(_this);
            return _this;
        }
        PopperTooltip.prototype.popperOptions = function () {
            return {
                placement: this.props.placement || 'top',
                preventOverflow: {
                    boundariesElement: 'window'
                }
            };
        };
        PopperTooltip.prototype.createTooltipNode = function (content) {
            var tooltip = window.document.createElement('div');
            tooltip.className = 'popper-tooltip';
            tooltip.innerHTML = '<div x-arrow class="popper-tooltip-arrow"></div><div class="popper-tooltip-inner">' + content + '</div>';
            return tooltip;
        };
        PopperTooltip.prototype.parentRef = function (ref) {
            var el = ref;
            this.target = ref;
            while (el instanceof SVGElement) {
                el = el.parentNode;
            }
            this.parent = el;
        };
        PopperTooltip.prototype.showTooltip = function () {
            var _this = this;
            if (!this.props.content || this.props.disabled) {
                return;
            }
            this.tooltip = this.createTooltipNode(this.props.content);
            this.parent.classList.add('popper-tooltip-parent');
            this.target.classList.add('popper-tooltip-target');
            this.parent.appendChild(this.tooltip);
            this.popper = new Popperjs_2.default(this.target, this.tooltip, this.popperOptions());
            setTimeout(function () { return _this.popper && _this.popper.scheduleUpdate(); });
        };
        PopperTooltip.prototype.hideTooltip = function () {
            if (!this.tooltip) {
                return;
            }
            this.parent.classList.remove('popper-tooltip-parent');
            this.target.classList.remove('popper-tooltip-target');
            this.parent.removeChild(this.tooltip);
            this.tooltip = null;
            this.popper.destroy();
            this.popper = null;
        };
        PopperTooltip.prototype.render = function () {
            if (React.Children.count(this.props.children) > 1) {
                throw new Error('PopperTooltip can contain only one child element');
            }
            var child = React.Children.only(this.props.children);
            return react_6.cloneElement(child, {
                onMouseEnter: this.showTooltip,
                onMouseLeave: this.hideTooltip,
                className: classMerge_2.classMerge(child.props.className, 'popper-tooltip-target'),
                'data-tooltip': this.props.content,
                ref: this.parentRef
            });
        };
        return PopperTooltip;
    }(React.PureComponent));
    exports.PopperTooltip = PopperTooltip;
});
define("sabre-ngv-UIComponents-utils/errorHandling/errorHandling", ["require", "exports", "underscore", "sabre-ngv-UIComponents-utils/classMerge/classMerge"], function (require, exports, underscore_1, classMerge_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeClassWithErrorHandling = function (hasError) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var errorClass = hasError ? 'has-error' : '';
        return classMerge_3.classMerge.apply(void 0, args.concat([errorClass]));
    };
    exports.hasError = function (meta) {
        return meta
            && meta.touched
            && !underscore_1.isEmpty(meta.error);
    };
});
define("sabre-ngv-UIComponents-utils/Main", ["require", "exports", "sabre-ngv-core/modules/Module", "sabre-ngv-UIComponents-utils/popper/Manager", "sabre-ngv-UIComponents-utils/onClickOutside/onClickOutside", "sabre-ngv-UIComponents-utils/popper/Popper", "sabre-ngv-UIComponents-utils/reactNativeListener/ReactNativeListener", "sabre-ngv-UIComponents-utils/popper/Target", "sabre-ngv-UIComponents-utils/popper/popper_component", "sabre-ngv-UIComponents-utils/classMerge/classMerge", "sabre-ngv-UIComponents-utils/promiseTimeout/promiseTimeout", "sabre-ngv-UIComponents-utils/popper/PopperTooltip", "sabre-ngv-UIComponents-utils/errorHandling/errorHandling"], function (require, exports, Module_1, Manager_2, onClickOutside_1, Popper_2, ReactNativeListener_1, Target_2, popper_component_1, classMerge_4, promiseTimeout_1, PopperTooltip_1, errorHandling_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Main = (function (_super) {
        __extends(Main, _super);
        function Main() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Main.prototype.getExposedClasses = function () {
            return {
                PopperTooltip: PopperTooltip_1.PopperTooltip,
                mergeClassWithErrorHandling: errorHandling_1.mergeClassWithErrorHandling,
                hasError: errorHandling_1.hasError,
                Manager: Manager_2.default,
                onClickOutside: onClickOutside_1.default,
                Popper: Popper_2.default,
                PopperComponent: popper_component_1.default,
                ReactNativeListener: ReactNativeListener_1.default,
                Target: Target_2.default,
                classMerge: classMerge_4.classMerge,
                timeout: promiseTimeout_1.timeout
            };
        };
        return Main;
    }(Module_1.Module));
    exports.Main = Main;
});
///<amd-module name="sabre-ngv-UIComponents-utils" />
define("sabre-ngv-UIComponents-utils", ["require", "exports", "sabre-ngv-UIComponents-utils/Main", "sabre-ngv-UIComponents-utils/Context"], function (require, exports, Main_1, Context_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Module_sabre_ngv_UIComponents_utils = (function (_super) {
        __extends(Module_sabre_ngv_UIComponents_utils, _super);
        function Module_sabre_ngv_UIComponents_utils(manifest) {
            var _this = _super.call(this, manifest) || this;
            Context_1.context.setModule(_this);
            return _this;
        }
        return Module_sabre_ngv_UIComponents_utils;
    }(Main_1.Main));
    exports.default = Module_sabre_ngv_UIComponents_utils;
});
///<amd-module name="sabre-ngv-UIComponents-utils/Slot/SlotProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/Slot/SlotProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents-utils/dateTime/dateTime" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/dateTime/dateTime", ["require", "exports", "underscore.string", "underscore"], function (require, exports, underscore_string_1, underscore_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getMonths() {
        return underscore_2.range(1, 13).reduce(function (monthArray, currentMonth) { return (monthArray.concat([underscore_string_1.pad(currentMonth.toString(), 2, '0')])); }, []);
    }
    exports.getMonths = getMonths;
    function getYears() {
        var currentYear = (new Date()).getFullYear();
        return underscore_2.range(20).reduce(function (yearArray, offset) {
            return yearArray.concat([(currentYear + offset).toString().substr(2, 2)]);
        }, []);
    }
    exports.getYears = getYears;
});
///<amd-module name="sabre-ngv-UIComponents-utils/decode/encodeDecodeProxy" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents-utils/decode/encodeDecodeProxy", ["require", "exports", "sabre-ngv-UIComponents-utils/Context", "sabre-ngv-app/app/services/impl/EncodeDecodeService"], function (require, exports, Context_2, EncodeDecodeService_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EncodeDecodeDomains;
    (function (EncodeDecodeDomains) {
        EncodeDecodeDomains[EncodeDecodeDomains["ONLY_AIRPORT"] = 0] = "ONLY_AIRPORT";
        EncodeDecodeDomains[EncodeDecodeDomains["CITY_WITH_MULTIPLE_STATIONS"] = 1] = "CITY_WITH_MULTIPLE_STATIONS";
        EncodeDecodeDomains[EncodeDecodeDomains["CITIES_AND_AIRPORTS"] = 2] = "CITIES_AND_AIRPORTS";
        EncodeDecodeDomains[EncodeDecodeDomains["AIRPORT"] = 3] = "AIRPORT";
        EncodeDecodeDomains[EncodeDecodeDomains["AIRLINE"] = 4] = "AIRLINE";
        EncodeDecodeDomains[EncodeDecodeDomains["hotel_vendors"] = 5] = "hotel_vendors";
        EncodeDecodeDomains[EncodeDecodeDomains["country_codes"] = 6] = "country_codes";
        EncodeDecodeDomains[EncodeDecodeDomains["car_vendors"] = 7] = "car_vendors";
        EncodeDecodeDomains[EncodeDecodeDomains["equp_codes"] = 8] = "equp_codes";
        EncodeDecodeDomains[EncodeDecodeDomains["CABIN_CODE"] = 9] = "CABIN_CODE";
    })(EncodeDecodeDomains = exports.EncodeDecodeDomains || (exports.EncodeDecodeDomains = {}));
    var EncodeDecodeProxy = (function () {
        function EncodeDecodeProxy() {
        }
        EncodeDecodeProxy.decodeMany = function (domain, codes) {
            codes = codes.map(function (code) { return code.toUpperCase(); });
            return new Promise(function (resolve) {
                return Context_2.getService(EncodeDecodeService_1.EncodeDecodeService).encodeDecodeMany(EncodeDecodeDomains[domain], codes, function (results) { return resolve(results); });
            });
        };
        EncodeDecodeProxy.decode = function (domain, code) {
            var value = code.replace(' ', '').toUpperCase();
            return new Promise(function (resolve) {
                Context_2.getService(EncodeDecodeService_1.EncodeDecodeService)
                    .decode(EncodeDecodeDomains[domain], value, function () {
                })
                    .then(function (model, result) {
                    resolve(result);
                }, function () {
                    resolve(undefined);
                });
            });
        };
        EncodeDecodeProxy.encodeDecodeMany = function (domain, code) {
            return new Promise(function (resolve) {
                return Context_2.getService(EncodeDecodeService_1.EncodeDecodeService).encodeDecodeMany(EncodeDecodeDomains[domain], code.toUpperCase(), function (results) { return resolve(results); });
            });
        };
        EncodeDecodeProxy.encodeDecodeCitiesAndAirports = function (domain, code, citiesResultsLimit, airportsResultsLimit) {
            return new Promise(function (resolve) {
                return Context_2.getService(EncodeDecodeService_1.EncodeDecodeService)
                    .encodeDecodeCitiesAndAirports({
                    domain: EncodeDecodeDomains[domain],
                    key: code.toUpperCase(),
                    citiesResultsLimit: citiesResultsLimit,
                    airportsResultsLimit: airportsResultsLimit
                }, function (results) {
                    return resolve(results);
                });
            });
        };
        return EncodeDecodeProxy;
    }());
    exports.EncodeDecodeProxy = EncodeDecodeProxy;
});
define("sabre-ngv-UIComponents-utils/Slot/Slot", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function Slot(_a) {
        var children = _a.children, slot = _a.slot;
        var reactChildren = React.Children.toArray(children);
        var slotElement;
        slotElement = reactChildren.find(function (child) {
            return React.isValidElement(child) && child.props['data-slot'] === slot;
        });
        if (slotElement) {
            return React.cloneElement(slotElement);
        }
        else {
            return null;
        }
    }
    exports.Slot = Slot;
});

//# sourceMappingURL=module.js.map
