/// <reference types="react" />
/// <reference types="jquery" />
/// <reference types="bootstrap" />
declare module "sabre-ngv-UIComponents/advancedDropdown/interfaces/Option" {
    export interface Option {
        label: string;
        value: string;
        disables?: string[];
        checked?: boolean;
        disabled?: boolean;
        hover?: boolean;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/interfaces/OptionRendererOptions" {
    import { FormEvent, CSSProperties } from 'react';
    import { Option } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/Option";
    export interface OptionRendererOptions {
        isFocused: boolean;
        option: Option;
        optionStyle: CSSProperties;
        handleChange: (options: [Option]) => FormEvent<HTMLInputElement>;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/interfaces/AdvancedDropdownProps" {
    import { OptionRendererOptions } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/OptionRendererOptions";
    import { Option } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/Option";
    export interface AdvancedDropdownProps {
        /**
         * Text label displayed above dropdown
         */
        label?: string;
        /**
         * Controls if component can handle multiple or one option
         */
        isMulti: boolean;
        /**
         * Disables not checked options
         */
        disableNotCheckedOptions?: boolean;
        /**
         * Decides if component will let search through its option content
         */
        isSearchable: boolean;
        /**
         * Minimum ammount of characters required for search mechanism to trigger
         */
        minCharactersForSearch: number;
        /**
         * Function responsible for displaying options in dropdown
         */
        optionRenderer?: (options: OptionRendererOptions) => JSX.Element;
        /**
         * Function sorting provided options
         */
        sortBy?: (a: Option, b: Option) => number;
        /**
         * Function invoked when option gets changed
         */
        onChange?: (options: Option[]) => void;
        /**
         * Options populating dropdown
         */
        options: Option[];
        /**
         * Decides if chosen option closes dropdown
         */
        closeOnChange?: boolean;
        /**
         * Sets left icon image
         * @default null
         */
        leftIcon?: string | null;
        /**
         * Sets right icon image
         * @default null
         */
        rightIcon?: string | null;
        /**
         * Sets right icon image when dropdown opened
         */
        rightIconOpen?: string | null;
        /**
         * Disables abilty to unmark checked option
         * @default null
         */
        mandatory?: boolean;
        /**
         * Switches between simple raw styled dropdown and advanced styled
         */
        simpleStyle?: boolean;
        /**
         * Function responsible for deciding what to display in field
         */
        displayFormatter?: (options: Option[]) => string;
        /**
         * Sets placeholder
         */
        placeholder?: string;
        /**
         * Sets fixed position instead of absolute
         * if dropdown has not place to be fit in
         * or if simple style disabled
         * or if dropdown droup is set to false
         */
        fixedPosition?: boolean;
        /**
         * Drops up or down
         */
        dropup?: boolean;
        /**
         * Hides search icon
         */
        hideSearchIcon?: boolean;
        /**
         * Hides search placeholder
         */
        hideSearchPlaceholder?: boolean;
        /**
         * Number set decides which option index triggers marking of all other options
         */
        checkAllOptionIndex?: number;
        /**
         * Disables component
         */
        disabled?: boolean;
        /**
         * Decides if choosen options will be changed immediately after selection
         */
        changeOnSelect?: boolean;
        /**
         * Sets focus on main input
         */
        isFocusOnMainInput?: boolean;
        /**
         * Sets focus on first option in dropdown
         */
        isFocusOnFirstOption?: boolean;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/interfaces/AdvancedDropdownState" {
    import { Option } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/Option";
    export interface AdvancedDropdownState {
        isOpen?: boolean;
        isFocused?: boolean;
        options?: Option[];
        searchInputText?: string;
        focusIndex?: number;
        displayedValue?: string;
        hoverIndex?: number;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/interfaces/VisibilityState" {
    /** Stores the visibility state of options in AdvancedDropdown */
    export interface VisibilityState {
        isOpen: boolean;
        isSearchInputFocused: boolean;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/styles/styles" {
    import { CSSProperties } from 'react';
    const styles: {
        [key: string]: CSSProperties;
    };
    export { styles };
}
declare module "sabre-ngv-UIComponents/advancedDropdown/utils/keyCodes" {
    export const keyCodes: {
        KEY_DOWN: number;
        KEY_UP: number;
        SPACE: number;
        TAB: number;
        ESC: number;
        ENTER: number;
    };
}
declare module "sabre-ngv-UIComponents/baseComponent/interfaces/State" {
    export interface State {
        [key: string]: any;
    }
}
declare module "sabre-ngv-UIComponents/baseComponent/components/storeUtils" {
    import { Middleware, Reducer, Store } from 'redux';
    import { State } from "sabre-ngv-UIComponents/baseComponent/interfaces/State";
    /**
     * Initialize component store with the initial state (set in root reducer)
     */
    export const initializeStore: (storeName: string, rootReducer: Reducer<State>, middlewares?: Middleware[]) => Store<State>;
}
declare module "sabre-ngv-UIComponents/baseComponent/interfaces/ComponentProps" {
    export interface ComponentProps {
        componentName?: string;
        formName?: string;
        form?: string;
    }
}
declare module "sabre-ngv-UIComponents/baseComponent/interfaces/ComponentOptions" {
    import * as React from 'react';
    import { ComponentProps } from "sabre-ngv-UIComponents/baseComponent/interfaces/ComponentProps";
    export interface ComponentOptions {
        componentName: string;
        rootReactComponent?: React.ComponentClass<ComponentProps>;
        componentWrapperType?: string;
    }
}
declare module "sabre-ngv-UIComponents/baseComponent/interfaces/Mountable" {
    import { AbstractView } from "sabre-ngv-app/app/AbstractView";
    import { ComponentType } from "react";
    export interface Mountable<P> {
        getAsWidget(): AbstractView;
        getAsComponent(): ComponentType<P>;
    }
}
declare module "sabre-ngv-UIComponents/baseComponent/components/StatelessComponent" {
    import * as React from 'react';
    import { AbstractView } from 'sabre-ngv-app/app/AbstractView';
    import { ComponentProps } from "sabre-ngv-UIComponents/baseComponent/interfaces/ComponentProps";
    import { ComponentOptions } from "sabre-ngv-UIComponents/baseComponent/interfaces/ComponentOptions";
    import { Mountable } from "sabre-ngv-UIComponents/baseComponent/interfaces/Mountable";
    /**
     * Base class for stateless module-level components ready to be used in application context.
     * Implements 'Mountable' methods for use in Backbone context.
     *
     * Used as a base class for Stateful*Component classes
     */
    export default class StatelessComponent implements Mountable<ComponentProps> {
        protected options: ComponentOptions;
        protected readonly DEFAULT_WRAPPER_TYPE: string;
        private bridgedComponent;
        protected domWrapperElement: HTMLElement;
        protected rootReactComponent: React.ComponentClass<ComponentProps>;
        constructor(options: ComponentOptions);
        private createDomWrapper();
        protected getRootReactComponent(): React.ComponentClass<ComponentProps>;
        /**
         * Build recursive view starting with the root element.
         */
        mount(): void;
        /**
         * Unmount component from wrapper:
         * needed sometimes when the wrapper is manipulated from outside
         * (jQuery#remove, popover cleanup etc.)
         */
        unmount(): void;
        /**
         * Returns the component fully initialized, with store set up and wired
         * (if in Stateful* child class).
         * The component is wrapped in the bridge so it can be used by AbstractView parent
         * as a regular Backbone widget.
         *
         * @returns {AbstractView}
         */
        getAsWidget(): AbstractView;
        /**
         * Returns the React Root component, without Redux binding.
         * Use when you want to plug this component in your React structure
         * with Redux already plug in somewhere up.
         *
         * @returns {React.ComponentClass<ComponentProps>}
         */
        getAsComponent(): React.ComponentClass<ComponentProps>;
        /**
         * Return reference to the wrapper element.
         * Will be used by a parent to mount the component in its DOM node.
         *
         * @returns {HTMLElement}
         */
        getDomElement(): HTMLElement;
        /**
         * Clean up your stuff before leaving
         */
        dispose(): void;
    }
}
declare module "sabre-ngv-UIComponents/baseComponent/interfaces/StatefulComponentOptions" {
    import { Middleware, Reducer } from 'redux';
    import { ComponentOptions } from "sabre-ngv-UIComponents/baseComponent/interfaces/ComponentOptions";
    import { State } from "sabre-ngv-UIComponents/baseComponent/interfaces/State";
    export interface StatefulComponentOptions extends ComponentOptions {
        rootReducer?: Reducer<State>;
        middlewares?: Middleware[];
    }
}
declare module "sabre-ngv-UIComponents/baseComponent/components/StatefulComponent" {
    import { Action, Store, Reducer } from 'redux';
    import StatelessComponent from "sabre-ngv-UIComponents/baseComponent/components/StatelessComponent";
    import { ComponentProps } from "sabre-ngv-UIComponents/baseComponent/interfaces/ComponentProps";
    import { Mountable } from "sabre-ngv-UIComponents/baseComponent/interfaces/Mountable";
    import { State } from "sabre-ngv-UIComponents/baseComponent/interfaces/State";
    import { StatefulComponentOptions } from "sabre-ngv-UIComponents/baseComponent/interfaces/StatefulComponentOptions";
    /**
     * Base class for stateful module-level components ready to be used in application context.
     * Sets up store and connects it with provided React Component.
     * Implements 'Mountable' methods for use in Backbone context.
     */
    export default class StatefulComponent extends StatelessComponent implements Mountable<ComponentProps> {
        protected options: StatefulComponentOptions;
        /**
         * Redux store: an instance per component,
         * we are NOT following the 'one store per application' design.
         */
        protected store: Store<State>;
        constructor(options: StatefulComponentOptions);
        protected createStore(): Store<State>;
        protected getRootReducer(): Reducer<State>;
        /**
         * Build recursive view starting with the root element. Bind Redux store to the view.
         */
        mount(): void;
        /**
         * Allow parent of this component to pass a command for updating data etc.
         * The only way to update state of a component is to dispatch an Action on its store.
         *
         * @param action {Action}
         */
        dispatch(action: Action): void;
        /**
         * Clean up your stuff before leaving
         */
        dispose(): void;
    }
}
declare module "sabre-ngv-UIComponents/baseComponent/interfaces/StatefulComponentWithSagaOptions" {
    import { StatefulComponentOptions } from "sabre-ngv-UIComponents/baseComponent/interfaces/StatefulComponentOptions";
    import { EventBus } from 'sabre-ngv-app/app/events/EventBus';
    export interface StatefulComponentWithSagaOptions extends StatefulComponentOptions {
        rootSaga?: object;
        parentEventBus?: EventBus;
    }
}
declare module "sabre-ngv-UIComponents/baseComponent/components/StatefulComponentWithSaga" {
    import { Store } from 'redux';
    import StatefulComponent from "sabre-ngv-UIComponents/baseComponent/components/StatefulComponent";
    import { State } from "sabre-ngv-UIComponents/baseComponent/interfaces/State";
    import { StatefulComponentWithSagaOptions } from "sabre-ngv-UIComponents/baseComponent/interfaces/StatefulComponentWithSagaOptions";
    /**
     * Due to a special way Saga Middleware is initialized (it must be run() when store is ready)
     * and to avoid any overhead of Sagas initialized in a context that does not need them
     * we have excluded this functionality to a separate, special case class.
     */
    export default class StatefulComponentWithSaga extends StatefulComponent {
        protected options: StatefulComponentWithSagaOptions;
        constructor(options: StatefulComponentWithSagaOptions);
        protected createStore(): Store<State>;
        protected getRootSaga(): object;
        private prepareMiddlewares();
    }
}
declare module "sabre-ngv-UIComponents/baseComponent/interfaces/Action" {
    import { Action as ReduxAction } from 'redux';
    /**
     * Our actions need a value sometimes.
     */
    export interface Action extends ReduxAction {
        value?: string;
    }
}
declare module "sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentContent" {
    export interface ChildComponentContent {
        getDomElement: () => HTMLElement;
        dispose: () => void;
        close?: () => void;
    }
}
declare module "sabre-ngv-UIComponents/commandHelperButton/components/ButtonEvents" {
    export const ButtonEvents: {
        CANCEL_REQUESTED: string;
        SUBMIT_REQUESTED: string;
        POPOVER_DESTROYED: string;
        POPOVER_SHOWN: string;
        POPOVER_POSITION_SHOULD_BE_UPDATED: string;
    };
}
declare module "sabre-ngv-UIComponents/commandHelperButton/components/PopoverGroups" {
    export const PopoverGroups: {
        Novice: string;
    };
}
declare module "sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentView" {
    export interface ChildComponentView {
        destroy: () => void;
        handleMorphingLayout: (caller: object) => void;
        hide: () => void;
        show: () => void;
        toggle: () => void;
        reposition: () => void;
    }
}
declare module "sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildPopoverView" {
    import { ChildComponentView } from "sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentView";
    export interface ChildPopoverView extends ChildComponentView {
        handleHidePopovers?: (group: string) => void;
        hidePopoverIfOtherOpenedInGroup?: (eventSource: string) => void;
    }
}
declare module "sabre-ngv-UIComponents/commandHelperButton/components/AbstractPopoverButton" {
    import { AbstractNoviceButton } from 'sabre-ngv-app/app/widgets/console/AbstractNoviceButton';
    import { AbstractViewOptions } from 'sabre-ngv-app/app/AbstractViewOptions';
    import { EventBus } from 'sabre-ngv-app/app/events/EventBus';
    import { ChildComponentContent } from "sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentContent";
    import { ChildPopoverView } from "sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildPopoverView";
    /**
     * Novice Button in header navigation in novice input mode.
     * Opens a popover by default, so it handles global popover-related events.
     */
    export default abstract class AbstractPopoverButton extends AbstractNoviceButton {
        /**
         * Internal EB passed down to the view and content
         */
        protected eventBus: EventBus;
        protected abstract getView(): ChildPopoverView;
        protected abstract getContent(): ChildComponentContent;
        /**
         * Method to initialize Novice Button in app/Backbone context
         */
        initialize(options: AbstractViewOptions): void;
        /**
         * default magic action triggered on click
         */
        protected selfAction(): void;
        /**
         * GLOBAL EB: system-wide events
         */
        private registerGlobalEvents();
        private handleGlobalDestroyAllPopoversEvent();
        private handleGlobalHidePopoversEvent(group);
        private handleGlobalMorphingLayoutEvent(caller);
        private handleGlobalDirtyLayourEvent();
        private handleGlobalShowPopoverEvent(eventSource);
        private handleOnNoviceModeChanged(eventName);
        /**
         * LOCAL event bus for listening to child communication
         */
        private registerLocalEvents();
        private handlePopoverShown();
        private handlePopoverDestroyed();
        private handlePopoverPositionShouldBeUpdated();
        /**
         * Close popover. Actually destroys DOM structure.
         */
        close(): boolean;
        /**
         * Toggle popover state between open and close
         */
        togglePopover(): void;
        /**
         * Show/open popover
         */
        showPopover(): void;
        /**
         * Hide popover in view, no DOM clean up
         */
        hidePopover(): void;
        protected disposeContent(): void;
        protected enableButton(): void;
        protected disableButton(): void;
    }
}
declare module "sabre-ngv-UIComponents/popover/interfaces/PopoverOptions" {
    import { EventBus } from 'sabre-ngv-app/app/events/EventBus';
    import AbstractBootstrapPopoverButton from "sabre-ngv-UIComponents/commandHelperButton/components/AbstractBootstrapPopoverButton";
    import { ChildComponentContent } from "sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentContent";
    export interface PopoverOptions {
        popoverGroup: string;
        sender: AbstractBootstrapPopoverButton;
        content: ChildComponentContent;
        parentEventBus: EventBus;
        parentPopoverClass: string;
        extraContentClass?: string;
        container?: string;
        placement?: string;
    }
}
declare module "sabre-ngv-UIComponents/popover/interfaces/PopoverConfiguration" {
    export interface PopoverConfiguration {
        trigger: string;
        html: boolean;
        content: HTMLElement;
        container: string;
        placement: string;
        template: string;
    }
}
declare module "sabre-ngv-UIComponents/popover/components/reposition" {
    /**
     * Reposition popover e.g. when window was resized
     *
     * Due to the fact that 'body' is popover's container,
     * we need to calculate the position manually
     */
    export const reposition: (content: JQuery, senderDomElement: JQuery) => void;
}
declare module "sabre-ngv-UIComponents/popover/components/Popover" {
    import { ChildPopoverView } from "sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildPopoverView";
    import { PopoverOptions } from "sabre-ngv-UIComponents/popover/interfaces/PopoverOptions";
    export default class Popover implements ChildPopoverView {
        static HTML_POPOVER_MODE: boolean;
        private isPopoverVisible;
        private content;
        private extraContentClass;
        private parentEventBus;
        private parentPopoverClass;
        private popoverGroup;
        private sender;
        private popoverConfiguration;
        constructor({popoverGroup, sender, content, parentEventBus, parentPopoverClass, extraContentClass, container, placement}: PopoverOptions);
        private generateTemplate();
        private getDataForTemplate();
        private initializeBootstrapPopover();
        private getPopoverRootElement();
        /**
         * @fires 'shown-popover'
         */
        private handleShownPopover();
        show(): void;
        private showPopover();
        private addFocusToFirstElement();
        reposition(): void;
        toggle(): void;
        hide(): void;
        destroy(): void;
        isVisible(): boolean;
        isFadedIn(): boolean;
        handleHidePopovers(group: string): void;
        handleMorphingLayout(caller: object & {
            el: {
                widget: object;
            };
        }): void;
        hidePopoverIfOtherOpenedInGroup(eventSource: string): void;
    }
}
declare module "sabre-ngv-UIComponents/commandHelperButton/components/AbstractBootstrapPopoverButton" {
    import { AbstractViewOptions } from 'sabre-ngv-app/app/AbstractViewOptions';
    import AbstractButton from "sabre-ngv-UIComponents/commandHelperButton/components/AbstractPopoverButton";
    import { ChildComponentContent } from "sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentContent";
    import Popover from "sabre-ngv-UIComponents/popover/components/Popover";
    /**
     * Specific button using Bootstrap popover lib to show forms.
     *
     * All event handlers are protected, implement them at will.
     */
    export default abstract class AbstractBootstrapPopoverButton extends AbstractButton {
        private popover;
        private sender;
        protected abstract getContent(): ChildComponentContent;
        initialize(options: AbstractViewOptions): void;
        private registerExtendedGlobalEvents();
        protected handleResponseReceived(response: object): void;
        protected handleGlobalPrepareRequestEvent(command: object): void;
        private registerExtendedLocalEvents();
        protected handleCancelRequested(): void;
        protected handleDataPreparedForSubmit(data: object): void;
        protected getView(): Popover;
    }
}
declare module "sabre-ngv-UIComponents/flexGrid/interfaces/FlexGridElement" {
    export interface FlexGridElement {
        /**
         * Key of component
         **/
        key: string;
        /**
         * Component body
         **/
        component: React.ReactNode;
    }
}
declare module "sabre-ngv-UIComponents/flexGrid/interfaces/FlexGridRow" {
    import { FlexGridElement } from "sabre-ngv-UIComponents/flexGrid/interfaces/FlexGridElement";
    export interface FlexGridRow {
        /**
         * Key for each row
         **/
        key: string;
        /**
         * Array with elements of row
         **/
        elements: FlexGridElement[];
    }
}
declare module "sabre-ngv-UIComponents/flexGrid/interfaces/FlexGridProps" {
    import { FlexGridRow } from "sabre-ngv-UIComponents/flexGrid/interfaces/FlexGridRow";
    export interface FlexGridProps {
        /**
         * Array with rows which contains key and elements for each row
         **/
        rows: FlexGridRow[];
    }
}
declare module "sabre-ngv-UIComponents/flexGrid/styles/styles" {
    import { CSSProperties } from 'react';
    const styles: {
        [key: string]: CSSProperties;
    };
    export { styles };
}
declare module "sabre-ngv-UIComponents/icon/interfaces/IconProps" {
    import { CSSProperties } from 'react';
    export interface IconProps {
        name: string;
        style?: CSSProperties;
    }
}
declare module "sabre-ngv-UIComponents/select/interfaces/Option" {
    export interface Option {
        value: string | number;
        label?: string;
        isDisabled?: boolean;
        isSelected?: boolean;
    }
}
declare module "sabre-ngv-UIComponents/select/interfaces/SelectProps" {
    import { Option } from "sabre-ngv-UIComponents/select/interfaces/Option";
    export interface SelectProps {
        options: Option[];
        value?: string | number;
        onChange: (value: string | number) => void;
        selectClass: string;
        name?: string;
        placeholder?: string;
    }
}
declare module "sabre-ngv-UIComponents/select/interfaces/SelectState" {
    import { Option } from "sabre-ngv-UIComponents/select/interfaces/Option";
    export interface SelectState {
        options?: Option[];
        value?: string | number;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/abstract/OutsideClickHandler" {
    class OutsideClickHandler {
        private outsideClickEvents;
        private clickHandler;
        constructor(clickHandler: EventListener);
        attach(): void;
        remove(): void;
    }
    export default OutsideClickHandler;
}
declare module "sabre-ngv-UIComponents/advancedDropdown/components/Option" {
    import * as React from 'react';
    import { Option as OptionType } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/Option";
    import { OptionRendererOptions } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/OptionRendererOptions";
    export interface OptionProps {
        id: string;
        isFocused: boolean;
        handleChange: (optionType: OptionType) => void;
        option: OptionType;
        optionRenderer: (optionRendererOptions: OptionRendererOptions) => JSX.Element;
    }
    export default class Option extends React.Component<OptionProps, {}> {
        handleChange(): void;
        render(): JSX.Element;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/components/SearchInput" {
    import * as React from 'react';
    import { FormEvent } from 'react';
    import { ScopedTranslator } from 'sabre-ngv-app/app/services/impl/I18nService';
    export const t: ScopedTranslator;
    export interface SearchInputProps {
        value: string;
        onClick: () => void;
        onChange: (text: string) => FormEvent<HTMLInputElement>;
        isFocused: boolean;
        hideIcon?: boolean;
        hidePlaceholder?: boolean;
    }
    export interface SearchInputState {
        value: string;
    }
    export default class SearchInput extends React.Component<SearchInputProps, SearchInputState> {
        searchInput: HTMLInputElement;
        placeholder: string;
        constructor(props: SearchInputProps);
        handleClick(e: FormEvent<HTMLInputElement>): void;
        handleChange(e: FormEvent<HTMLInputElement>): void;
        setFocus(): void;
        getIcon(): JSX.Element;
        getPlaceholder(): string;
        render(): JSX.Element;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/components/Dropdown" {
    import * as React from 'react';
    import { Option as OptionType } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/Option";
    import { OptionRendererOptions } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/OptionRendererOptions";
    export interface DropdownProps {
        handleChange: (options: OptionType) => void;
        activeOptions?: OptionType[];
        isSearchable: boolean;
        handleKeyDown: (e: KeyboardEvent) => void;
        optionRenderer: (options: OptionRendererOptions) => JSX.Element;
        isSearchInputFocused: boolean;
        handleSearchInputChange: (test: string) => void;
        handleSearchInputClick: () => void;
        minCharactersForSearch: number;
        focusIndex: number;
        simpleStyle?: boolean;
        hideSearchIcon?: boolean;
        hideSearchPlaceholder?: boolean;
        /**
         *handle event when mouse enters dropdown
         */
        handleMouseEnter: () => void;
        /**
         * reference to DOM options list
         */
        optionsListRef?: React.Ref<HTMLDivElement>;
    }
    export interface DropdownState {
        searchInputText: string;
    }
    export default class Dropdown extends React.Component<DropdownProps, DropdownState> {
        constructor(props: DropdownProps);
        componentWillUnmount(): void;
        getSearchInput(): JSX.Element;
        getOptionsList(): JSX.Element[];
        render(): JSX.Element;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/utils/checkboxOptionRenderer" {
    import * as React from 'react';
    import { OptionRendererOptions } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/OptionRendererOptions";
    export function checkboxOptionRenderer(this: React.SFC<OptionRendererOptions>, rendererOptions: OptionRendererOptions): JSX.Element;
}
declare module "sabre-ngv-UIComponents/advancedDropdown/components/AdvancedDropdown" {
    import * as React from 'react';
    import { Option } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/Option";
    import { AdvancedDropdownProps } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/AdvancedDropdownProps";
    import { AdvancedDropdownState } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/AdvancedDropdownState";
    export default class AdvancedDropdown extends React.Component<AdvancedDropdownProps, AdvancedDropdownState> {
        private sortBy?;
        private optionRenderer;
        private mainInput?;
        private optionsListDOM?;
        private outsideClickHandler;
        constructor(props: AdvancedDropdownProps);
        private handleMouseEnter;
        private hoverFirstOption(selected, value);
        private disableUnavailableOptions(options);
        handleClickOutside(e: Event): void;
        getDisplayValue(options: Option[]): string;
        componentDidMount(): void;
        componentWillUnmount(): void;
        private toggleOptionsVisibility();
        private focusFirstOption();
        /**
         * focus selected option if no option is selected
         * then focus first option
         * **/
        private focusSelectedOption();
        private handleOnFocus();
        private handleOnBlur();
        private closeOptions();
        private prepareCloseOptionsState();
        private prepareOpenOptionsState();
        private getOptionsVisibilityState(shouldOpen);
        private handleChange(option);
        /**
         * Disables all not selected options, used just when just isMulti props is false.
         * When nothing is selected enables all checkboxes
         * @param newOptions changed by reference
         */
        private disableOptionsIfNotMultiSelection(newOptions);
        private handleSearchInputClick();
        /**
         * Disables options that should be disabled
         * @param newOption
         */
        static checkDisabledOptions(newOption: Option, newOptions: Option[]): void;
        static checkAllDisabledOptions(newOptions: Option[]): void;
        private getMinCharactersForSearch();
        private checkOption(option, newOptions);
        private uncheckPreviousOption(newOptions);
        private handleKeyDown(e);
        private checkOptionOnIndex(index);
        private focusMainInput();
        private onInputKeyDown(e);
        private moveFocusDown();
        private moveFocusUp();
        private resetFocusedOptions();
        private getFilterByText(text);
        private getActiveOptions();
        private areTextFilterPreconditionsMet();
        private handleSearchInputChange(text);
        private renderLeftIcon();
        private renderRightIcon();
        private renderDropdownContainer();
        private getDropdownContainerStyle();
        private getPositionType();
        private getDropdownPositionStyle();
        private hasPlaceToDropDown();
        private calculateDropdownPosition();
        private handleCheckAllOptions(option, newOptions);
        private checkAllOptions(options);
        private simulateSpaceBehaviorOnEnterKeyDown();
        scrollToOption(index: number): void;
        render(): JSX.Element;
        static getDerivedStateFromProps(props: AdvancedDropdownProps, state: AdvancedDropdownState): AdvancedDropdownState;
    }
}
declare module "sabre-ngv-UIComponents/advancedDropdown/utils/simpleOptionRenderer" {
    import * as React from 'react';
    import { OptionRendererOptions } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/OptionRendererOptions";
    export function SimpleOption(this: React.SFC<OptionRendererOptions>, rendererOptions: OptionRendererOptions & React.Props<{}>): JSX.Element;
    export function simpleOptionRenderer(rendererOptions: OptionRendererOptions & React.Props<{}>): JSX.Element;
}
declare module "sabre-ngv-UIComponents/advancedDropdown/components/SimpleDropdown" {
    import { AdvancedDropdownProps } from "sabre-ngv-UIComponents/advancedDropdown/interfaces/AdvancedDropdownProps";
    export type Props = Partial<AdvancedDropdownProps> & Pick<AdvancedDropdownProps, 'options'>;
    export function SimpleDropdown({isMulti, isSearchable, leftIcon, rightIcon, rightIconOpen, minCharactersForSearch, closeOnChange, mandatory, optionRenderer, isFocusOnFirstOption, simpleStyle, isFocusOnMainInput, onChange, placeholder, dropup, options, fixedPosition, hideSearchPlaceholder, hideSearchIcon}: Props): JSX.Element;
}
declare module "sabre-ngv-UIComponents/flexGrid/components/FlexGrid" {
    import { FlexGridProps } from "sabre-ngv-UIComponents/flexGrid/interfaces/FlexGridProps";
    export function FlexGrid(props: FlexGridProps): JSX.Element;
}
declare module "sabre-ngv-UIComponents/icon/components/Icon" {
    import { IconProps } from "sabre-ngv-UIComponents/icon/interfaces/IconProps";
    export function Icon(props: IconProps): JSX.Element;
}
declare module "sabre-ngv-UIComponents/select/components/Select" {
    import * as React from 'react';
    import { SelectProps } from "sabre-ngv-UIComponents/select/interfaces/SelectProps";
    import { SelectState } from "sabre-ngv-UIComponents/select/interfaces/SelectState";
    export default class Select extends React.Component<SelectProps, SelectState> {
        constructor(props: SelectProps);
        componentWillReceiveProps(nextProps: SelectProps): void;
        handleChange(event: React.ChangeEvent<HTMLSelectElement>): void;
        renderOptions(): JSX.Element[];
        handleKeyDown(e: React.KeyboardEvent<HTMLSelectElement>): void;
        render(): JSX.Element;
    }
}
