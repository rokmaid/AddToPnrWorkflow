var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
///<amd-module name="sabre-ngv-UIComponents/Context" />
/// <ngv scope="public" />
define("sabre-ngv-UIComponents/Context", ["require", "exports", "sabre-ngv-core/modules/ModuleContext"], function (require, exports, ModuleContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Cannot use IModuleContext['something'] for types - it seems to break generics
    // types are copied from IModuleContext
    /** @internal **/
    exports.context = new ModuleContext_1.ModuleContext("sabre-ngv-UIComponents");
    /** @internal **/
    exports.cf = exports.context.cf.bind(exports.context);
    /** @internal **/
    exports.registerService = exports.context.registerService.bind(exports.context);
    /** @internal **/
    exports.getService = exports.context.getService.bind(exports.context);
});
///<amd-module name="sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentContent" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentContent", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/commandHelperButton/components/ButtonEvents" />
/// <ngv scope="public" />
define("sabre-ngv-UIComponents/commandHelperButton/components/ButtonEvents", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ButtonEvents = {
        CANCEL_REQUESTED: 'cancel-requested',
        SUBMIT_REQUESTED: 'submit-requested',
        POPOVER_DESTROYED: 'popover-destroyed',
        POPOVER_SHOWN: 'popover-shown',
        POPOVER_POSITION_SHOULD_BE_UPDATED: 'popover-position-should-be-updated'
    };
});
///<amd-module name="sabre-ngv-UIComponents/commandHelperButton/components/PopoverGroups" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/commandHelperButton/components/PopoverGroups", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PopoverGroups = {
        Novice: "novice-menu"
    };
});
///<amd-module name="sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentView" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildComponentView", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildPopoverView" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/commandHelperButton/interfaces/ChildPopoverView", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/commandHelperButton/components/AbstractPopoverButton" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/commandHelperButton/components/AbstractPopoverButton", ["require", "exports", "sabre-ngv-app/app/widgets/console/AbstractNoviceButton", "sabre-ngv-app/app/events/EventBus", "sabre-ngv-UIComponents/commandHelperButton/components/ButtonEvents", "sabre-ngv-UIComponents/Context", "sabre-ngv-UIComponents/commandHelperButton/components/PopoverGroups", "sabre-ngv-app/app/services/impl/ModeService"], function (require, exports, AbstractNoviceButton_1, EventBus_1, ButtonEvents_1, Context_1, PopoverGroups_1, ModeService_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Novice Button in header navigation in novice input mode.
     * Opens a popover by default, so it handles global popover-related events.
     */
    var AbstractPopoverButton = (function (_super) {
        __extends(AbstractPopoverButton, _super);
        function AbstractPopoverButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Method to initialize Novice Button in app/Backbone context
         */
        AbstractPopoverButton.prototype.initialize = function (options) {
            _super.prototype.initialize.call(this, options);
            this.eventBus = new EventBus_1.EventBus();
            this.registerGlobalEvents();
            this.registerLocalEvents();
        };
        /**
         * default magic action triggered on click
         */
        AbstractPopoverButton.prototype.selfAction = function () {
            this.togglePopover();
        };
        /**
         * GLOBAL EB: system-wide events
         */
        AbstractPopoverButton.prototype.registerGlobalEvents = function () {
            this.listenToEventBus('destroy-all-popovers', this.handleGlobalDestroyAllPopoversEvent.bind(this));
            this.listenToEventBus('hide-popovers', this.handleGlobalHidePopoversEvent.bind(this));
            this.listenToEventBus('morphing-layout', this.handleGlobalMorphingLayoutEvent.bind(this));
            this.listenToEventBus('dirty-layout', this.handleGlobalDirtyLayourEvent.bind(this));
            this.listenToEventBus('show-' + PopoverGroups_1.PopoverGroups.Novice + '-popover', this.handleGlobalShowPopoverEvent.bind(this));
            this.listenToEventBus('novice-mode-changed', this.handleOnNoviceModeChanged.bind(this, 'novice-mode-changed'));
            this.listenToEventBus('novice-input-mode-changed', this.handleOnNoviceModeChanged.bind(this, 'novice-input-mode-changed'));
        };
        AbstractPopoverButton.prototype.handleGlobalDestroyAllPopoversEvent = function () {
            this.getView().destroy();
        };
        AbstractPopoverButton.prototype.handleGlobalHidePopoversEvent = function (group) {
            var view = this.getView();
            if (typeof view.handleHidePopovers !== 'undefined') {
                view.handleHidePopovers(group);
            }
        };
        AbstractPopoverButton.prototype.handleGlobalMorphingLayoutEvent = function (caller) {
            this.getView().handleMorphingLayout(caller);
        };
        AbstractPopoverButton.prototype.handleGlobalDirtyLayourEvent = function () {
            this.getView().reposition();
        };
        AbstractPopoverButton.prototype.handleGlobalShowPopoverEvent = function (eventSource) {
            var view = this.getView();
            if (typeof view.hidePopoverIfOtherOpenedInGroup !== 'undefined') {
                view.hidePopoverIfOtherOpenedInGroup(eventSource);
            }
        };
        AbstractPopoverButton.prototype.handleOnNoviceModeChanged = function (eventName) {
            console.log(eventName);
            if (!Context_1.getService(ModeService_1.ModeService).isNoviceInputMode()) {
                this.hidePopover();
            }
        };
        /**
         * LOCAL event bus for listening to child communication
         */
        AbstractPopoverButton.prototype.registerLocalEvents = function () {
            this.eventBus.on(ButtonEvents_1.ButtonEvents.POPOVER_SHOWN, this.handlePopoverShown.bind(this));
            this.eventBus.on(ButtonEvents_1.ButtonEvents.POPOVER_DESTROYED, this.handlePopoverDestroyed.bind(this));
            this.eventBus.on(ButtonEvents_1.ButtonEvents.POPOVER_POSITION_SHOULD_BE_UPDATED, this.handlePopoverPositionShouldBeUpdated.bind(this));
        };
        AbstractPopoverButton.prototype.handlePopoverShown = function () {
            var eventType = 'show-' + PopoverGroups_1.PopoverGroups.Novice + '-popover';
            // FIXME !!!!!!!!!!!!!!
            this.triggerOnEventBus(eventType, 'ProfilesHack');
        };
        AbstractPopoverButton.prototype.handlePopoverDestroyed = function () {
            var content = this.getContent();
            if (content && content.close) {
                content.close();
            }
        };
        AbstractPopoverButton.prototype.handlePopoverPositionShouldBeUpdated = function () {
            this.getView().reposition();
        };
        /**
         * Close popover. Actually destroys DOM structure.
         */
        AbstractPopoverButton.prototype.close = function () {
            this.getView().destroy();
            // we do not need to destroy content here, we will use it
            // next time the popover is opened.
            return true;
        };
        /**
         * Toggle popover state between open and close
         */
        AbstractPopoverButton.prototype.togglePopover = function () {
            this.getView().toggle();
        };
        /**
         * Show/open popover
         */
        AbstractPopoverButton.prototype.showPopover = function () {
            this.getView().show();
        };
        /**
         * Hide popover in view, no DOM clean up
         */
        AbstractPopoverButton.prototype.hidePopover = function () {
            this.getView().hide();
        };
        AbstractPopoverButton.prototype.disposeContent = function () {
            this.getContent().dispose();
        };
        AbstractPopoverButton.prototype.enableButton = function () {
            this.$el.prop('disabled', false);
        };
        AbstractPopoverButton.prototype.disableButton = function () {
            this.$el.prop('disabled', true);
        };
        return AbstractPopoverButton;
    }(AbstractNoviceButton_1.AbstractNoviceButton));
    exports.default = AbstractPopoverButton;
});
define("sabre-ngv-UIComponents/advancedDropdown/interfaces/Option", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/advancedDropdown/interfaces/OptionRendererOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/advancedDropdown/styles/styles" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/advancedDropdown/styles/styles", ["require", "exports", "sabre-ngv-app/cssProperty"], function (require, exports, cssProperty_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var prop = cssProperty_1.cssProperty;
    var styles = {
        advancedDropdown: {
            position: 'relative'
        },
        fixedPosition: {
            position: 'fixed'
        },
        absolutePosition: {
            position: 'absolute'
        },
        formGroup: {
            position: 'relative'
        },
        formGroupFocused: {
            border: "1px solid " + prop('brand-primary')
        },
        formGroupDisabled: {
            cursor: 'not-allowed',
            backgroundColor: prop('gray-lightest'),
            opacity: .7
        },
        formCheckboxFocused: {
            outline: "1px solid " + prop('brand-primary')
        },
        optionList: {
            maxHeight: '150px',
            overflow: 'auto',
            paddingLeft: '5px'
        },
        dropdownOptionsContainerStyle: {
            background: prop('white'),
            border: "1px solid " + prop('gray-bg'),
            padding: '3px',
            zIndex: 1000,
            minWidth: '200px',
            borderRadius: '3px',
            overflow: 'auto',
            marginLeft: '-10px',
            marginTop: '2px',
            whiteSpace: 'nowrap'
        },
        inputElement: {
            cursor: 'pointer',
            border: 'none',
            width: '100%',
            paddingLeft: '15px',
            lineHeight: '20px'
        },
        inputElementDisabled: {
            cursor: 'not-allowed',
            backgroundColor: 'transparent'
        },
        leftIcon: {
            position: 'absolute',
            top: '50%',
            marginTop: '-10px',
            fontSize: '14px',
            color: '#999'
        },
        rightIcon: {
            position: 'absolute',
            top: '50%',
            marginTop: '-10px',
            fontSize: '14px',
            right: '10px',
            color: prop('gray-light')
        },
        optionStyle: {
            display: 'block',
            margin: '5px 45px 5px 0',
            cursor: 'pointer',
            fontWeight: 'normal',
            lineHeight: '1.6',
            color: 'inherit'
        },
        checkboxInput: {
            margin: '2px 4px 0'
        },
        optionDisabledStyle: {
            color: prop('gray-light'),
        },
        searchInputStyle: {
            width: '100%',
            borderRadius: '3px',
            height: '25px',
            padding: '3px 5px 3px 22px',
            border: "1px solid " + prop('gray-bg')
        },
        searchIconStyle: {
            left: '-4px',
            top: '7px',
            height: 'auto'
        }
    };
    exports.styles = styles;
    styles.dropdownOptionsContainerSimpleStyle = __assign({}, styles.dropdownOptionsContainerStyle, { bottom: 'inherit', minWidth: 'inherit', width: '100%', top: '28px', padding: 0, border: "1px solid " + prop('brand-primary'), borderTopWidth: 0, borderTopLeftRadius: '0', borderTopRightRadius: '0', borderBottomLeftRadius: '3px', borderBottomRightRadius: '3px', marginTop: '-1px' });
    styles.optionSimpleStyle = __assign({}, styles.optionStyle, { margin: 0, padding: '5px' });
    styles.optionListSimple = __assign({}, styles.optionList, { paddingLeft: 0 });
    styles.inputElementSimple = __assign({}, styles.inputElement, { paddingLeft: 0 });
    styles.dropupOptionsContainerStyle = {
        background: prop('white'),
        bottom: '32px',
        position: 'absolute',
        minWidth: '250px',
        overflow: 'auto',
        borderTopLeftRadius: '3px',
        borderTopRightRadius: '3px',
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0,
        borderBottomWidth: '1px',
        borderTopWidth: '1px',
        borderWidth: '0px 1px 1px',
        borderStyle: 'solid',
        borderColor: 'rgb(52, 152, 219)'
    };
});
define("sabre-ngv-UIComponents/advancedDropdown/components/Option", ["require", "exports", "react", "sabre-ngv-UIComponents/advancedDropdown/styles/styles"], function (require, exports, React, styles_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Option = (function (_super) {
        __extends(Option, _super);
        function Option() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Option.prototype.handleChange = function () {
            this.props.handleChange(this.props.option);
        };
        Option.prototype.render = function () {
            var _a = this.props, isFocused = _a.isFocused, option = _a.option;
            return this.props.optionRenderer({
                isFocused: isFocused,
                option: option,
                handleChange: this.handleChange.bind(this),
                optionStyle: option.disabled ? __assign({}, styles_1.styles.optionStyle, styles_1.styles.optionDisabledStyle) : styles_1.styles.optionStyle
            });
        };
        return Option;
    }(React.Component));
    exports.default = Option;
    ;
});
define("sabre-ngv-UIComponents/advancedDropdown/components/SearchInput", ["require", "exports", "react", "sabre-ngv-UIComponents/advancedDropdown/styles/styles", "sabre-ngv-UIComponents/Context", "sabre-ngv-app/app/services/impl/I18nService"], function (require, exports, React, styles_2, Context_2, I18nService_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var i18n = Context_2.getService(I18nService_1.I18nService);
    exports.t = i18n.getScopedTranslator('sabre-ngv-UIComponents/translations');
    var SearchInput = (function (_super) {
        __extends(SearchInput, _super);
        function SearchInput(props) {
            var _this = _super.call(this, props) || this;
            _this.placeholder = exports.t("SEARCH");
            _this.handleChange = _this.handleChange.bind(_this);
            _this.handleClick = _this.handleClick.bind(_this);
            _this.state = {
                value: props.value || ''
            };
            _this.setFocus = _this.setFocus.bind(_this);
            return _this;
        }
        SearchInput.prototype.handleClick = function (e) {
            this.props.onClick();
        };
        SearchInput.prototype.handleChange = function (e) {
            var text = e.currentTarget.value;
            this.props.onChange && this.props.onChange(text);
            this.setState({ value: text });
        };
        SearchInput.prototype.setFocus = function () {
            this.searchInput.focus();
        };
        SearchInput.prototype.getIcon = function () {
            if (this.props.hideIcon) {
                return null;
            }
            return React.createElement("i", { style: styles_2.styles.searchIconStyle, className: "fa fa-search form-control-feedback" });
        };
        SearchInput.prototype.getPlaceholder = function () {
            if (this.props.hidePlaceholder) {
                return '';
            }
            else {
                return this.placeholder;
            }
        };
        SearchInput.prototype.render = function () {
            var _this = this;
            return (React.createElement("div", { className: "form-group has-feedback" },
                React.createElement("div", { style: { display: 'flex' } },
                    React.createElement("input", { type: "text", className: "form-control", style: styles_2.styles.searchInputStyle, value: this.state.value, onChange: this.handleChange, onClick: this.handleClick, placeholder: this.getPlaceholder(), autoFocus: true, ref: function (input) { return input && _this.props.isFocused === true && input.focus(); } }),
                    !this.props.hideIcon && this.getIcon())));
        };
        return SearchInput;
    }(React.Component));
    exports.default = SearchInput;
});
define("sabre-ngv-UIComponents/advancedDropdown/components/Dropdown", ["require", "exports", "react", "sabre-ngv-UIComponents/advancedDropdown/components/Option", "sabre-ngv-UIComponents/advancedDropdown/components/SearchInput", "sabre-ngv-UIComponents/advancedDropdown/styles/styles"], function (require, exports, React, Option_1, SearchInput_1, styles_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Dropdown = (function (_super) {
        __extends(Dropdown, _super);
        function Dropdown(props) {
            var _this = _super.call(this, props) || this;
            _this.getSearchInput = _this.getSearchInput.bind(_this);
            _this.state = {
                searchInputText: ''
            };
            return _this;
        }
        Dropdown.prototype.componentWillUnmount = function () {
            this.props.handleSearchInputChange('');
        };
        Dropdown.prototype.getSearchInput = function () {
            return this.props.isSearchable
                ? React.createElement(SearchInput_1.default, { value: this.state.searchInputText, onClick: this.props.handleSearchInputClick, onChange: this.props.handleSearchInputChange.bind(this), isFocused: this.props.isSearchInputFocused, hideIcon: this.props.hideSearchIcon || false, hidePlaceholder: this.props.hideSearchPlaceholder || false })
                : null;
        };
        Dropdown.prototype.getOptionsList = function () {
            var _this = this;
            var activeOptions = this.props.activeOptions;
            return activeOptions
                ? activeOptions.map(function (option, index) {
                    return (React.createElement(Option_1.default, { key: option.value, id: option.value + '-option', isFocused: index + 1 === _this.props.focusIndex, option: option, handleChange: _this.props.handleChange, optionRenderer: _this.props.optionRenderer }));
                })
                : null;
        };
        Dropdown.prototype.render = function () {
            return (React.createElement("div", { onKeyDown: this.props.handleKeyDown.bind(this), onMouseEnter: this.props.handleMouseEnter },
                this.getSearchInput(),
                React.createElement("div", { style: this.props.simpleStyle ? styles_3.styles.optionListSimple : styles_3.styles.optionList, ref: this.props.optionsListRef }, this.getOptionsList())));
        };
        return Dropdown;
    }(React.Component));
    exports.default = Dropdown;
    ;
});
///<amd-module name="sabre-ngv-UIComponents/advancedDropdown/utils/checkboxOptionRenderer" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/advancedDropdown/utils/checkboxOptionRenderer", ["require", "exports", "react", "sabre-ngv-UIComponents/advancedDropdown/styles/styles"], function (require, exports, React, styles_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function checkboxOptionRenderer(rendererOptions) {
        var isFocused = rendererOptions.isFocused, option = rendererOptions.option, optionStyle = rendererOptions.optionStyle, handleChange = rendererOptions.handleChange;
        var value = option.value, disabled = option.disabled, checked = option.checked, label = option.label;
        var focusClassName = isFocused ? 'focus' : '';
        var focusStyle = isFocused ? __assign({}, styles_4.styles.checkboxInput, styles_4.styles.formCheckboxFocused) : styles_4.styles.checkboxInput;
        return (React.createElement("label", { style: optionStyle, className: focusClassName },
            React.createElement("input", { style: focusStyle, className: "pull-left", value: value, type: "checkbox", onChange: handleChange.bind(this), disabled: disabled, checked: checked, ref: function (input) { return input && isFocused && input.focus(); } }),
            label));
    }
    exports.checkboxOptionRenderer = checkboxOptionRenderer;
    ;
});
define("sabre-ngv-UIComponents/advancedDropdown/utils/keyCodes", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name="sabre-ngv-UIComponents/advancedDropdown/utils/keyCodes" />
    /// <ngv scope='public' />
    exports.keyCodes = {
        KEY_DOWN: 40,
        KEY_UP: 38,
        SPACE: 32,
        TAB: 9,
        ESC: 27,
        ENTER: 13
    };
});
define("sabre-ngv-UIComponents/advancedDropdown/abstract/OutsideClickHandler", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OutsideClickHandler = (function () {
        function OutsideClickHandler(clickHandler) {
            this.outsideClickEvents = ['mousedown', 'touchstart'];
            this.clickHandler = clickHandler;
        }
        OutsideClickHandler.prototype.attach = function () {
            var _this = this;
            this.outsideClickEvents.forEach(function (eventName) {
                document.addEventListener(eventName, _this.clickHandler, false);
            });
        };
        OutsideClickHandler.prototype.remove = function () {
            var _this = this;
            this.outsideClickEvents.forEach(function (eventName) {
                document.removeEventListener(eventName, _this.clickHandler, false);
            });
        };
        return OutsideClickHandler;
    }());
    exports.default = OutsideClickHandler;
});
define("sabre-ngv-UIComponents/advancedDropdown/interfaces/AdvancedDropdownProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/advancedDropdown/interfaces/AdvancedDropdownState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/advancedDropdown/interfaces/VisibilityState" />
/// <ngv scope="public" />
define("sabre-ngv-UIComponents/advancedDropdown/interfaces/VisibilityState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/advancedDropdown/components/AdvancedDropdown" />
/// <ngv scope="public" />
define("sabre-ngv-UIComponents/advancedDropdown/components/AdvancedDropdown", ["require", "exports", "react", "react-dom", "sabre-ngv-UIComponents/advancedDropdown/components/Dropdown", "sabre-ngv-UIComponents/advancedDropdown/utils/checkboxOptionRenderer", "sabre-ngv-UIComponents/advancedDropdown/styles/styles", "sabre-ngv-UIComponents/advancedDropdown/utils/keyCodes", "sabre-ngv-UIComponents/advancedDropdown/abstract/OutsideClickHandler"], function (require, exports, React, react_dom_1, Dropdown_1, checkboxOptionRenderer_1, styles_5, keyCodes_1, OutsideClickHandler_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AdvancedDropdown = (function (_super) {
        __extends(AdvancedDropdown, _super);
        function AdvancedDropdown(props) {
            var _this = _super.call(this, props) || this;
            _this.handleMouseEnter = function () {
                _this.hoverFirstOption(true, false);
            };
            _this.handleChange = _this.handleChange.bind(_this);
            _this.handleOnFocus = _this.handleOnFocus.bind(_this);
            _this.handleOnBlur = _this.handleOnBlur.bind(_this);
            _this.handleClickOutside = _this.handleClickOutside.bind(_this);
            _this.toggleOptionsVisibility = _this.toggleOptionsVisibility.bind(_this);
            _this.getActiveOptions = _this.getActiveOptions.bind(_this);
            _this.areTextFilterPreconditionsMet = _this.areTextFilterPreconditionsMet.bind(_this);
            _this.getMinCharactersForSearch = _this.getMinCharactersForSearch.bind(_this);
            _this.handleSearchInputChange = _this.handleSearchInputChange.bind(_this);
            _this.handleKeyDown = _this.handleKeyDown.bind(_this);
            _this.onInputKeyDown = _this.onInputKeyDown.bind(_this);
            _this.handleSearchInputClick = _this.handleSearchInputClick.bind(_this);
            _this.sortBy = _this.props.sortBy;
            _this.optionRenderer = _this.props.optionRenderer || checkboxOptionRenderer_1.checkboxOptionRenderer;
            _this.outsideClickHandler = new OutsideClickHandler_1.default(_this.handleClickOutside);
            var options = _this.props.options;
            if (_this.sortBy) {
                options = _this.props.options.sort(_this.sortBy);
            }
            options = _this.disableUnavailableOptions(options);
            _this.state = {
                isOpen: false,
                options: options,
                focusIndex: 0,
                displayedValue: _this.getDisplayValue(options),
                hoverIndex: 0
            };
            return _this;
        }
        AdvancedDropdown.prototype.hoverFirstOption = function (selected, value) {
            if (selected) {
                this.setState({ hoverIndex: 0 });
                this.props.options[this.state.hoverIndex].hover = value;
            }
        };
        AdvancedDropdown.prototype.disableUnavailableOptions = function (options) {
            (options || [])
                .filter(function (_a) {
                var checked = _a.checked;
                return checked;
            })
                .forEach(function (option) {
                AdvancedDropdown.checkDisabledOptions(option, options);
            });
            return options;
        };
        AdvancedDropdown.prototype.handleClickOutside = function (e) {
            var current = e.target;
            var componentNode = react_dom_1.findDOMNode(this);
            while (current.parentNode) {
                if (current === componentNode) {
                    return;
                }
                current = current.parentNode;
            }
            if (current !== document) {
                return;
            }
            if (this.state.isOpen) {
                this.closeOptions();
            }
        };
        AdvancedDropdown.prototype.getDisplayValue = function (options) {
            var selectedOption = (options || []).find(function (_a) {
                var checked = _a.checked;
                return checked === true;
            });
            if (this.props.displayFormatter) {
                return this.props.displayFormatter(options);
            }
            return (!this.props.isMulti && selectedOption && selectedOption.label)
                || (this.state && this.state.displayedValue) || this.props.placeholder
                || '';
        };
        AdvancedDropdown.prototype.componentDidMount = function () {
            this.outsideClickHandler.attach();
            this.props.isFocusOnMainInput && this.focusMainInput();
        };
        AdvancedDropdown.prototype.componentWillUnmount = function () {
            this.outsideClickHandler.remove();
        };
        AdvancedDropdown.prototype.toggleOptionsVisibility = function () {
            var _this = this;
            this.resetFocusedOptions();
            this.setState(function (prevState) {
                return prevState.isOpen ? _this.prepareCloseOptionsState() : _this.prepareOpenOptionsState();
            });
            this.disableOptionsIfNotMultiSelection(this.state.options);
            this.props.isFocusOnFirstOption ? this.focusFirstOption() : this.focusSelectedOption();
        };
        AdvancedDropdown.prototype.focusFirstOption = function () {
            var firstNotDisabledOption = this.state.options.findIndex(function (option) { return !option.disabled; }) + 1;
            this.setState({ focusIndex: firstNotDisabledOption });
        };
        /**
         * focus selected option if no option is selected
         * then focus first option
         * **/
        AdvancedDropdown.prototype.focusSelectedOption = function () {
            var selectedOption = (this.state.options || []).find(function (_a) {
                var checked = _a.checked;
                return checked === true;
            });
            var selectedIndex = this.state.options.indexOf(selectedOption);
            var isNotSelected = Boolean(selectedIndex === -1);
            this.hoverFirstOption(isNotSelected, true);
            this.setState({ focusIndex: selectedIndex + 1 });
        };
        AdvancedDropdown.prototype.handleOnFocus = function () {
            this.setState({ isFocused: true });
        };
        AdvancedDropdown.prototype.handleOnBlur = function () {
            this.setState({ isFocused: false });
        };
        AdvancedDropdown.prototype.closeOptions = function () {
            this.setState(this.prepareCloseOptionsState());
        };
        AdvancedDropdown.prototype.prepareCloseOptionsState = function () {
            // configurable change callback, which can change options
            if (this.props.onChange && this.state.options) {
                this.props.onChange(this.state.options);
            }
            return this.getOptionsVisibilityState(false);
        };
        AdvancedDropdown.prototype.prepareOpenOptionsState = function () {
            return this.getOptionsVisibilityState(true);
        };
        AdvancedDropdown.prototype.getOptionsVisibilityState = function (shouldOpen) {
            return {
                isOpen: shouldOpen,
                isSearchInputFocused: shouldOpen
            };
        };
        AdvancedDropdown.prototype.handleChange = function (option) {
            var _this = this;
            if (!this.state.options) {
                return;
            }
            var focusIndex = this.getActiveOptions().indexOf(option) + 1;
            // Keep object reference
            var newOptions = this.state.options;
            option = this.checkOption(option, newOptions);
            this.handleCheckAllOptions(option, newOptions);
            AdvancedDropdown.checkDisabledOptions(option, newOptions);
            this.disableOptionsIfNotMultiSelection(newOptions);
            var newState = {
                options: newOptions,
                focusIndex: focusIndex
            };
            if (!this.props.isMulti) {
                newState.displayedValue = this.getDisplayValue(newOptions);
            }
            this.setState(newState, function () {
                if (_this.props.closeOnChange) {
                    _this.closeOptions();
                }
            });
            // Options will be changed immediately after selection
            if (this.props.changeOnSelect && this.props.onChange && newOptions) {
                this.props.onChange(newOptions);
            }
        };
        /**
         * Disables all not selected options, used just when just isMulti props is false.
         * When nothing is selected enables all checkboxes
         * @param newOptions changed by reference
         */
        AdvancedDropdown.prototype.disableOptionsIfNotMultiSelection = function (newOptions) {
            if (this.props.isMulti || !this.props.disableNotCheckedOptions) {
                return;
            }
            var hasOptionSelected = !!newOptions.find(function (option) { return option.checked; });
            hasOptionSelected ?
                newOptions.forEach(function (option, currIdx) {
                    newOptions[currIdx] = Object.assign({}, newOptions[currIdx], { disabled: !newOptions[currIdx].checked });
                }) :
                newOptions.forEach(function (option, currIdx) {
                    newOptions[currIdx] = Object.assign({}, newOptions[currIdx], { disabled: false });
                });
        };
        AdvancedDropdown.prototype.handleSearchInputClick = function () {
            this.resetFocusedOptions();
        };
        /**
         * Disables options that should be disabled
         * @param newOption
         */
        AdvancedDropdown.checkDisabledOptions = function (newOption, newOptions) {
            if (!newOption.disables) {
                return;
            }
            if (!Array.isArray(newOption.disables)) {
                return;
            }
            if (!newOptions) {
                return;
            }
            // find indices for the options which need to be disabled
            var indices = newOption.disables
                .map(function (disabledOptionValue) {
                var foundOption = newOptions.find(function (option) { return option.value === disabledOptionValue; });
                return foundOption ? newOptions.indexOf(foundOption) : -1;
            })
                .filter(function (i) { return i > -1; });
            if (!indices.length) {
                return;
            }
            indices.forEach(function (index) {
                var optionToDisable = newOptions[index];
                var disabled = newOption.checked;
                newOptions[index] = __assign({}, optionToDisable, { disabled: disabled, checked: !disabled && optionToDisable.checked });
            });
        };
        AdvancedDropdown.checkAllDisabledOptions = function (newOptions) {
            newOptions
                .filter(function (_a) {
                var checked = _a.checked;
                return checked;
            })
                .forEach(function (option) {
                AdvancedDropdown.checkDisabledOptions(option, newOptions);
            });
        };
        AdvancedDropdown.prototype.getMinCharactersForSearch = function () {
            return (this.props.minCharactersForSearch) > 0 ? this.props.minCharactersForSearch : 1;
        };
        AdvancedDropdown.prototype.checkOption = function (option, newOptions) {
            if (!this.props.isMulti && !option.checked) {
                this.uncheckPreviousOption(newOptions);
            }
            var index = newOptions.indexOf(option);
            newOptions[index] = __assign({}, option, { checked: this.props.mandatory ? true : !option.checked });
            return newOptions[index];
        };
        AdvancedDropdown.prototype.uncheckPreviousOption = function (newOptions) {
            var foundOption = newOptions.find(function (newOption) { return Boolean(newOption.checked); });
            if (!foundOption) {
                return;
            }
            var index = newOptions.indexOf(foundOption);
            if (index !== -1) {
                newOptions[index] = Object.assign({}, newOptions[index], { checked: false });
            }
        };
        AdvancedDropdown.prototype.handleKeyDown = function (e) {
            this.hoverFirstOption(true, false);
            switch (e.keyCode) {
                case keyCodes_1.keyCodes.KEY_DOWN:
                    this.moveFocusDown();
                    e.preventDefault();
                    break;
                case keyCodes_1.keyCodes.KEY_UP:
                    this.moveFocusUp();
                    e.preventDefault();
                    break;
                case keyCodes_1.keyCodes.ENTER:
                    this.checkOptionOnIndex(this.state.focusIndex - 1);
                    this.simulateSpaceBehaviorOnEnterKeyDown();
                    this.focusMainInput();
                    this.closeOptions();
                    e.preventDefault();
                    e.stopPropagation();
                    break;
                case keyCodes_1.keyCodes.SPACE:
                    break;
                case keyCodes_1.keyCodes.TAB:
                    this.closeOptions();
                    if (!e.shiftKey) {
                        this.focusMainInput();
                    }
                    break;
                case keyCodes_1.keyCodes.ESC:
                    this.focusMainInput();
                    this.closeOptions();
                    break;
                default:
                    this.resetFocusedOptions();
            }
        };
        AdvancedDropdown.prototype.checkOptionOnIndex = function (index) {
            if (index < 0)
                index = 0;
            this.checkOption(this.state.options[index], this.state.options);
        };
        AdvancedDropdown.prototype.focusMainInput = function () {
            this.mainInput.focus();
        };
        AdvancedDropdown.prototype.onInputKeyDown = function (e) {
            // Not sure if this code is needed
            switch (e.keyCode) {
                case keyCodes_1.keyCodes.SPACE:
                case keyCodes_1.keyCodes.ENTER:
                    this.toggleOptionsVisibility();
                    e.preventDefault();
                    break;
            }
        };
        AdvancedDropdown.prototype.moveFocusDown = function () {
            var activeOptions = this.getActiveOptions() || [];
            // Default condition should never be necessary, added for typescript purposes
            var focusIndex = this.state.focusIndex || 0;
            var newFocusIndex = (focusIndex + 1) % (activeOptions.length + 1);
            while (activeOptions[newFocusIndex - 1] && activeOptions[newFocusIndex - 1].disabled) {
                newFocusIndex++;
            }
            if (focusIndex === this.state.options.length)
                newFocusIndex = this.state.options.length;
            this.scrollToOption(newFocusIndex);
            this.setState({ focusIndex: newFocusIndex });
        };
        AdvancedDropdown.prototype.moveFocusUp = function () {
            var activeOptions = this.getActiveOptions() || [];
            // Default condition should never be necessary, added for typescript purposes
            var focusIndex = this.state.focusIndex || 0;
            var newFocusIndex = (activeOptions.length + focusIndex) % (activeOptions.length + 1);
            if (focusIndex < 2)
                newFocusIndex = 1;
            while (activeOptions[newFocusIndex - 1] && activeOptions[newFocusIndex - 1].disabled) {
                newFocusIndex--;
            }
            this.scrollToOption(newFocusIndex);
            this.setState({ focusIndex: newFocusIndex });
        };
        AdvancedDropdown.prototype.resetFocusedOptions = function () {
            this.setState({
                focusIndex: 0
            });
        };
        AdvancedDropdown.prototype.getFilterByText = function (text) {
            return function (option) {
                return option && (option.label.toLowerCase().indexOf(text.toLowerCase()) >= 0);
            };
        };
        AdvancedDropdown.prototype.getActiveOptions = function () {
            var options = this.state.options;
            if (!options) {
                return [];
            }
            return this.areTextFilterPreconditionsMet()
                ? options.filter(this.getFilterByText(this.state.searchInputText || ''))
                : options;
        };
        AdvancedDropdown.prototype.areTextFilterPreconditionsMet = function () {
            var text = this.state.searchInputText;
            return text && (text.length >= this.getMinCharactersForSearch());
        };
        AdvancedDropdown.prototype.handleSearchInputChange = function (text) {
            this.setState({ searchInputText: text });
        };
        AdvancedDropdown.prototype.renderLeftIcon = function () {
            return (this.props.leftIcon !== null
                ? React.createElement("span", { className: "advanced-dropdown-left-icon pull-left", style: styles_5.styles.leftIcon, onClick: !this.props.disabled ? this.toggleOptionsVisibility : null },
                    React.createElement("i", { className: "fa " + (this.props.leftIcon || 'fa-cog') }))
                : null);
        };
        AdvancedDropdown.prototype.renderRightIcon = function () {
            var rightIcon = (this.state.isOpen && this.props.rightIconOpen)
                || this.props.rightIcon
                || 'fa-plus';
            return (this.props.rightIcon !== null
                ? React.createElement("span", { className: "advanced-dropdown-right-icon pull-right", style: styles_5.styles.rightIcon, onClick: !this.props.disabled ? this.toggleOptionsVisibility : null },
                    React.createElement("b", { className: "fa " + rightIcon }))
                : null);
        };
        AdvancedDropdown.prototype.renderDropdownContainer = function () {
            var _this = this;
            var focusIndex = this.state.focusIndex || -1;
            return this.state.isOpen ? (React.createElement("div", { style: __assign({}, this.getDropdownPositionStyle(), this.getDropdownContainerStyle(), this.getPositionType()) },
                React.createElement(Dropdown_1.default, { handleChange: this.handleChange, activeOptions: this.getActiveOptions(), isSearchable: this.props.isSearchable, handleKeyDown: this.handleKeyDown, optionRenderer: this.optionRenderer, isSearchInputFocused: Boolean(this.state.focusIndex === 0), handleSearchInputChange: this.handleSearchInputChange, handleSearchInputClick: this.handleSearchInputClick, minCharactersForSearch: this.props.minCharactersForSearch, focusIndex: focusIndex, handleMouseEnter: this.handleMouseEnter, simpleStyle: this.props.simpleStyle, hideSearchIcon: this.props.hideSearchIcon, hideSearchPlaceholder: this.props.hideSearchPlaceholder, optionsListRef: function (optionsList) { return _this.optionsListDOM = optionsList; } }))) : null;
        };
        AdvancedDropdown.prototype.getDropdownContainerStyle = function () {
            if (this.props.simpleStyle && !this.props.dropup) {
                return styles_5.styles.dropdownOptionsContainerSimpleStyle;
            }
            else if (this.props.simpleStyle && this.props.dropup) {
                return styles_5.styles.dropupOptionsContainerStyle;
            }
            else if (!this.props.simpleStyle && this.props.dropup) {
                return styles_5.styles.dropdownOptionsContainerStyle;
            }
            else if (!this.props.simpleStyle && !this.props.dropup) {
                return styles_5.styles.dropdownOptionsContainerStyle;
            }
        };
        AdvancedDropdown.prototype.getPositionType = function () {
            return !this.hasPlaceToDropDown() || this.props.dropup || this.props.simpleStyle ?
                styles_5.styles.absolutePosition : styles_5.styles.fixedPosition;
        };
        AdvancedDropdown.prototype.getDropdownPositionStyle = function () {
            return !this.hasPlaceToDropDown() || this.props.dropup
                ? styles_5.styles.dropupOptionsContainerStyle
                : this.calculateDropdownPosition();
        };
        AdvancedDropdown.prototype.hasPlaceToDropDown = function () {
            return (this.mainInput.getBoundingClientRect().top + 250 - window.innerHeight) < 0;
        };
        AdvancedDropdown.prototype.calculateDropdownPosition = function () {
            return {
                top: this.mainInput.getBoundingClientRect().top +
                    this.mainInput.getBoundingClientRect().height
                    + 5 + "px"
            };
        };
        AdvancedDropdown.prototype.handleCheckAllOptions = function (option, newOptions) {
            var checkAllOptionIndex = this.props.checkAllOptionIndex;
            var index = this.state.options.indexOf(option);
            if (!(checkAllOptionIndex >= 0)) {
                return;
            }
            index == checkAllOptionIndex
                ? this.checkAllOptions(newOptions)
                : option.checked
                    ? newOptions.filter(function (option) { return (option.checked); }).length == (newOptions.length - 1) && (newOptions[this.props.checkAllOptionIndex].checked = true)
                    : newOptions[this.props.checkAllOptionIndex].checked = false;
        };
        AdvancedDropdown.prototype.checkAllOptions = function (options) {
            var _this = this;
            var checked = !options[this.props.checkAllOptionIndex].checked;
            options.filter(function (option) { return (option.checked == checked); }).forEach(function (option) { return _this.checkOption(option, options); });
        };
        AdvancedDropdown.prototype.simulateSpaceBehaviorOnEnterKeyDown = function () {
            var isAllOptionsSelectable = typeof this.props.checkAllOptionIndex !== 'undefined';
            var _a = this.state, focusIndex = _a.focusIndex, options = _a.options;
            if (!isAllOptionsSelectable) {
                return;
            }
            if (focusIndex - 1 === 0) {
                this.handleCheckAllOptions(options[0], options);
            }
            else if (focusIndex - 1 > 0) {
                var optionsLength = this.getActiveOptions().length;
                var isAllOptionsWithoutFirstActive = this.getActiveOptions()
                    .filter(function (option, index) { return index > 0 && option.checked === true; });
                if (isAllOptionsWithoutFirstActive.length === optionsLength - 1) {
                    this.checkOptionOnIndex(0);
                }
                else {
                    options[0].checked = false;
                }
            }
        };
        AdvancedDropdown.prototype.scrollToOption = function (index) {
            var simpleOptions = this.optionsListDOM.children;
            var option = simpleOptions[index - 1];
            if (option.scrollIntoViewIfNeeded) {
                option.scrollIntoViewIfNeeded(false);
            }
            else {
                option.scrollIntoView();
            }
        };
        AdvancedDropdown.prototype.render = function () {
            var _this = this;
            var _a = this.props, label = _a.label, simpleStyle = _a.simpleStyle, disabled = _a.disabled;
            var leftIcon = this.renderLeftIcon();
            var labelEl = label ?
                React.createElement("label", { className: "control-label" }, label) : '';
            var formGroupStyle = __assign({}, styles_5.styles.formGroup, (this.state.isFocused ? styles_5.styles.formGroupFocused : null), (disabled ? styles_5.styles.formGroupDisabled : null));
            var inputElementStyle = __assign({}, (simpleStyle || !leftIcon ? styles_5.styles.inputElementSimple : styles_5.styles.inputElement), (disabled ? styles_5.styles.inputElementDisabled : null));
            return (React.createElement("div", { style: styles_5.styles.advancedDropdown, className: "advanced-dropdown-component" },
                labelEl,
                React.createElement("div", { className: "form-control", style: formGroupStyle },
                    !disabled && this.renderDropdownContainer(),
                    leftIcon,
                    React.createElement("input", { style: inputElementStyle, type: "text", readOnly: true, disabled: disabled, onKeyDown: this.onInputKeyDown.bind(this), onFocus: this.handleOnFocus.bind(this), onBlur: this.handleOnBlur.bind(this), placeholder: this.getDisplayValue(this.state.options), onClick: this.toggleOptionsVisibility, ref: function (input) { return _this.mainInput = input; } }),
                    this.renderRightIcon())));
        };
        AdvancedDropdown.getDerivedStateFromProps = function (props, state) {
            var options = props.options, checkAllOptionIndex = props.checkAllOptionIndex;
            if (options !== state.options) {
                AdvancedDropdown.checkAllDisabledOptions(options);
                checkAllOptionIndex >= 0 && options.filter(function (option) { return (option.checked); }).length == (options.length - 1) && (options[checkAllOptionIndex].checked = true);
                return __assign({}, state, { options: options });
            }
            return state;
        };
        return AdvancedDropdown;
    }(React.Component));
    exports.default = AdvancedDropdown;
});
///<amd-module name="sabre-ngv-UIComponents/popover/interfaces/PopoverOptions" />
/// <ngv scope="public" />
define("sabre-ngv-UIComponents/popover/interfaces/PopoverOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/popover/interfaces/PopoverConfiguration" />
/// <ngv scope="public" />
define("sabre-ngv-UIComponents/popover/interfaces/PopoverConfiguration", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/popover/components/reposition", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name="sabre-ngv-UIComponents/popover/components/reposition" />
    /// <ngv scope='public' />
    /**
     * Reposition popover e.g. when window was resized
     *
     * Due to the fact that 'body' is popover's container,
     * we need to calculate the position manually
     */
    exports.reposition = function (content, senderDomElement) {
        var sender = getSender(senderDomElement);
        var popover = $(content).closest('.popover');
        if (!(sender && popover.length)) {
            return;
        }
        setPopoverLeftOffset(sender, popover);
        setArrowLeftOffset(sender, popover);
        adjustVertically(popover);
    };
    var getSender = function (senderDomElement) {
        return senderDomElement.is(':visible')
            ? senderDomElement
            : $('.more-button');
    }; // safe default
    var setPopoverLeftOffset = function (sender, popover) {
        var offset = sender.offset().left + (sender.outerWidth() / 2) - (popover.width() / 2);
        var left = offset < 0
            ? -10
            : offset;
        popover.css({ left: left });
    };
    var setArrowLeftOffset = function (sender, popover) {
        var left = sender.offset().left + 10 + (sender.outerWidth() / 2) - popover.offset().left;
        var arrow = popover.find('.arrow');
        arrow.css({ left: left });
    };
    var adjustVertically = function (popover) {
        // 65px = areaTabs + areaIn height
        return $('.area-in').position().top > 65
            ? popover.removeClass('bottom').addClass('top')
            : popover.removeClass('top').addClass('bottom');
    };
});
///<amd-module name="sabre-ngv-UIComponents/popover/components/Popover" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/popover/components/Popover", ["require", "exports", "underscore", "sabre-ngv-app/app/widgets/console/AreaInView", "sabre-ngv-app/app/services/impl/TemplatesService", "sabre-ngv-UIComponents/commandHelperButton/components/ButtonEvents", "sabre-ngv-UIComponents/Context", "sabre-ngv-UIComponents/popover/components/reposition"], function (require, exports, _, AreaInView_1, TemplatesService_1, ButtonEvents_2, Context_3, reposition_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Popover = (function () {
        function Popover(_a) {
            var popoverGroup = _a.popoverGroup, sender = _a.sender, content = _a.content, parentEventBus = _a.parentEventBus, parentPopoverClass = _a.parentPopoverClass, extraContentClass = _a.extraContentClass, _b = _a.container, container = _b === void 0 ? 'body' : _b, _c = _a.placement, placement = _c === void 0 ? 'auto' : _c;
            // we need to track the state because bootstrap returns from 'hide()' and closing 'toggle()'
            // earlier than actual DOM element is hidden, so we cannot rely on :hidden property
            this.isPopoverVisible = false;
            this.sender = null;
            this.popoverGroup = popoverGroup;
            this.sender = sender;
            this.content = content;
            this.parentEventBus = parentEventBus;
            this.extraContentClass = extraContentClass;
            this.parentPopoverClass = parentPopoverClass;
            this.popoverConfiguration = {
                // we are handling all the interactions ourselves, turn off default bootstrap
                trigger: 'manual',
                html: Popover.HTML_POPOVER_MODE,
                content: this.content.getDomElement(),
                container: container,
                placement: placement,
                template: this.generateTemplate()
            };
        }
        Popover.prototype.generateTemplate = function () {
            return Context_3.getService(TemplatesService_1.TemplatesService)
                .createTemplateByName('sabre-ngv-UIComponents:Popover')(this.getDataForTemplate());
        };
        Popover.prototype.getDataForTemplate = function () {
            return {
                parentPopoverClass: 'novice-menu-popover fade bottom in'
            };
        };
        Popover.prototype.initializeBootstrapPopover = function () {
            // const bootstrapPopoverShownEvent = 'shown.bs.popover';
            // event moved before paint to avoid
            // 'first paint over another popover, then hide the other' case
            this.parentEventBus.trigger(ButtonEvents_2.ButtonEvents.POPOVER_SHOWN);
            this.getPopoverRootElement().popover(this.popoverConfiguration);
        };
        Popover.prototype.getPopoverRootElement = function () {
            return this.sender.$el;
        };
        /**
         * @fires 'shown-popover'
         */
        Popover.prototype.handleShownPopover = function () {
            this.parentEventBus.trigger(ButtonEvents_2.ButtonEvents.POPOVER_SHOWN);
        };
        Popover.prototype.show = function () {
            if (this.isPopoverVisible) {
                return;
            }
            // due to the way popups are initialized by bootstrap we need to wait
            // with actual initialization as long as possible
            this.initializeBootstrapPopover();
            this.showPopover();
            this.addFocusToFirstElement();
            this.reposition();
            // handle React component
            if (_.isFunction(this.content.mount)) {
                this.content.mount();
            }
        };
        Popover.prototype.showPopover = function () {
            this.getPopoverRootElement().popover('show');
            this.isPopoverVisible = true;
        };
        Popover.prototype.addFocusToFirstElement = function () {
            // first handle content with tabs (e.g. Air shopping)
            if (_.isFunction(this.content.handleFocusLostOnButtonEvent)) {
                return this.content.handleFocusLostOnButtonEvent();
            }
            // then handle content === form (e.g. Cars)
            if (_.isFunction(this.content.focusFirstElement)) {
                return this.content.focusFirstElement();
            }
            return false;
        };
        Popover.prototype.reposition = function () {
            if (!this.isPopoverVisible) {
                return;
            }
            if (_.isFunction(this.content.getDomElement)) {
                var content = this.content.getDomElement();
                reposition_1.reposition(content, this.getPopoverRootElement());
            }
        };
        Popover.prototype.toggle = function () {
            this.isPopoverVisible
                ? this.hide()
                : this.show();
        };
        Popover.prototype.hide = function () {
            // due to event reassignment problem in child content
            // we need to handle hide & toggle ourselves.
            // We destroy popover each time it disappears and we recreate it
            // every time we want to show it
            this.destroy();
        };
        Popover.prototype.destroy = function () {
            // handle React content
            if (_.isFunction(this.content.unmount)) {
                this.content.unmount();
            }
            this.isPopoverVisible = false;
            this.getPopoverRootElement().popover('destroy');
            this.parentEventBus.trigger(ButtonEvents_2.ButtonEvents.POPOVER_DESTROYED);
        };
        Popover.prototype.isVisible = function () {
            return this.isPopoverVisible;
        };
        Popover.prototype.isFadedIn = function () {
            return this.getPopoverRootElement().hasClass('in'); // parents('.popover').
        };
        Popover.prototype.handleHidePopovers = function (group) {
            if (this.popoverGroup === group) {
                this.hide();
            }
        };
        Popover.prototype.handleMorphingLayout = function (caller) {
            if (!(caller && caller.el)) {
                return;
            }
            // the source of the event is an Area object
            // which means the window size has changed
            if (caller.el.widget instanceof AreaInView_1.AreaInView) {
                this.hide();
            }
        };
        // TODO fixme
        Popover.prototype.hidePopoverIfOtherOpenedInGroup = function (eventSource) {
            if (eventSource !== 'ProfilesHack') {
                this.hide();
            }
        };
        return Popover;
    }());
    Popover.HTML_POPOVER_MODE = true;
    exports.default = Popover;
});
define("sabre-ngv-UIComponents/commandHelperButton/components/AbstractBootstrapPopoverButton", ["require", "exports", "sabre-ngv-UIComponents/commandHelperButton/components/AbstractPopoverButton", "sabre-ngv-UIComponents/commandHelperButton/components/ButtonEvents", "sabre-ngv-UIComponents/popover/components/Popover", "sabre-ngv-UIComponents/commandHelperButton/components/PopoverGroups"], function (require, exports, AbstractPopoverButton_1, ButtonEvents_3, Popover_1, PopoverGroups_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Specific button using Bootstrap popover lib to show forms.
     *
     * All event handlers are protected, implement them at will.
     */
    var AbstractBootstrapPopoverButton = (function (_super) {
        __extends(AbstractBootstrapPopoverButton, _super);
        function AbstractBootstrapPopoverButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbstractBootstrapPopoverButton.prototype.initialize = function (options) {
            _super.prototype.initialize.call(this, options);
            this.sender = this;
            this.registerExtendedGlobalEvents();
            this.registerExtendedLocalEvents();
        };
        AbstractBootstrapPopoverButton.prototype.registerExtendedGlobalEvents = function () {
            this.listenToEventBus('response-received', this.handleResponseReceived.bind(this));
            this.listenToEventBus('prepare-request', this.handleGlobalPrepareRequestEvent.bind(this));
        };
        AbstractBootstrapPopoverButton.prototype.handleResponseReceived = function (response) {
        };
        AbstractBootstrapPopoverButton.prototype.handleGlobalPrepareRequestEvent = function (command) {
        };
        AbstractBootstrapPopoverButton.prototype.registerExtendedLocalEvents = function () {
            this.eventBus.on(ButtonEvents_3.ButtonEvents.CANCEL_REQUESTED, this.handleCancelRequested.bind(this));
            this.eventBus.on(ButtonEvents_3.ButtonEvents.SUBMIT_REQUESTED, this.handleDataPreparedForSubmit.bind(this));
        };
        AbstractBootstrapPopoverButton.prototype.handleCancelRequested = function () {
            this.close();
        };
        AbstractBootstrapPopoverButton.prototype.handleDataPreparedForSubmit = function (data) {
        };
        AbstractBootstrapPopoverButton.prototype.getView = function () {
            if (!this.popover) {
                this.popover = new Popover_1.default({
                    popoverGroup: PopoverGroups_2.PopoverGroups.Novice,
                    sender: this.sender,
                    content: this.getContent(),
                    parentEventBus: this.eventBus,
                    parentPopoverClass: 'novice-menu-popover'
                });
            }
            return this.popover;
        };
        return AbstractBootstrapPopoverButton;
    }(AbstractPopoverButton_1.default));
    exports.default = AbstractBootstrapPopoverButton;
});
///<amd-module name="sabre-ngv-UIComponents/contextMenu/components/ReactContextMenu" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/contextMenu/components/ReactContextMenu", ["require", "exports", "react-contextmenu", "sabre-ngv-app/app/services/impl/AreaOutViewService", "sabre-ngv-UIComponents/Context", "sabre-ngv-sidepanel/services/ISidepanelService"], function (require, exports, react_contextmenu_1, AreaOutViewService_1, Context_4, ISidepanelService_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ReactContextMenu = (function (_super) {
        __extends(ReactContextMenu, _super);
        function ReactContextMenu() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReactContextMenu.prototype.calculatePosition = function (position) {
            this.setState({ 'isVisible': false });
            var isWideMode = Context_4.getService(ISidepanelService_1.ISidepanelService).isWideMode();
            var endPosition = (position.x + this.menu.getBoundingClientRect().width);
            var havePlaceOnLeft = !!(position.x - this.menu.getBoundingClientRect().width >= 0);
            if (endPosition > this.getBreakPoint(isWideMode) && havePlaceOnLeft) {
                this.setPosition(position);
            }
            this.setState({ isVisible: true });
        };
        ReactContextMenu.prototype.getBreakPoint = function (isWideModeEnabled) {
            var WIDE_SIDEPANEL_WIDTH = 467;
            var STANDARD_SIDEPANEL_WIDTH = 288;
            var containerSize = Context_4.getService(AreaOutViewService_1.AreaOutViewService).getActivePartitionContainer().width();
            return isWideModeEnabled
                ? containerSize - WIDE_SIDEPANEL_WIDTH
                : containerSize - STANDARD_SIDEPANEL_WIDTH;
        };
        ReactContextMenu.prototype.setPosition = function (position) {
            var newPosition = position.x - this.menu.getBoundingClientRect().width;
            this.setState({ x: newPosition });
        };
        return ReactContextMenu;
    }(react_contextmenu_1.ContextMenu));
    exports.default = ReactContextMenu;
});
///<amd-module name="sabre-ngv-UIComponents/contextMenu/interfaces/ContextMenuItemDescription" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/contextMenu/interfaces/ContextMenuItemDescription", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/contextMenu/interfaces/ContextMenuProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/contextMenu/interfaces/ContextMenuProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/contextMenu/interfaces/ContextMenuState" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/contextMenu/interfaces/ContextMenuState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/fragment/components/Fragment", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // PLEASE UNCOMMENT: Following line should be uncommented when React typings will be updated
    // const Fragment = React.Fragment;
    // PLEASE REMOVE: Following line can be removed when React typings will be updated up to v.16.4
    var Fragment = React['Fragment'];
    exports.default = Fragment;
});
///<amd-module name="sabre-ngv-UIComponents/contextMenu/components/ContextMenu" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/contextMenu/components/ContextMenu", ["require", "exports", "react", "underscore", "classnames", "react-contextmenu", "sabre-ngv-UIComponents/contextMenu/components/ReactContextMenu", "sabre-ngv-UIComponents/fragment/components/Fragment"], function (require, exports, React, underscore_1, classNames, react_contextmenu_2, ReactContextMenu_1, Fragment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ContextMenu = (function (_super) {
        __extends(ContextMenu, _super);
        function ContextMenu(props) {
            var _this = _super.call(this, props) || this;
            _this.id = underscore_1.uniqueId();
            _this.state = {
                leftPosition: undefined
            };
            _this.handleShowMenu = _this.handleShowMenu.bind(_this);
            return _this;
        }
        ContextMenu.prototype.handleShowMenu = function (event) {
            var position = event.detail.position;
            this.contextMenuRef.calculatePosition(position);
            this.props.onShow && this.props.onShow(event);
        };
        ContextMenu.prototype.createMenuItem = function (itemDescription, index) {
            var text = itemDescription.text, icon = itemDescription.icon, callback = itemDescription.callback;
            return (React.createElement(react_contextmenu_2.MenuItem, { key: index, data: { index: index }, onClick: callback, attributes: { className: 'context-menu-item' } },
                React.createElement("i", { className: "fa " + icon }),
                React.createElement("span", null, text)));
        };
        ;
        ContextMenu.prototype.render = function () {
            var _this = this;
            var _a = this.props, children = _a.children, menuClassName = _a.menuClassName, menuItems = _a.menuItems, onHide = _a.onHide, wrapperClassName = _a.wrapperClassName;
            return (React.createElement(Fragment_1.default, null,
                React.createElement(react_contextmenu_2.ContextMenuTrigger, { id: this.id, attributes: { className: classNames((_b = {}, _b[wrapperClassName] = wrapperClassName, _b)) } }, children),
                React.createElement(ReactContextMenu_1.default, { id: this.id, className: classNames('context-menu-react', (_c = {}, _c[menuClassName] = menuClassName, _c)), onHide: onHide, onShow: this.handleShowMenu, ref: function (ref) { return _this.contextMenuRef = ref; } }, menuItems.map(this.createMenuItem))));
            var _b, _c;
        };
        return ContextMenu;
    }(React.Component));
    exports.default = ContextMenu;
});
define("sabre-ngv-UIComponents/endPnrButton/interfaces/EndPnrButtonProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/endPnrButton/components/EndPnrButton", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EndPnrButton = (function (_super) {
        __extends(EndPnrButton, _super);
        function EndPnrButton(props) {
            var _this = _super.call(this, props) || this;
            if (props.onInitialize) {
                props.onInitialize.apply(_this);
            }
            _this.state = {
                isDisabled: props.isDisabled,
                buttonText: props.buttonText,
                buttonCommandHint: props.buttonCommandHint,
                buttonDescription: props.buttonDescription,
                commandFlow: props.commandFlow
            };
            return _this;
        }
        EndPnrButton.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps.isDisabled !== this.state.isDisabled) {
                this.setState({ isDisabled: nextProps.isDisabled });
            }
        };
        EndPnrButton.prototype.onClick = function () {
            if (!this.state.isDisabled && this.props.onClick) {
                this.props.onClick.apply(this);
            }
        };
        EndPnrButton.prototype.getClassName = function () {
            var className = 'btn-pnr';
            if (this.state.commandFlow) {
                className += ' js_btn-pnr';
            }
            if (this.state.isDisabled) {
                className += ' disabled';
            }
            return className;
        };
        EndPnrButton.prototype.render = function () {
            return (React.createElement("li", { onClick: this.state.isDisabled ? null : this.onClick.bind(this), className: this.getClassName(), id: 'pnr-btn-' + this.state.commandFlow },
                React.createElement("span", null, this.state.buttonText),
                React.createElement("b", { className: 'cmd-hint' }, this.state.buttonCommandHint),
                React.createElement("p", { className: 'cmd-desc' }, this.state.buttonDescription)));
        };
        return EndPnrButton;
    }(React.Component));
    exports.default = EndPnrButton;
});
define("sabre-ngv-UIComponents/select/interfaces/Option", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/select/interfaces/SelectProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/select/interfaces/SelectState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/select/components/Select", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Select = (function (_super) {
        __extends(Select, _super);
        function Select(props) {
            var _this = _super.call(this) || this;
            _this.state = {
                options: props.options || [],
                value: props.value
            };
            _this.handleChange = _this.handleChange.bind(_this);
            return _this;
        }
        Select.prototype.componentWillReceiveProps = function (nextProps) {
            if (this.props.value !== nextProps.value) {
                this.setState({ value: nextProps.value });
            }
        };
        Select.prototype.handleChange = function (event) {
            var value = event.currentTarget.value;
            this.setState({ value: value });
            this.props.onChange(value);
        };
        Select.prototype.renderOptions = function () {
            var options = this.state.options;
            if (!options) {
                return;
            }
            var optionElements = options.map(function (option) {
                return React.createElement("option", { key: option.value, value: option.value, disabled: option.isDisabled }, option.label === undefined ? option.value : option.label);
            });
            if (this.props.placeholder) {
                optionElements = [
                    React.createElement("option", { value: '', disabled: true, hidden: true, key: 'PLACEHOLDER' }, this.props.placeholder)
                ].concat(optionElements);
            }
            return optionElements;
        };
        Select.prototype.handleKeyDown = function (e) {
            var char = String.fromCharCode(e.keyCode);
            if (!this.state.options) {
                return;
            }
            // Set value based on key pressed
            var option = this.state.options.find(function (option) {
                var optionVal = ('' + option.value)[0];
                return optionVal === char;
            });
            if (option) {
                this.setState({ value: option.value });
                this.props.onChange(option.value);
            }
        };
        Select.prototype.render = function () {
            return (React.createElement("select", { name: this.props.name, value: this.state.value, onKeyDown: this.handleKeyDown.bind(this), onChange: this.handleChange, className: this.props.selectClass }, this.renderOptions()));
        };
        return Select;
    }(React.Component));
    exports.default = Select;
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/interfaces/State" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/interfaces/State", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/components/storeUtils" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/components/storeUtils", ["require", "exports", "redux"], function (require, exports, redux_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Initialize component store with the initial state (set in root reducer)
     */
    exports.initializeStore = function (storeName, rootReducer, middlewares) {
        if (middlewares === void 0) { middlewares = []; }
        return redux_1.createStore(rootReducer, getStoreEnhancer(storeName, middlewares));
    };
    /**
     * For development: register store in Chrome devtools Redux plugin middleware.
     * Register other provided Redux store middlewares
     */
    var getStoreEnhancer = function (storeName, middlewares) {
        var storeMiddlewares = setupDevToolsMiddlewareIfAvailible(storeName);
        return storeMiddlewares(redux_1.applyMiddleware.apply(void 0, middlewares));
    };
    /**
     * Redux DevTools plugin substitutes Redux#compose
     */
    var setupDevToolsMiddlewareIfAvailible = function (storeName) {
        var reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;
        if (typeof reduxDevTools === 'undefined') {
            return redux_1.compose;
        }
        else {
            // we need storeName for identifying our store in DevTools dropdown
            return reduxDevTools({ name: storeName });
        }
    };
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/interfaces/ComponentProps" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/interfaces/ComponentProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/interfaces/ComponentOptions" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/interfaces/ComponentOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/interfaces/Mountable" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/interfaces/Mountable", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/components/StatelessComponent" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/components/StatelessComponent", ["require", "exports", "react", "react-dom", "sabre-ngv-app/app/AbstractView"], function (require, exports, React, ReactDOM, AbstractView_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Base class for stateless module-level components ready to be used in application context.
     * Implements 'Mountable' methods for use in Backbone context.
     *
     * Used as a base class for Stateful*Component classes
     */
    var StatelessComponent = (function () {
        function StatelessComponent(options) {
            this.options = options;
            this.DEFAULT_WRAPPER_TYPE = 'div';
            this.domWrapperElement = this.createDomWrapper();
            this.rootReactComponent = this.getRootReactComponent();
        }
        StatelessComponent.prototype.createDomWrapper = function () {
            var componentWrapper = this.options.componentWrapperType ||
                this.DEFAULT_WRAPPER_TYPE;
            return document.createElement(componentWrapper);
        };
        StatelessComponent.prototype.getRootReactComponent = function () {
            if (typeof this.options.rootReactComponent === 'undefined') {
                throw new Error('No React child component provided');
            }
            return this.options.rootReactComponent;
        };
        /**
         * Build recursive view starting with the root element.
         */
        StatelessComponent.prototype.mount = function () {
            ReactDOM.render(React.createElement(this.rootReactComponent, { componentName: this.options.componentName }), this.domWrapperElement);
        };
        /**
         * Unmount component from wrapper:
         * needed sometimes when the wrapper is manipulated from outside
         * (jQuery#remove, popover cleanup etc.)
         */
        StatelessComponent.prototype.unmount = function () {
            ReactDOM.unmountComponentAtNode(this.domWrapperElement);
        };
        /**
         * Returns the component fully initialized, with store set up and wired
         * (if in Stateful* child class).
         * The component is wrapped in the bridge so it can be used by AbstractView parent
         * as a regular Backbone widget.
         *
         * @returns {AbstractView}
         */
        StatelessComponent.prototype.getAsWidget = function () {
            if (!this.bridgedComponent) {
                this.bridgedComponent = new AbstractView_1.AbstractView(); // FIXME: here will a bridge come when ready
            }
            return this.bridgedComponent;
        };
        /**
         * Returns the React Root component, without Redux binding.
         * Use when you want to plug this component in your React structure
         * with Redux already plug in somewhere up.
         *
         * @returns {React.ComponentClass<ComponentProps>}
         */
        StatelessComponent.prototype.getAsComponent = function () {
            return this.rootReactComponent;
        };
        /**
         * Return reference to the wrapper element.
         * Will be used by a parent to mount the component in its DOM node.
         *
         * @returns {HTMLElement}
         */
        StatelessComponent.prototype.getDomElement = function () {
            return this.domWrapperElement;
        };
        /**
         * Clean up your stuff before leaving
         */
        StatelessComponent.prototype.dispose = function () {
            this.unmount();
        };
        return StatelessComponent;
    }());
    exports.default = StatelessComponent;
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/interfaces/StatefulComponentOptions" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/interfaces/StatefulComponentOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/components/StatefulComponent" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/components/StatefulComponent", ["require", "exports", "react", "react-dom", "react-redux", "sabre-ngv-UIComponents/baseComponent/components/storeUtils", "sabre-ngv-UIComponents/baseComponent/components/StatelessComponent"], function (require, exports, React, ReactDOM, react_redux_1, storeUtils_1, StatelessComponent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Base class for stateful module-level components ready to be used in application context.
     * Sets up store and connects it with provided React Component.
     * Implements 'Mountable' methods for use in Backbone context.
     */
    var StatefulComponent = (function (_super) {
        __extends(StatefulComponent, _super);
        function StatefulComponent(options) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            _this.store = _this.createStore();
            return _this;
        }
        StatefulComponent.prototype.createStore = function () {
            var middlewares = this.options.middlewares || [];
            return storeUtils_1.initializeStore(this.options.componentName, this.getRootReducer(), middlewares);
        };
        StatefulComponent.prototype.getRootReducer = function () {
            if (typeof this.options.rootReducer === 'undefined') {
                throw new Error('No Root Reducer provided');
            }
            return this.options.rootReducer;
        };
        /**
         * Build recursive view starting with the root element. Bind Redux store to the view.
         */
        StatefulComponent.prototype.mount = function () {
            ReactDOM.render(React.createElement(react_redux_1.Provider, { store: this.store },
                React.createElement(this.rootReactComponent, { componentName: this.options.componentName })), this.domWrapperElement);
        };
        /**
         * Allow parent of this component to pass a command for updating data etc.
         * The only way to update state of a component is to dispatch an Action on its store.
         *
         * @param action {Action}
         */
        StatefulComponent.prototype.dispatch = function (action) {
            this.store.dispatch(action);
        };
        /**
         * Clean up your stuff before leaving
         */
        StatefulComponent.prototype.dispose = function () {
            // no need to clean up the store here,
            // native JS GC will take care of the store when you dereference this content object
            this.unmount();
        };
        return StatefulComponent;
    }(StatelessComponent_1.default));
    exports.default = StatefulComponent;
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/interfaces/StatefulComponentWithSagaOptions" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/interfaces/StatefulComponentWithSagaOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/components/StatefulComponentWithSaga" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/components/StatefulComponentWithSaga", ["require", "exports", "redux-saga", "sabre-ngv-UIComponents/baseComponent/components/storeUtils", "sabre-ngv-UIComponents/baseComponent/components/StatefulComponent"], function (require, exports, redux_saga_1, storeUtils_2, StatefulComponent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Due to a special way Saga Middleware is initialized (it must be run() when store is ready)
     * and to avoid any overhead of Sagas initialized in a context that does not need them
     * we have excluded this functionality to a separate, special case class.
     */
    var StatefulComponentWithSaga = (function (_super) {
        __extends(StatefulComponentWithSaga, _super);
        function StatefulComponentWithSaga(options) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            _this.store = _this.createStore();
            return _this;
        }
        StatefulComponentWithSaga.prototype.createStore = function () {
            var _a = this.prepareMiddlewares(), middlewares = _a.middlewares, sagaMiddleware = _a.sagaMiddleware;
            var store = storeUtils_2.initializeStore(this.options.componentName, this.getRootReducer(), middlewares);
            sagaMiddleware.run(this.getRootSaga(), this.options.parentEventBus);
            return store;
        };
        StatefulComponentWithSaga.prototype.getRootSaga = function () {
            if (typeof this.options.rootSaga === 'undefined') {
                throw new Error('No Root Saga provided');
            }
            return this.options.rootSaga;
        };
        StatefulComponentWithSaga.prototype.prepareMiddlewares = function () {
            var middlewares = this.options.middlewares || [];
            var sagaMiddleware = redux_saga_1.default(); // : <any>SagaMiddleware
            middlewares.unshift(sagaMiddleware);
            return { middlewares: middlewares, sagaMiddleware: sagaMiddleware };
        };
        return StatefulComponentWithSaga;
    }(StatefulComponent_1.default));
    exports.default = StatefulComponentWithSaga;
});
define("sabre-ngv-UIComponents/advancedDropdown/utils/alphaSort", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Sorting function, to sort options alphabetically by label.
     * @param a
     * @param b
     * @returns {number}
     */
    function alphaSort(a, b) {
        var labelA = a.label.toUpperCase();
        var labelB = b.label.toUpperCase();
        if (labelA < labelB) {
            return -1;
        }
        if (labelA > labelB) {
            return 1;
        }
        return 0;
    }
    exports.alphaSort = alphaSort;
});
define("sabre-ngv-UIComponents/flexGrid/styles/styles", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var styles = {
        row: {
            display: 'flex',
            alignItems: 'flex-start',
            flexWrap: 'nowrap'
        },
        col: {
            flex: '1',
            width: '100%'
        }
    };
    exports.styles = styles;
});
define("sabre-ngv-UIComponents/flexGrid/interfaces/FlexGridElement", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/flexGrid/interfaces/FlexGridRow", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/flexGrid/interfaces/FlexGridProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/flexGrid/components/FlexGrid", ["require", "exports", "react", "sabre-ngv-UIComponents/flexGrid/styles/styles"], function (require, exports, React, styles_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function FlexGrid(props) {
        return (React.createElement("div", null, props.rows.map(function (row) { return (React.createElement("div", { key: row.key, style: styles_6.styles.row }, row.elements.map(function (element) { return (React.createElement("div", { key: element.key, style: styles_6.styles.col }, element.component)); }))); })));
    }
    exports.FlexGrid = FlexGrid;
});
define("sabre-ngv-UIComponents/icon/interfaces/IconProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/icon/components/Icon", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function Icon(props) {
        return (React.createElement("i", { className: "fa " + props.name, style: props.style }));
    }
    exports.Icon = Icon;
});
define("sabre-ngv-UIComponents/advancedDropdown/utils/simpleOptionRenderer", ["require", "exports", "react", "sabre-ngv-UIComponents/advancedDropdown/styles/styles"], function (require, exports, React, styles_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function SimpleOption(rendererOptions) {
        var _this = this;
        var isFocused = rendererOptions.isFocused, option = rendererOptions.option, handleChange = rendererOptions.handleChange;
        var value = option.value, disabled = option.disabled, hover = option.hover, checked = option.checked, label = option.label;
        var focusClassName = isFocused ? 'focus' : '';
        var selectedClassName = checked ? 'selected' : '';
        var disabledClassName = disabled ? 'disabled' : '';
        var hoverClassName = hover ? 'hover' : '';
        return (React.createElement("label", { style: __assign({}, styles_7.styles.optionSimpleStyle, (disabled ? styles_7.styles.optionDisabledStyle : {})), className: "simple-option " + selectedClassName + " " + focusClassName + " " + disabledClassName + " " + hoverClassName, onClick: function () { return !disabled && handleChange.call(_this, (option)); }, ref: function (input) { return input && isFocused && input.focus(); } }, rendererOptions.children));
    }
    exports.SimpleOption = SimpleOption;
    function simpleOptionRenderer(rendererOptions) {
        return React.createElement(SimpleOption, __assign({}, rendererOptions), rendererOptions.option.label);
    }
    exports.simpleOptionRenderer = simpleOptionRenderer;
});
define("sabre-ngv-UIComponents/advancedDropdown/components/SimpleDropdown", ["require", "exports", "react", "sabre-ngv-UIComponents/advancedDropdown/components/AdvancedDropdown", "sabre-ngv-UIComponents/advancedDropdown/utils/simpleOptionRenderer"], function (require, exports, React, AdvancedDropdown_1, simpleOptionRenderer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function SimpleDropdown(_a) {
        var _b = _a.isMulti, isMulti = _b === void 0 ? false : _b, _c = _a.isSearchable, isSearchable = _c === void 0 ? false : _c, _d = _a.leftIcon, leftIcon = _d === void 0 ? null : _d, _e = _a.rightIcon, rightIcon = _e === void 0 ? 'fa-caret-down' : _e, _f = _a.rightIconOpen, rightIconOpen = _f === void 0 ? 'fa-caret-up' : _f, _g = _a.minCharactersForSearch, minCharactersForSearch = _g === void 0 ? 9 : _g, _h = _a.closeOnChange, closeOnChange = _h === void 0 ? true : _h, _j = _a.mandatory, mandatory = _j === void 0 ? true : _j, _k = _a.optionRenderer, optionRenderer = _k === void 0 ? simpleOptionRenderer_1.simpleOptionRenderer : _k, _l = _a.isFocusOnFirstOption, isFocusOnFirstOption = _l === void 0 ? false : _l, _m = _a.simpleStyle, simpleStyle = _m === void 0 ? true : _m, _o = _a.isFocusOnMainInput, isFocusOnMainInput = _o === void 0 ? false : _o, onChange = _a.onChange, placeholder = _a.placeholder, dropup = _a.dropup, options = _a.options, fixedPosition = _a.fixedPosition, hideSearchPlaceholder = _a.hideSearchPlaceholder, hideSearchIcon = _a.hideSearchIcon;
        return React.createElement(AdvancedDropdown_1.default, __assign({}, ({
            isMulti: isMulti,
            isSearchable: isSearchable,
            leftIcon: leftIcon,
            rightIcon: rightIcon,
            rightIconOpen: rightIconOpen,
            minCharactersForSearch: minCharactersForSearch,
            closeOnChange: closeOnChange,
            fixedPosition: fixedPosition,
            mandatory: mandatory,
            isFocusOnFirstOption: isFocusOnFirstOption,
            optionRenderer: optionRenderer,
            simpleStyle: simpleStyle,
            onChange: onChange,
            placeholder: placeholder,
            dropup: dropup,
            options: options,
            hideSearchPlaceholder: hideSearchPlaceholder,
            hideSearchIcon: hideSearchIcon,
            isFocusOnMainInput: isFocusOnMainInput
        })));
    }
    exports.SimpleDropdown = SimpleDropdown;
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/OptionState" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/OptionState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/OptionStateCollection" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/OptionStateCollection", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OptionStateCollection = (function () {
        function OptionStateCollection() {
        }
        OptionStateCollection.setAllCheckedToFalse = function (collection) {
            collection.forEach(function (option) { return option.checked = false; });
        };
        OptionStateCollection.checkByValue = function (collection, value) {
            var index = OptionStateCollection.getIndexForValue(collection, value);
            if (index !== -1) {
                collection[index].checked = true;
            }
        };
        OptionStateCollection.getIndexForValue = function (collection, value) {
            return collection.findIndex(function (option) { return option.value == value; });
        };
        OptionStateCollection.getCheckedIndex = function (collection) {
            return collection.findIndex(function (option) { return option.checked; });
        };
        OptionStateCollection.getCheckedValue = function (collection) {
            var checkedTimeIndex = OptionStateCollection.getCheckedIndex(collection);
            return checkedTimeIndex !== -1
                ? collection[checkedTimeIndex].value
                : null;
        };
        OptionStateCollection.getNextAvailableOption = function (collection, index) {
            var newIndex = index;
            if (newIndex >= collection.length) {
                newIndex = -1;
            }
            while (newIndex++ < collection.length - 1) {
                if (!collection[newIndex].disabled) {
                    return newIndex;
                }
            }
            return index;
        };
        OptionStateCollection.getPrevAvailableOption = function (collection, index) {
            var newIndex = index;
            if (newIndex >= collection.length) {
                newIndex = collection.length;
            }
            while (newIndex-- > 0) {
                if (!collection[newIndex].disabled) {
                    return newIndex;
                }
            }
            return index;
        };
        return OptionStateCollection;
    }());
    exports.OptionStateCollection = OptionStateCollection;
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectListProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectListProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectListState" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectListState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/ngv-form-inputs/subcomponents/SelectList/SelectList", ["require", "exports", "react", "sabre-ngv-UIComponents-utils/classMerge/classMerge", "sabre-ngv-UIComponents/ngv-form-inputs/OptionStateCollection"], function (require, exports, React, classMerge_1, OptionStateCollection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SelectListController = (function () {
        function SelectListController() {
        }
        return SelectListController;
    }());
    exports.SelectListController = SelectListController;
    var SelectList = (function (_super) {
        __extends(SelectList, _super);
        function SelectList(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {
                focusedOptionIndex: 0,
                hoveredByDefaultIndex: -1
            };
            return _this;
        }
        SelectList.prototype.setFocusOnPrevOption = function () {
            var currIndex = this.state.focusedOptionIndex;
            var newIndex = OptionStateCollection_1.OptionStateCollection.getPrevAvailableOption(this.props.options, currIndex);
            this.setFocusAtOption(newIndex);
        };
        SelectList.prototype.setFocusOnNextOption = function () {
            var currIndex = this.state.focusedOptionIndex;
            var newIndex = OptionStateCollection_1.OptionStateCollection.getNextAvailableOption(this.props.options, currIndex);
            this.setFocusAtOption(newIndex);
        };
        SelectList.prototype.getFocusedOptionIndex = function () {
            return this.state.focusedOptionIndex;
        };
        SelectList.prototype.getHoveredOptionIndex = function () {
            return this.state.hoveredByDefaultIndex;
        };
        SelectList.prototype.setFocusAtOption = function (index) {
            var _this = this;
            if (!this.props.options.length) {
                this.setState({
                    focusedOptionIndex: -1,
                    hoveredByDefaultIndex: -1
                });
                return;
            }
            this.setState({
                focusedOptionIndex: index,
                hoveredByDefaultIndex: -1
            }, function () {
                if (_this.selfNode) {
                    _this.selfNode.children[index].scrollIntoView();
                }
            });
        };
        ;
        SelectList.prototype.setHoverAtOption = function (index) {
            var _this = this;
            if (!this.props.options.length) {
                this.setState({
                    hoveredByDefaultIndex: -1
                });
                return;
            }
            this.setState({
                hoveredByDefaultIndex: index
            }, function () {
                if (_this.selfNode) {
                    _this.selfNode.children[index].scrollIntoView();
                }
            });
        };
        SelectList.prototype.componentDidMount = function () {
            var focusedIndex = OptionStateCollection_1.OptionStateCollection.getCheckedIndex(this.props.options);
            if (focusedIndex > -1) {
                this.setFocusAtOption(focusedIndex);
            }
        };
        SelectList.prototype.componentWillReceiveProps = function (props) {
            if (this.props.options.length !== props.options.length) {
                var index = OptionStateCollection_1.OptionStateCollection.getCheckedIndex(props.options);
                this.setState({
                    focusedOptionIndex: index,
                    hoveredByDefaultIndex: -1
                });
            }
        };
        SelectList.prototype.render = function () {
            var _this = this;
            return (React.createElement("div", { className: classMerge_1.classMerge('SelectList', this.props.className), ref: function (list) { return (_this.selfNode = list); } }, this.props.options.map(function (option, index) {
                return React.createElement("button", { tabIndex: -1, onMouseDown: _this.attachChooseAction(index), key: JSON.stringify(option), className: classMerge_1.classMerge({
                        checked: option.checked,
                        focus: index === _this.state.focusedOptionIndex,
                        hoveredByDefault: index === _this.state.hoveredByDefaultIndex,
                        main: option.main,
                        disabled: option.disabled
                    }) },
                    option.icon && React.createElement("i", { className: option.icon }),
                    option.html && option.html,
                    !option.html && option.label);
            })));
        };
        SelectList.prototype.attachChooseAction = function (index) {
            var _this = this;
            return function (event) {
                !_this.props.options[index].disabled && _this.props.controller.onElementChoose(index);
                event.preventDefault();
            };
        };
        return SelectList;
    }(React.Component));
    exports.SelectList = SelectList;
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SlotProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SlotProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/ngv-form-inputs/components/Slot/Slot", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function Slot(_a) {
        var children = _a.children, slot = _a.slot;
        var reactChildren = React.Children.toArray(children);
        var slotElement;
        slotElement = reactChildren.find(function (child) {
            return React.isValidElement(child) && child.props['data-slot'] === slot;
        });
        if (slotElement) {
            return React.cloneElement(slotElement);
        }
        else {
            return null;
        }
    }
    exports.Slot = Slot;
});
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/ActionEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <ngv scope="protected" />
    var ActionEvents;
    (function (ActionEvents) {
        ActionEvents[ActionEvents["ARROW_UP"] = 0] = "ARROW_UP";
        ActionEvents[ActionEvents["ARROW_DOWN"] = 1] = "ARROW_DOWN";
        ActionEvents[ActionEvents["ARROW_LEFT"] = 2] = "ARROW_LEFT";
        ActionEvents[ActionEvents["ARROW_RIGHT"] = 3] = "ARROW_RIGHT";
        ActionEvents[ActionEvents["ENTER"] = 4] = "ENTER";
        ActionEvents[ActionEvents["BACKSPACE"] = 5] = "BACKSPACE";
        ActionEvents[ActionEvents["DELETE"] = 6] = "DELETE";
        ActionEvents[ActionEvents["ESCAPE"] = 7] = "ESCAPE";
        ActionEvents[ActionEvents["TAB"] = 8] = "TAB";
        ActionEvents[ActionEvents["KEY"] = 9] = "KEY";
        ActionEvents[ActionEvents["OTHER"] = 10] = "OTHER";
        ActionEvents[ActionEvents["SPACE"] = 11] = "SPACE";
    })(ActionEvents = exports.ActionEvents || (exports.ActionEvents = {}));
    var eventsMap = [
        'ArrowUp',
        'ArrowDown',
        'ArrowLeft',
        'ArrowRight',
        'Enter',
        'Backspace',
        'Delete',
        'Escape',
        'Tab',
        'Key',
        'Other',
        ' ' //exception for space
    ];
    var ActionEvent = (function () {
        function ActionEvent(action, index) {
            this.detail = {};
            var key;
            var event = null;
            //is enum check
            if (typeof action === 'number') {
                key = eventsMap[action];
            }
            else if ('key' in action) {
                event = action;
                //handle space exceptional key value
                if (event.key.length === 1 && event.key !== ' ') {
                    action = ActionEvents.KEY;
                }
                else {
                    action = eventsMap.indexOf(event.key);
                    if (action === -1) {
                        action = ActionEvents.OTHER;
                    }
                }
                key = event.key;
            }
            else {
                key = null;
                event = action;
                action = ActionEvents.OTHER;
            }
            this.detail = {
                action: action,
                key: key,
                index: index,
                event: event
            };
        }
        Object.defineProperty(ActionEvent.prototype, "action", {
            get: function () {
                return this.detail.action;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionEvent.prototype, "index", {
            get: function () {
                return typeof this.detail.index === 'number'
                    ? this.detail.index
                    : null;
            },
            set: function (index) {
                this.detail.index = index;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionEvent.prototype, "key", {
            get: function () {
                return this.detail.key || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionEvent.prototype, "target", {
            get: function () {
                return (this.detail.event && this.detail.event.target) || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionEvent.prototype, "event", {
            get: function () {
                return this.detail.event || null;
            },
            enumerable: true,
            configurable: true
        });
        return ActionEvent;
    }());
    exports.ActionEvent = ActionEvent;
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectValueProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectValueProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/ngv-form-inputs/subcomponents/SelectValue/SelectValue", ["require", "exports", "react", "sabre-ngv-UIComponents-utils/classMerge/classMerge", "sabre-ngv-UIComponents/ngv-form-inputs/components/Slot/Slot", "sabre-ngv-UIComponents/ngv-form-inputs/interfaces/ActionEvent"], function (require, exports, React, classMerge_2, Slot_1, ActionEvent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SelectValueController = (function () {
        function SelectValueController() {
        }
        return SelectValueController;
    }());
    exports.SelectValueController = SelectValueController;
    var SelectValue = (function (_super) {
        __extends(SelectValue, _super);
        function SelectValue() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.focus = function () {
                _this.selfNode && _this.selfNode.focus();
            };
            _this.onAction = function (e) {
                var action = new ActionEvent_1.ActionEvent(e);
                _this.props.controller.onInputAction(action);
            };
            _this.onActivation = function (e) {
                _this.props.controller.onInputActivation(e.currentTarget);
            };
            _this.onDeactivation = function (e) {
                _this.props.controller.onInputDeactivation(e.currentTarget);
            };
            _this.toggle = function (e) {
                _this.selfNode && _this.selfNode.focus();
                _this.props.active
                    ? _this.onDeactivation(e)
                    : _this.onActivation(e);
                e.stopPropagation();
                e.preventDefault();
            };
            _this.refButton = function (node) {
                _this.selfNode = node;
                if (node) {
                    node.addEventListener('keydown', _this.onAction, false);
                    node.addEventListener('mousedown', _this.toggle, false);
                }
            };
            _this.onFocus = function () {
                _this.props.controller.onFocus();
            };
            _this.onBlur = function (e) {
                _this.props.controller.onBlur();
                _this.props.controller.onInputDeactivation(e.currentTarget);
            };
            return _this;
        }
        SelectValue.prototype.render = function () {
            return (React.createElement("button", { className: classMerge_2.classMerge('SelectValue', 'ngv-form-button', this.props.className), type: "button", onFocus: this.onFocus, onBlur: this.onBlur, ref: this.refButton, "data-qa-values": this.props.values },
                React.createElement(Slot_1.Slot, { children: this.props.children, slot: 'before' }),
                !this.props.value && React.createElement("span", { className: "placeholder" }, this.props.placeholder),
                React.createElement("span", null, this.props.value),
                React.createElement(Slot_1.Slot, { children: this.props.children, slot: 'after' }),
                React.createElement("i", { className: this.props.active ? 'fa fa-caret-up' : 'fa fa-caret-down' })));
        };
        return SelectValue;
    }(React.Component));
    exports.SelectValue = SelectValue;
});
define("sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Shell", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Shell" />
    /// <ngv scope="protected" />
    var Shell = (function () {
        function Shell(parent) {
            this.parent = parent;
        }
        return Shell;
    }());
    exports.Shell = Shell;
});
define("sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/ShellCollection", ["require", "exports", "sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Shell"], function (require, exports, Shell_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ShellCollectionCreator = (function () {
        function ShellCollectionCreator() {
            var _this = this;
            this.shells = new Map();
            this.get = function (id, name) {
                if (name === void 0) { name = 'global'; }
                var shell = _this.shells.get(id);
                if (!shell) {
                    shell = _this.create(id, name);
                }
                return shell;
            };
            this.destroy = function (id) {
                var haze = document.querySelector("#" + id);
                haze && haze.remove();
                _this.shells.delete(id);
            };
            this.create = function (id, name) {
                var parent = document.createElement('div');
                var shell = new Shell_1.Shell(parent);
                _this.shells.set(id, shell);
                parent.className = "Shell " + name;
                parent.id = id;
                document.body.appendChild(parent);
                return shell;
            };
        }
        return ShellCollectionCreator;
    }());
    exports.ShellCollectionCreator = ShellCollectionCreator;
    exports.ShellCollection = new ShellCollectionCreator();
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/HazeDynamicStyles" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/HazeDynamicStyles", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/HazeProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/HazeProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/HazeState" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/HazeState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Haze", ["require", "exports", "react", "sabre-ngv-UIComponents-utils/classMerge/classMerge"], function (require, exports, React, classMerge_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Haze = (function (_super) {
        __extends(Haze, _super);
        function Haze(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {
                style: {},
                position: 'bottom'
            };
            return _this;
        }
        Haze.prototype.componentDidMount = function () {
            this.calculatePosition();
        };
        Haze.prototype.componentWillReceiveProps = function (nextProps) {
            var _this = this;
            this.setState({}, function () {
                _this.calculatePosition();
            });
        };
        Haze.prototype.calculatePosition = function () {
            if (!this.el || !this.props.target)
                return;
            var target = this.props.target;
            var _a = target.getBoundingClientRect(), top = _a.top, bottom = _a.bottom, left = _a.left, right = _a.right, height = _a.height, width = _a.width;
            var _b = [this.el.offsetWidth, this.el.offsetHeight], eWidth = _b[0], eHeight = _b[1];
            var _c = [document.documentElement.scrollTop, document.documentElement.scrollLeft, document.documentElement.scrollHeight, document.documentElement.scrollWidth], sTop = _c[0], sLeft = _c[1], sHeight = _c[2], sWidth = _c[3];
            var _d = [sTop + top, sHeight - bottom - sTop, sLeft + left, sWidth - sLeft - right], tSpace = _d[0], bSpace = _d[1], lSpace = _d[2], rSpace = _d[3];
            var style = {};
            var position = 'bottom';
            if (this.props.preferTop && eHeight <= tSpace) {
                style.bottom = sHeight - sTop - top + "px";
                style.maxHeight = tSpace + "px";
                position = 'top';
            }
            else if (bSpace > 200) {
                style.top = bottom + sTop + "px";
                style.maxHeight = bSpace + "px";
            }
            else if (tSpace > 200) {
                style.bottom = sHeight - sTop - top + "px";
                style.maxHeight = tSpace + "px";
                position = 'top';
            }
            else {
                style.top = bottom + sTop + "px";
                style.maxHeight = bSpace + "px";
            }
            if (this.props.preferMiddle) {
                style.left = left + (sLeft - (eWidth - width) / 2) + "px";
            }
            else if (eWidth > width) {
                var widthDiff = eWidth - width;
                if (rSpace < widthDiff) {
                    style.right = "0";
                }
                else {
                    style.left = left + sLeft + "px";
                }
            }
            else {
                style.left = left + sLeft + "px";
            }
            style.minWidth = width + "px";
            this.setState({
                style: style,
                position: position
            });
        };
        Haze.prototype.render = function () {
            var _this = this;
            return (React.createElement("div", { className: classMerge_3.classMerge('Haze', this.state.position), style: this.state.style, ref: function (el) { return (_this.el = el); } }, this.props.children));
        };
        return Haze;
    }(React.Component));
    exports.Haze = Haze;
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/TooltipProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/TooltipProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Tooltip", ["require", "exports", "react", "react-dom", "sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/ShellCollection", "sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Haze"], function (require, exports, React, ReactDOM, ShellCollection_1, Haze_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UNIQ_ID = 0;
    var Tooltip = (function (_super) {
        __extends(Tooltip, _super);
        function Tooltip(props) {
            var _this = _super.call(this, props) || this;
            _this.id = "tooltip" + UNIQ_ID++;
            _this.ignoreEvent = false;
            //global scroll should close tooltip, scroll over tooltip is an exception
            _this.prepareToScrollAction = function (e) {
                //hide to avoid DOM rerender
                _this.haze && _this.haze.el && (_this.haze.el.style.visibility = 'hidden');
                _this.scrollIncoming = window.setTimeout(function () {
                    //if scroll is over tooltip back visibility otherwise onRemoveAction will remove tooltip
                    if (!_this.onRemoveAction(e)) {
                        _this.haze && _this.haze.el && (_this.haze.el.style.visibility = 'visible');
                    }
                }, 0);
            };
            _this.onScroll = function () {
                _this.haze && _this.haze.el && (_this.haze.el.style.visibility = 'visible');
                clearTimeout(_this.scrollIncoming);
            };
            _this.onInsideAction = function () {
                _this.ignoreEvent = true;
            };
            _this.onOutsideAction = function (e) {
                if (!_this.ignoreEvent) {
                    _this.onRemoveAction(e);
                }
                else {
                    _this.ignoreEvent = false;
                }
            };
            _this.onResizeAction = function (e) {
                _this.onRemoveAction(e);
            };
            _this.refHaze = function (haze) {
                _this.haze = haze;
                if (haze) {
                    _this.attachEventsListeners();
                }
                else {
                    _this.detachEventsListeners();
                }
            };
            _this.attachEventsListeners = function () {
                var events = ['mousedown', 'touchstart'];
                window.addEventListener('resize', _this.onResizeAction, true);
                document.addEventListener('scroll', _this.prepareToScrollAction, true);
                _this.haze && _this.haze.el && _this.haze.el.addEventListener('scroll', _this.onScroll, true);
                events.forEach(function (event) {
                    document.addEventListener(event, _this.onOutsideAction, false);
                    _this.haze && _this.haze.el && _this.haze.el.addEventListener(event, _this.onInsideAction, false);
                });
            };
            _this.detachEventsListeners = function () {
                var events = ['mousedown', 'touchstart'];
                window.removeEventListener('resize', _this.onResizeAction, true);
                document.removeEventListener('scroll', _this.prepareToScrollAction, true);
                events.forEach(function (event) {
                    document.removeEventListener(event, _this.onOutsideAction, false);
                });
            };
            _this.onRemoveAction = function (e) {
                var isExcluded = _this.props.exclude && e.target && e.target.classList && e.target.classList.contains(_this.props.exclude);
                if (_this.props.exclude && isExcluded) {
                    return false;
                }
                _this.props.onClose && _this.props.onClose(e);
                if (!e.defaultPrevented) {
                    _this.removeLayer();
                }
                return true;
            };
            _this.removeLayer = function () {
                var shell = ShellCollection_1.ShellCollection.get(_this.id, _this.props.shell);
                //manual component remove
                ReactDOM.unmountComponentAtNode(shell.parent);
                ShellCollection_1.ShellCollection.destroy(_this.id);
            };
            _this.renderLayer = function (props) {
                var shell = ShellCollection_1.ShellCollection.get(_this.id, props.shell);
                //manual component injection
                ReactDOM.render(React.createElement(Haze_1.Haze, { target: props.target, preferTop: props.preferTop, preferMiddle: props.preferMiddle, ref: _this.refHaze }, props.children), shell.parent);
            };
            return _this;
        }
        Tooltip.prototype.componentDidMount = function () {
            if (this.props.isOpen) {
                this.renderLayer(this.props);
            }
        };
        Tooltip.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps.isOpen) {
                this.renderLayer(nextProps);
            }
            else if (!nextProps.isOpen) {
                this.removeLayer();
            }
        };
        Tooltip.prototype.shouldComponentUpdate = function (nextProps) {
            return nextProps.isOpen;
        };
        //ignore render duo to manual component injection using ReactDOM
        Tooltip.prototype.render = function () {
            return null;
        };
        return Tooltip;
    }(React.Component));
    exports.Tooltip = Tooltip;
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectFindProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectFindProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectFindState" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectFindState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/ngv-form-inputs/subcomponents/SelectFind/SelectFind", ["require", "exports", "react", "sabre-ngv-UIComponents-utils/classMerge/classMerge", "sabre-ngv-UIComponents/ngv-form-inputs/components/Slot/Slot", "sabre-ngv-UIComponents/ngv-form-inputs/interfaces/ActionEvent"], function (require, exports, React, classMerge_4, Slot_2, ActionEvent_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SelectFindController = (function () {
        function SelectFindController() {
        }
        return SelectFindController;
    }());
    exports.SelectFindController = SelectFindController;
    var SelectFind = (function (_super) {
        __extends(SelectFind, _super);
        function SelectFind(props) {
            var _this = _super.call(this, props) || this;
            _this.getInputValue = function () {
                return _this.selfNode && _this.selfNode.value || '';
            };
            _this.clearInput = function () {
                _this.selfNode && (_this.selfNode.value = '');
            };
            _this.focus = function () {
                _this.selfNode && _this.selfNode.focus();
            };
            _this.onAction = function (e) {
                var action = new ActionEvent_2.ActionEvent(e);
                if ((action.action === ActionEvent_2.ActionEvents.SPACE || action.action === ActionEvent_2.ActionEvents.KEY) && _this.props.active) {
                    _this.props.controller.onInputCharacterAction(action);
                    return;
                }
                _this.props.controller.onInputAction(action);
            };
            _this.onActivation = function (e) {
                _this.props.controller.onInputActivation(e.currentTarget);
            };
            _this.onDeactivation = function (e) {
                _this.props.controller.onInputDeactivation(e.currentTarget);
            };
            _this.onInput = function (e) {
                _this.selfNode && _this.props.controller.onInputChange(_this.selfNode.value);
            };
            _this.toggle = function (e) {
                if (!_this.props.active) {
                    _this.selfNode && _this.selfNode.focus();
                    _this.onFocus();
                }
                _this.props.active
                    ? _this.onDeactivation(e)
                    : _this.onActivation(e);
                e.stopPropagation();
                e.preventDefault();
            };
            _this.onClick = function (e) {
                //ngv-fix
                e.stopPropagation();
                e.preventDefault();
            };
            _this.refButton = function (node) {
                if (node) {
                    node.addEventListener('keydown', _this.onAction, false);
                    node.addEventListener('mousedown', _this.toggle, false);
                    node.addEventListener('click', _this.onClick, false);
                }
            };
            _this.refInput = function (node) {
                _this.selfNode = node;
            };
            _this.onFocus = function () {
                _this.setState({
                    active: true
                });
                _this.props.controller.onFocus();
            };
            _this.onBlur = function (e) {
                _this.setState({
                    active: false
                });
                _this.props.controller.onInputDeactivation(e.currentTarget);
                _this.props.controller.onBlur();
            };
            _this.state = {
                active: false
            };
            return _this;
        }
        SelectFind.prototype.render = function () {
            return (React.createElement("div", { ref: this.refButton, className: classMerge_4.classMerge('SelectFind', 'ngv-form-button', { focus: this.state.active }, this.props.className) },
                React.createElement(Slot_2.Slot, { children: this.props.children, slot: 'before' }),
                !this.props.value && React.createElement("span", { className: "placeholder" }, this.props.placeholder),
                React.createElement("span", null, this.props.value),
                React.createElement(Slot_2.Slot, { children: this.props.children, slot: 'after' }),
                React.createElement("i", { className: this.props.active ? 'fa fa-caret-up' : 'fa fa-caret-down' }),
                React.createElement("div", { className: classMerge_4.classMerge('input-container', {
                        visible: this.props.active
                    }) },
                    React.createElement("input", { className: classMerge_4.classMerge('ngv-form-button', this.props.className), type: "text", onInput: this.onInput, onFocus: this.onFocus, onBlur: this.onBlur, ref: this.refInput, "data-qa-values": this.props.values }))));
        };
        return SelectFind;
    }(React.Component));
    exports.SelectFind = SelectFind;
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SimpleSelectProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SimpleSelectProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SimpleSelectState" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SimpleSelectState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/ngv-form-inputs/components/SimpleSelect/SimpleSelect", ["require", "exports", "react", "sabre-ngv-UIComponents-utils/classMerge/classMerge", "sabre-ngv-UIComponents/ngv-form-inputs/subcomponents/SelectList/SelectList", "sabre-ngv-UIComponents/ngv-form-inputs/subcomponents/SelectValue/SelectValue", "sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Tooltip", "sabre-ngv-UIComponents/ngv-form-inputs/interfaces/ActionEvent", "sabre-ngv-UIComponents/ngv-form-inputs/OptionStateCollection"], function (require, exports, React, classMerge_5, SelectList_1, SelectValue_1, Tooltip_1, ActionEvent_3, OptionStateCollection_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SimpleSelect = (function (_super) {
        __extends(SimpleSelect, _super);
        function SimpleSelect(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {
                active: false,
                value: '',
                values: [],
                options: [],
                tooltipId: null
            };
            _this.onExternalClose = _this.onExternalClose.bind(_this);
            _this.setTooltipId = _this.setTooltipId.bind(_this);
            return _this;
        }
        SimpleSelect.prototype.updateOptions = function (props) {
            this.setState({
                options: props.options
            });
        };
        SimpleSelect.prototype.setTooltipId = function (ref) {
            if (ref && ref.id !== this.state.tooltipId) {
                this.setState({
                    tooltipId: ref.id
                });
            }
        };
        SimpleSelect.prototype.focus = function () {
            this.refSelectValue && this.refSelectValue.focus();
        };
        SimpleSelect.prototype.onInputAction = function (action) {
            var passEvent = false;
            switch (action.action) {
                case ActionEvent_3.ActionEvents.ARROW_UP:
                    this.onArrowUpAction(action);
                    break;
                case ActionEvent_3.ActionEvents.ARROW_DOWN:
                    this.onArrowDownAction(action);
                    break;
                case ActionEvent_3.ActionEvents.SPACE:
                    this.onSpaceAction(action);
                    break;
                case ActionEvent_3.ActionEvents.ENTER:
                    this.onEnterAction(action);
                    break;
                case ActionEvent_3.ActionEvents.ESCAPE:
                    this.onEscapeAction(action);
                    break;
                case ActionEvent_3.ActionEvents.TAB:
                    this.onTabAction(action);
                    passEvent = true;
                    break;
                default:
                    if (action.key.length > 1) {
                        passEvent = true;
                        return;
                    }
                    this.onAnyCharAction(action);
            }
            if (!passEvent) {
                action.event.stopPropagation();
                action.event.preventDefault();
            }
        };
        SimpleSelect.prototype.onInputCharacterAction = function (e) {
            var _this = this;
            // todo
            setTimeout(function (e) {
                _this.hoverFirstElement();
            }, 50);
        };
        SimpleSelect.prototype.onAnyCharAction = function (e) {
            var key = e.key.toLocaleLowerCase();
            var index = this.props.options.findIndex(function (option) { return String(option.label).toLocaleLowerCase() === key; });
            if (index === -1) {
                return;
            }
            if (this.state.active) {
                this.refList && this.refList.setFocusAtOption(index);
            }
            else {
                this.onElementChoose(index);
            }
        };
        SimpleSelect.prototype.onEscapeAction = function (e) {
            if (this.state.active) {
                this.onInputDeactivation(e.target);
            }
        };
        SimpleSelect.prototype.onTabAction = function (e) {
            var focusedIndex = this.getFocusedOptionIndex();
            if (focusedIndex > -1) {
                this.onElementChoose(focusedIndex);
            }
        };
        SimpleSelect.prototype.onSpaceAction = function (e) {
            var focusedIndex = this.getFocusedOptionIndex();
            if (!this.state.active) {
                this.onInputActivation(e.target);
            }
            else if (focusedIndex > -1) {
                this.onElementChoose(focusedIndex);
            }
        };
        SimpleSelect.prototype.onEnterAction = function (e) {
            var focusedIndex = this.getFocusedOptionIndex();
            if (!this.state.active) {
                this.onInputActivation(e.target);
            }
            else if (focusedIndex > -1) {
                this.onElementChoose(focusedIndex);
            }
        };
        SimpleSelect.prototype.onArrowUpAction = function (e) {
            if (this.refList) {
                this.refList.setFocusOnPrevOption();
            }
            else {
                var currIndex = OptionStateCollection_2.OptionStateCollection.getCheckedIndex(this.state.options);
                var newIndex = OptionStateCollection_2.OptionStateCollection.getPrevAvailableOption(this.state.options, currIndex);
                this.onElementChoose(newIndex);
            }
        };
        SimpleSelect.prototype.onArrowDownAction = function (e) {
            if (this.refList) {
                this.refList.setFocusOnNextOption();
            }
            else {
                var currIndex = OptionStateCollection_2.OptionStateCollection.getCheckedIndex(this.state.options);
                var newIndex = OptionStateCollection_2.OptionStateCollection.getNextAvailableOption(this.state.options, currIndex);
                this.onElementChoose(newIndex);
            }
        };
        SimpleSelect.prototype.hoverFirstElement = function () {
            if (this.refList) {
                this.refList.setHoverAtOption(0);
            }
        };
        SimpleSelect.prototype.getFocusedOptionIndex = function () {
            if (!this.refList) {
                return -1;
            }
            return this.refList.getFocusedOptionIndex() > -1
                ? this.refList.getFocusedOptionIndex()
                : this.refList.getHoveredOptionIndex();
        };
        SimpleSelect.prototype.onElementChoose = function (newIndex) {
            var newOptions = this.props.options.slice();
            var value = this.state.options[newIndex].value;
            newOptions.forEach(function (option, index) {
                if (option.checked) {
                    newOptions[index] = __assign({}, option, { checked: false });
                }
                if (option.value === value) {
                    newOptions[index] = __assign({}, option, { checked: true });
                }
            });
            this.props.onChange(newOptions);
            this.refSelectValue && this.refSelectValue.focus();
            this.closeList();
        };
        SimpleSelect.prototype.closeList = function () {
            this.setState({
                active: false
            });
        };
        SimpleSelect.prototype.openList = function () {
            this.setState({
                active: true
            });
        };
        SimpleSelect.prototype.onFocus = function () {
            this.props.onFocus && this.props.onFocus();
        };
        SimpleSelect.prototype.onBlur = function () {
            this.props.onBlur && this.props.onBlur();
        };
        SimpleSelect.prototype.onInputDeactivation = function (target) {
            this.closeList();
        };
        SimpleSelect.prototype.onInputActivation = function (target) {
            this.openList();
        };
        SimpleSelect.prototype.onExternalClose = function (e) {
            this.closeList();
            e.stopPropagation();
        };
        SimpleSelect.prototype.updateValue = function (props) {
            var value;
            if (props.value !== this.state.value) {
                OptionStateCollection_2.OptionStateCollection.setAllCheckedToFalse(props.options);
                OptionStateCollection_2.OptionStateCollection.checkByValue(props.options, props.value);
                value = props.value;
            }
            else {
                var selected = props.options.find(function (option) { return option.checked; });
                value = selected && selected.value || '';
            }
            this.setState({
                value: value
            });
        };
        SimpleSelect.prototype.updateValues = function (props) {
            this.setState({
                values: props.options.map(function (option) { return option.label; })
            });
        };
        SimpleSelect.prototype.componentWillMount = function () {
            this.updateValue(this.props);
            this.updateValues(this.props);
            this.updateOptions(this.props);
        };
        SimpleSelect.prototype.componentWillReceiveProps = function (props) {
            this.updateValue(props);
            this.updateValues(props);
            this.updateOptions(props);
        };
        SimpleSelect.prototype.render = function () {
            var _this = this;
            return (React.createElement("div", { className: classMerge_5.classMerge('SimpleSelect', this.props.className), "data-tooltip": this.state.tooltipId },
                React.createElement(SelectValue_1.SelectValue, { ref: function (ref) { return _this.refSelectValue = ref; }, value: this.state.value, values: this.state.values, active: this.state.active, className: this.props.className, placeholder: this.props.placeholder, controller: this }, this.props.children),
                React.createElement(Tooltip_1.Tooltip, { isOpen: this.state.active, target: this.refSelectValue && this.refSelectValue.selfNode, shell: 'SelectListTooltip', onClose: this.onExternalClose, ref: function (ref) { return _this.setTooltipId(ref); } },
                    React.createElement(SelectList_1.SelectList, { ref: function (ref) { return _this.refList = ref; }, options: this.state.options, className: this.props.className, controller: this }))));
        };
        return SimpleSelect;
    }(React.Component));
    exports.SimpleSelect = SimpleSelect;
});
define("sabre-ngv-UIComponents/ngv-form-inputs/components/SimpleSearchSelect/SimpleSearchSelect", ["require", "exports", "react", "sabre-ngv-UIComponents-utils/classMerge/classMerge", "sabre-ngv-UIComponents/ngv-form-inputs/subcomponents/SelectList/SelectList", "sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Tooltip", "sabre-ngv-UIComponents/ngv-form-inputs/subcomponents/SelectFind/SelectFind", "sabre-ngv-UIComponents/ngv-form-inputs/components/SimpleSelect/SimpleSelect"], function (require, exports, React, classMerge_6, SelectList_2, Tooltip_2, SelectFind_1, SimpleSelect_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CONNECTOR_REGEXP = /[\:\-]/g;
    var SimpleSearchSelect = (function (_super) {
        __extends(SimpleSearchSelect, _super);
        function SimpleSearchSelect() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.filterWithFind = function (options) {
                var matchFraze = _this.refFind && _this.refFind.getInputValue();
                if (!matchFraze) {
                    return options;
                }
                var shouldRemoveLeftPad = matchFraze[0] !== "0";
                var matcher = _this.normalizeTimeString(matchFraze, shouldRemoveLeftPad);
                return options.filter(function (_a) {
                    var label = _a.label;
                    return _this.normalizeTimeString(label, shouldRemoveLeftPad).startsWith(matcher);
                });
            };
            return _this;
        }
        SimpleSearchSelect.prototype.normalizeTimeString = function (time, shouldRemoveLeftPad) {
            var replaceRegex = shouldRemoveLeftPad ? /^0/ : '';
            return time.toLocaleLowerCase()
                .replace(CONNECTOR_REGEXP, '')
                .replace(replaceRegex, '');
        };
        //overwritten
        SimpleSearchSelect.prototype.updateOptions = function (props) {
            var filteredOptions = this
                .filterWithFind(props.options);
            this.setState({
                options: filteredOptions
            });
        };
        SimpleSearchSelect.prototype.focus = function () {
            this.refFind && this.refFind.focus();
        };
        SimpleSearchSelect.prototype.onInputChange = function (value) {
            this.updateValues(this.props);
            this.updateOptions(this.props);
        };
        //overwritten
        SimpleSearchSelect.prototype.closeList = function () {
            this.refFind && this.refFind.clearInput();
            this.onInputChange('');
            this.setState({
                active: false
            });
        };
        //overwritten
        SimpleSearchSelect.prototype.updateValues = function (props) {
            var filteredAndMappedOptions = this
                .filterWithFind(props.options)
                .map(function (option) { return option.label; });
            this.setState({
                values: filteredAndMappedOptions
            });
        };
        SimpleSearchSelect.prototype.render = function () {
            var _this = this;
            return (React.createElement("div", { className: classMerge_6.classMerge('SimpleSearchSelect', this.props.className), "data-tooltip": this.state.tooltipId },
                React.createElement(SelectFind_1.SelectFind, { ref: function (ref) { return _this.refFind = ref; }, value: this.state.value, values: this.state.values, active: this.state.active, className: this.props.className, placeholder: this.props.placeholder, controller: this }, this.props.children),
                React.createElement(Tooltip_2.Tooltip, { isOpen: this.state.active, target: this.refFind && this.refFind.selfNode && this.refFind.selfNode.parentElement, shell: 'SelectListTooltip', onClose: this.onExternalClose, ref: function (ref) { return _this.setTooltipId(ref); } },
                    React.createElement(SelectList_2.SelectList, { ref: function (ref) { return _this.refList = ref; }, options: this.state.options, className: this.props.className, controller: this }))));
        };
        return SimpleSearchSelect;
    }(SimpleSelect_1.SimpleSelect));
    exports.SimpleSearchSelect = SimpleSearchSelect;
});
define("sabre-ngv-UIComponents/actionButtons/ActionButtons", ["require", "exports", "react", "sabre-ngv-app/app/services/impl/I18nService", "sabre-ngv-UIComponents/Context"], function (require, exports, React, I18nService_2, Context_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var i18n = Context_5.getService(I18nService_2.I18nService);
    var t = i18n.getScopedTranslator('sabre-ngv-UIComponents/translations');
    var ActionButtons = function (_a) {
        var submitButtonLabel = _a.submitButtonLabel, hasFocusOnSubmitButton = _a.hasFocusOnSubmitButton, onSubmit = _a.onSubmit, onCancel = _a.onCancel, onSubmitTabKeyDown = _a.onSubmitTabKeyDown;
        var handleCancelKeyDown = function (e) {
            if (e.key === ' ' || e.key === 'Enter') {
                onCancel();
            }
        };
        var handleSubmitKeyDown = function (e) {
            if (e.key === ' ' || e.key === 'Enter') {
                onSubmit();
            }
            else if (e.key === 'Tab' && !e.shiftKey) {
                e.preventDefault();
                onSubmitTabKeyDown();
            }
        };
        return (React.createElement("div", { className: 'action-buttons' },
            React.createElement("button", { onMouseDown: onCancel, onKeyDown: handleCancelKeyDown, type: 'button', className: 'js_form-cancel btn btn-outline btn-success' }, t("CANCEL")),
            React.createElement("button", { ref: function (button) { return button && hasFocusOnSubmitButton && button.focus(); }, type: 'button', className: 'js_form-submit btn btn-success', onClick: onSubmit, onKeyDown: handleSubmitKeyDown }, submitButtonLabel || t('SHOP_AIRFARE'))));
    };
    exports.default = ActionButtons;
});
///<amd-module name="sabre-ngv-UIComponents/advancedDropdown/utils/localize" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/advancedDropdown/utils/localize", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.localizeOptions = function (opts, t) {
        return opts.map(function (opt) { return (__assign({}, opt, { label: t(opt.label) })); });
    };
});
///<amd-module name="sabre-ngv-UIComponents/actionButtons/types/ActionButtonVariant" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/actionButtons/types/ActionButtonVariant", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/actionButtons/interfaces/ActionDropdownButtonMenuElement" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/actionButtons/interfaces/ActionDropdownButtonMenuElement", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/actionButtons/interfaces/ActionDropdownButtonProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/actionButtons/interfaces/ActionDropdownButtonProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/actionButtons/interfaces/ActionButtonProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/actionButtons/interfaces/ActionButtonProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/actionButtons/components/ActionButton" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/actionButtons/components/ActionButton", ["require", "exports", "react", "classnames", "react-bootstrap", "underscore"], function (require, exports, React, classNames, react_bootstrap_1, underscore_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function ActionButton(props) {
        var children = props.children, className = props.className, disabled = props.disabled, onClick = props.onClick, variant = props.variant, rest = __rest(props, ["children", "className", "disabled", "onClick", "variant"]);
        function handleKeyDown(event) {
            // call onClick on Space or Enter key down
            if (!disabled && underscore_2.contains([' ', 'Enter'], event.key)) {
                event.preventDefault();
                onClick();
            }
        }
        return (React.createElement(react_bootstrap_1.Button, __assign({ className: classNames((_a = {
                    'btn-success': variant === 'primary',
                    'btn-outline btn-success': variant === 'secondary'
                },
                _a[className] = className,
                _a)), disabled: disabled, onClick: onClick, onKeyDown: handleKeyDown }, rest), children));
        var _a;
    }
    exports.ActionButton = ActionButton;
});
///<amd-module name="sabre-ngv-UIComponents/actionButtons/components/ActionDropdownButton" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/actionButtons/components/ActionDropdownButton", ["require", "exports", "react", "react-dom", "classnames", "react-bootstrap", "underscore", "sabre-ngv-UIComponents/actionButtons/components/ActionButton"], function (require, exports, React, ReactDOM, classNames, react_bootstrap_2, underscore_3, ActionButton_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function ReactUseState(initialState) {
        return React.useState(initialState);
    }
    var ReactFragment = React.Fragment;
    function ReactCreateRef() {
        return React.createRef();
    }
    exports.ReactCreateRef = ReactCreateRef;
    function ReactUseEffect(effect, deps) {
        return React.useEffect(effect, deps);
    }
    exports.ReactUseEffect = ReactUseEffect;
    function ActionDropdownButton(props) {
        var _a = ReactUseState(false), open = _a[0], setOpen = _a[1];
        var dropdownRef = ReactCreateRef();
        function handleToggle(open) {
            setOpen(open);
        }
        function handleKeyDown(event) {
            // open menu on Space, Enter, ArrowUp, (ArrowDown handled by react-bootstrap)
            if (!open && !disabled && underscore_3.contains([' ', 'Enter', 'ArrowUp'], event.key)) {
                event.preventDefault();
                setOpen(true);
            }
        }
        ReactUseEffect(function () {
            if (open) {
                // focus first item on open
                var menu = ReactDOM.findDOMNode(dropdownRef.current.refs.inner.menu);
                var items = Array.from(menu.querySelectorAll('[tabIndex="-1"]')) || [];
                var firstItem = items[0];
                firstItem && firstItem.focus();
            }
        }, [open]);
        function renderMenuElement(menuElement, index) {
            var content = menuElement.content, disabled = menuElement.disabled, divider = menuElement.divider, header = menuElement.header, onSelect = menuElement.onSelect;
            return (React.createElement(react_bootstrap_2.MenuItem, { disabled: disabled, divider: divider, eventKey: index, header: header, key: index, onSelect: onSelect }, !divider && content));
        }
        var children = props.children, disabled = props.disabled, onClick = props.onClick, options = props.options, variant = props.variant;
        var dropdownVariant = classNames({
            'btn-success': variant === 'primary',
            'btn-outline btn-success': variant === 'secondary',
        });
        return (React.createElement(react_bootstrap_2.Dropdown, { id: 'action-dropdown', open: open, dropup: true, pullRight: true, disabled: disabled, onToggle: handleToggle, ref: dropdownRef },
            onClick && (React.createElement(ActionButton_1.ActionButton, { disabled: disabled, onClick: onClick, variant: variant }, children)),
            React.createElement(react_bootstrap_2.Dropdown.Toggle, { noCaret: true, className: dropdownVariant, onKeyDown: handleKeyDown }, onClick ? (React.createElement("i", { className: open ? 'fa fa-caret-down' : 'fa fa-caret-up' })) : (React.createElement(ReactFragment, null,
                children,
                React.createElement("i", { className: open ? 'fa fa-caret-down' : 'fa fa-caret-up', style: { paddingLeft: '12px' } })))),
            React.createElement(react_bootstrap_2.Dropdown.Menu, { className: 'react-bootstrap-dropdown', style: { maxHeight: '240px', overflowY: 'auto' } }, options.map(renderMenuElement))));
    }
    exports.ActionDropdownButton = ActionDropdownButton;
});
define("sabre-ngv-UIComponents/Main", ["require", "exports", "sabre-ngv-core/modules/Module", "sabre-ngv-UIComponents/commandHelperButton/components/AbstractPopoverButton", "sabre-ngv-UIComponents/advancedDropdown/components/AdvancedDropdown", "sabre-ngv-UIComponents/commandHelperButton/components/AbstractBootstrapPopoverButton", "sabre-ngv-UIComponents/contextMenu/components/ContextMenu", "sabre-ngv-UIComponents/endPnrButton/components/EndPnrButton", "sabre-ngv-UIComponents/popover/components/Popover", "sabre-ngv-UIComponents/select/components/Select", "sabre-ngv-UIComponents/baseComponent/components/StatefulComponent", "sabre-ngv-UIComponents/baseComponent/components/StatefulComponentWithSaga", "sabre-ngv-UIComponents/advancedDropdown/utils/alphaSort", "sabre-ngv-UIComponents/flexGrid/components/FlexGrid", "sabre-ngv-UIComponents/icon/components/Icon", "sabre-ngv-UIComponents/advancedDropdown/components/SimpleDropdown", "sabre-ngv-UIComponents/ngv-form-inputs/components/SimpleSearchSelect/SimpleSearchSelect", "sabre-ngv-UIComponents/ngv-form-inputs/components/SimpleSelect/SimpleSelect", "sabre-ngv-UIComponents/ngv-form-inputs/components/Slot/Slot", "sabre-ngv-UIComponents/actionButtons/ActionButtons", "sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Tooltip", "sabre-ngv-UIComponents-utils/decode/encodeDecodeProxy", "sabre-ngv-UIComponents/advancedDropdown/utils/localize", "sabre-ngv-UIComponents/actionButtons/components/ActionDropdownButton", "sabre-ngv-UIComponents/actionButtons/components/ActionButton"], function (require, exports, Module_1, AbstractPopoverButton_2, AdvancedDropdown_2, AbstractBootstrapPopoverButton_1, ContextMenu_1, EndPnrButton_1, Popover_2, Select_1, StatefulComponent_2, StatefulComponentWithSaga_1, alphaSort_1, FlexGrid_1, Icon_1, SimpleDropdown_1, SimpleSearchSelect_1, SimpleSelect_2, Slot_3, ActionButtons_1, Tooltip_3, encodeDecodeProxy_1, localize_1, ActionDropdownButton_1, ActionButton_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Main = (function (_super) {
        __extends(Main, _super);
        function Main() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Main.prototype.getExposedClasses = function () {
            return {
                ActionButton: ActionButton_2.ActionButton,
                ActionDropdownButton: ActionDropdownButton_1.ActionDropdownButton,
                ActionButtons: ActionButtons_1.default,
                AbstractButton: AbstractPopoverButton_2.default,
                AdvancedDropdown: AdvancedDropdown_2.default,
                alphaSort: alphaSort_1.alphaSort,
                BootstrapPopoverButton: AbstractBootstrapPopoverButton_1.default,
                ContextMenu: ContextMenu_1.default,
                EndPnrButton: EndPnrButton_1.default,
                FlexGrid: FlexGrid_1.FlexGrid,
                Icon: Icon_1.Icon,
                Popover: Popover_2.default,
                Select: Select_1.default,
                SimpleDropdown: SimpleDropdown_1.SimpleDropdown,
                SimpleSearchSelect: SimpleSearchSelect_1.SimpleSearchSelect,
                SimpleSelect: SimpleSelect_2.SimpleSelect,
                Slot: Slot_3.Slot,
                StatefulComponent: StatefulComponent_2.default,
                StatefulComponentWithSaga: StatefulComponentWithSaga_1.default,
                Tooltip: Tooltip_3.Tooltip,
                EncodeDecodeProxy: encodeDecodeProxy_1.EncodeDecodeProxy,
                localizeOptions: localize_1.localizeOptions,
            };
        };
        return Main;
    }(Module_1.Module));
    exports.Main = Main;
});
///<amd-module name="sabre-ngv-UIComponents" />
define("sabre-ngv-UIComponents", ["require", "exports", "sabre-ngv-UIComponents/Main", "sabre-ngv-UIComponents/Context"], function (require, exports, Main_1, Context_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Module_sabre_ngv_UIComponents = (function (_super) {
        __extends(Module_sabre_ngv_UIComponents, _super);
        function Module_sabre_ngv_UIComponents(manifest) {
            var _this = _super.call(this, manifest) || this;
            Context_6.context.setModule(_this);
            return _this;
        }
        return Module_sabre_ngv_UIComponents;
    }(Main_1.Main));
    exports.default = Module_sabre_ngv_UIComponents;
});
///<amd-module name="sabre-ngv-UIComponents/abstractSidepanelItem/interfaces/TitleBoxProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/abstractSidepanelItem/interfaces/TitleBoxProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/abstractSidepanelItem/interfaces/WidthChangingTitleBoxState" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/abstractSidepanelItem/interfaces/WidthChangingTitleBoxState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/abstractSidepanelItem/styles/styles", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var styles = {
        widthChangingIcon: {
            padding: '0px',
            height: '18px',
            margin: '5px',
            background: 'transparent',
            outline: 'none',
            boxShadow: 'none'
        },
        icon: {
            verticalAlign: 'top'
        }
    };
    exports.styles = styles;
    styles.angleRight = __assign({}, styles.icon, { paddingLeft: '4px', paddingRight: '4px' });
    styles.angleLeft = __assign({}, styles.icon, { paddingLeft: '4px', paddingRight: '4px' });
    styles.clickableArea = {
        cursor: 'pointer'
    };
});
///<amd-module name="sabre-ngv-UIComponents/baseComponent/interfaces/Action" />
/// <ngv scope='public' />
define("sabre-ngv-UIComponents/baseComponent/interfaces/Action", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/decode/interfaces/DecodeProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/decode/interfaces/DecodeProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/decode/interfaces/DecodeState" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/decode/interfaces/DecodeState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/decode/interfaces/WithDecodeState" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/decode/interfaces/WithDecodeState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/form/interfaces/ValueObject" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/form/interfaces/ValueObject", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/icon/interfaces/SeatIconComponentProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/icon/interfaces/SeatIconComponentProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/list/interfaces/WithUniqId" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/list/interfaces/WithUniqId", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/list/interfaces/WithParentProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/list/interfaces/WithParentProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/list/interfaces/ElementFactory" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/list/interfaces/ElementFactory", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/list/interfaces/BaseListHOC", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/list/interfaces/BaseListHOF", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/list/interfaces/MapItemToProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/list/interfaces/MapItemToProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/list/interfaces/BaseListProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/list/interfaces/BaseListProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/list/interfaces/WithKeyProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/list/interfaces/WithKeyProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/list/components/BaseList", ["require", "exports", "react", "sabre-ngv-UIComponents/fragment/components/Fragment"], function (require, exports, React, Fragment_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function renderList(parentProps, itemComponent, mapItemToProps) {
        return (parentProps.items || [])
            .map(mapItemToProps)
            .map(function (itemProps, index) {
            return React.createElement(itemComponent, Object.assign({ key: itemProps.id }, itemProps, { parentProps: parentProps }));
        });
    }
    exports.baseList = function (mapItemToProps) { return function (itemComponent) {
        return function (props) { return renderList(props, itemComponent, mapItemToProps); };
    }; };
    exports.baseListComponent = function (mapItemToProps) {
        return function (WrappedItemComponent) {
            return (function (_super) {
                __extends(class_1, _super);
                function class_1() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                class_1.prototype.render = function () {
                    return React.createElement.apply(React, [Fragment_2.default,
                        {}].concat(renderList(this.props, WrappedItemComponent, mapItemToProps)));
                };
                return class_1;
            }(React.Component));
        };
    };
});
///<amd-module name="sabre-ngv-UIComponents/list/interfaces/ItemSimpleProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/list/interfaces/ItemSimpleProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/list/components/SimpleList" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/list/components/SimpleList", ["require", "exports", "sabre-ngv-UIComponents/list/components/BaseList"], function (require, exports, BaseList_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapItemToKeyItemProps = function (item, index) { return ({ item: item, id: index }); };
    exports.simpleListComponent = BaseList_1.baseListComponent(exports.mapItemToKeyItemProps);
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/InfoTooltipProps" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/InfoTooltipProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectListOption" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/ngv-form-inputs/interfaces/SelectListOption", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-UIComponents/ngv-form-inputs/utils/textMatcher", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.textMatcher = function (label, match) {
        var matcher = new RegExp(match, 'i');
        var toMatch = label.slice(0);
        var matched;
        var parts = [];
        var key = 0;
        while (toMatch.length) {
            matched = toMatch.match(matcher);
            if (matched) {
                if (matched.index) {
                    parts.push(React.createElement('span', {
                        key: key++
                    }, toMatch.slice(0, matched.index)));
                }
                parts.push(React.createElement('span', {
                    className: 'bold',
                    key: key++
                }, matched[0]));
                toMatch = toMatch.slice(matched.index + matched[0].length);
            }
            else {
                parts.push(React.createElement('span', {
                    key: key++
                }, toMatch));
                return parts;
            }
        }
        return parts;
    };
});
///<amd-module name="sabre-ngv-UIComponents/decode/Decode" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/decode/Decode", ["require", "exports", "react", "underscore.string", "sabre-ngv-UIComponents-utils/decode/encodeDecodeProxy"], function (require, exports, React, underscore_string_1, encodeDecodeProxy_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Decode = (function (_super) {
        __extends(Decode, _super);
        function Decode(props) {
            var _this = _super.call(this, props) || this;
            _this.isComponentMounted = false;
            _this.state = {
                decodedValue: props.code
            };
            return _this;
        }
        Decode.prototype.componentWillMount = function () {
            encodeDecodeProxy_2.EncodeDecodeProxy
                .decode(this.props.domain, this.props.code)
                .then(this.updateStateWithDecodedData.bind(this));
        };
        Decode.prototype.componentDidMount = function () {
            this.isComponentMounted = true;
        };
        Decode.prototype.componentWillUnmount = function () {
            this.isComponentMounted = false;
        };
        Decode.prototype.updateStateWithDecodedData = function (value) {
            var _this = this;
            if (value === void 0) { value = ''; }
            if (!this.isComponentMounted) {
                return;
            }
            var formatter = this.props.titleize
                ? function (value) { return underscore_string_1.titleize(_this.props.formatter(value)); }
                : this.props.formatter;
            this.setState({
                decodedValue: formatter(value)
            });
        };
        Decode.prototype.render = function () {
            return (React.createElement("span", { className: 'decoded-value text-capitalize' }, this.state.decodedValue));
        };
        return Decode;
    }(React.Component));
    Decode.defaultProps = {
        formatter: function (value) { return value; },
        titleize: true
    };
    exports.Decode = Decode;
    exports.defaultLocationFormatter = function (decodedValue) { return underscore_string_1.titleize(decodedValue.split(',')[0]); };
    exports.fullLocationFormatter = function (decodedValue) { return decodedValue; };
    exports.equipmentFormatter = function (decodedValue) { return decodedValue; };
    exports.cabinFormatter = function (decodedValue) { return decodedValue; };
    var DecodeAirport = function (_a) {
        var formatter = _a.formatter, props = __rest(_a, ["formatter"]);
        return React.createElement(Decode, __assign({ domain: encodeDecodeProxy_2.EncodeDecodeDomains.AIRPORT, formatter: formatter || exports.defaultLocationFormatter }, props));
    };
    exports.DecodeAirport = DecodeAirport;
    exports.defaultAirlineFormatter = function (decodedValue) { return underscore_string_1.titleize(decodedValue.split('/')[0]); };
    var DecodeAirline = function (_a) {
        var formatter = _a.formatter, props = __rest(_a, ["formatter"]);
        return React.createElement(Decode, __assign({ domain: encodeDecodeProxy_2.EncodeDecodeDomains.AIRLINE, formatter: formatter || exports.defaultAirlineFormatter }, props));
    };
    exports.DecodeAirline = DecodeAirline;
});
///<amd-module name="sabre-ngv-UIComponents/decode/withDecode" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/decode/withDecode", ["require", "exports", "react", "sabre-ngv-UIComponents-utils/decode/encodeDecodeProxy"], function (require, exports, React, encodeDecodeProxy_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function withDecode(domain, formatter, WrappedComponent) {
        if (formatter === void 0) { formatter = (function (value) { return value; }); }
        return (function (_super) {
            __extends(class_2, _super);
            function class_2(props) {
                var _this = _super.call(this, props) || this;
                _this.isComponentMounted = false;
                _this.code = props.code;
                _this.domain = domain;
                _this.state = {
                    decodedValue: props.decodedValue ? props.decodedValue : _this.code
                };
                return _this;
            }
            class_2.prototype.componentDidMount = function () {
                this.isComponentMounted = true;
            };
            class_2.prototype.componentWillUnmount = function () {
                this.isComponentMounted = false;
            };
            class_2.prototype.componentWillMount = function () {
                if (!this.domain || !this.code || this.props.decodedValue) {
                    return;
                }
                encodeDecodeProxy_3.EncodeDecodeProxy
                    .decode(this.domain, this.code)
                    .then(this.updateStateWithDecodedData.bind(this));
            };
            class_2.prototype.updateStateWithDecodedData = function (value) {
                if (value === void 0) { value = ''; }
                if (!this.isComponentMounted) {
                    return;
                }
                this.setState({
                    decodedValue: formatter(value)
                });
            };
            class_2.prototype.render = function () {
                return React.createElement(WrappedComponent, __assign({ decodedValue: this.state.decodedValue }, this.props));
            };
            return class_2;
        }(React.PureComponent));
    }
    exports.withDecode = withDecode;
});
///<amd-module name="sabre-ngv-UIComponents/decode/withDecodingMany" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/decode/withDecodingMany", ["require", "exports", "react", "sabre-ngv-app/app/services/impl/EncodeDecodeService", "sabre-ngv-UIComponents/Context"], function (require, exports, React, EncodeDecodeService_1, Context_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var encodeDecode = Context_7.getService(EncodeDecodeService_1.EncodeDecodeService);
    function withDecodingMany(WrappedComponent, getValues, formatter) {
        if (formatter === void 0) { formatter = (function (value) { return value; }); }
        return (function (_super) {
            __extends(class_3, _super);
            function class_3(props) {
                var _this = _super.call(this, props) || this;
                _this.values = getValues(props);
                _this.state = {
                    decodedValues: _this.values
                };
                return _this;
            }
            class_3.prototype.componentWillMount = function () {
                this.decodeValues();
            };
            class_3.prototype.decodeValues = function () {
                var _this = this;
                encodeDecode.decodeMany('airport', this.values, function (response) {
                    _this.setState({
                        decodedValues: response.map(formatter)
                    });
                });
            };
            class_3.prototype.render = function () {
                return React.createElement(WrappedComponent, __assign({ decodedValues: this.state.decodedValues }, this.props));
            };
            return class_3;
        }(React.PureComponent));
    }
    exports.withDecodingMany = withDecodingMany;
});
///<amd-module name="sabre-ngv-UIComponents/withTooltip/WithTooltip" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/withTooltip/WithTooltip", ["require", "exports", "react", "react-bootstrap"], function (require, exports, React, react_bootstrap_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function WithTooltip(props) {
        var _a = props.children, children = _a === void 0 ? null : _a, _b = props.content, content = _b === void 0 ? null : _b, _c = props.placement, placement = _c === void 0 ? 'top' : _c, _d = props.id, id = _d === void 0 ? '' : _d, _e = props.bsStyle, bsStyle = _e === void 0 ? '' : _e, _f = props.trigger, trigger = _f === void 0 ? ['hover', 'focus'] : _f, _g = props.disabled, disabled = _g === void 0 ? false : _g;
        var tooltip = React.createElement(react_bootstrap_3.Tooltip, { id: id, bsStyle: bsStyle }, content);
        return (React.createElement(react_bootstrap_3.OverlayTrigger, { overlay: tooltip, placement: placement, delayShow: 300, delayHide: 150, trigger: disabled ? null : trigger }, children));
    }
    exports.WithTooltip = WithTooltip;
});
///<amd-module name="sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractTitleBox" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractTitleBox", ["require", "exports", "react", "sabre-ngv-UIComponents/abstractSidepanelItem/styles/styles"], function (require, exports, React, styles_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractTitleBox = (function (_super) {
        __extends(AbstractTitleBox, _super);
        function AbstractTitleBox(props) {
            var _this = _super.call(this, props) || this;
            _this.handleTitleClick = _this.handleTitleClick.bind(_this);
            return _this;
        }
        AbstractTitleBox.prototype.handleTitleClick = function () {
        };
        ;
        AbstractTitleBox.prototype.render = function () {
            return (React.createElement("div", null,
                React.createElement("div", { className: "ui-box-group-title", style: styles_8.styles.clickableArea, onClick: this.handleTitleClick },
                    this.renderLeftIcon(),
                    React.createElement("span", { className: "qa-box-group-title" }, this.props.title))));
        };
        return AbstractTitleBox;
    }(React.Component));
    exports.default = AbstractTitleBox;
});
///<amd-module name="sabre-ngv-UIComponents/abstractSidepanelItem/components/TitleBox" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/abstractSidepanelItem/components/TitleBox", ["require", "exports", "react", "sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractTitleBox", "sabre-ngv-sidepanel/services/ISidepanelService", "sabre-ngv-UIComponents/Context"], function (require, exports, React, AbstractTitleBox_1, ISidepanelService_2, Context_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TitleBox = (function (_super) {
        __extends(TitleBox, _super);
        function TitleBox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TitleBox.prototype.hideSidepanel = function () {
            Context_8.getService(ISidepanelService_2.ISidepanelService).closeAllItems();
        };
        TitleBox.prototype.renderLeftIcon = function () {
            return (React.createElement("button", { className: "ui-box-group-title-icon btn btn-link", onClick: this.hideSidepanel.bind(this) },
                React.createElement("i", { className: "fa fa-angle-double-right" })));
        };
        return TitleBox;
    }(AbstractTitleBox_1.default));
    exports.default = TitleBox;
});
///<amd-module name="sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractSidepanelItem" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractSidepanelItem", ["require", "exports", "react", "sabre-ngv-UIComponents/abstractSidepanelItem/components/TitleBox"], function (require, exports, React, TitleBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractSidepanelItem = (function (_super) {
        __extends(AbstractSidepanelItem, _super);
        function AbstractSidepanelItem() {
            var _this = _super.call(this) || this;
            _this.className = _this.className || '';
            return _this;
        }
        AbstractSidepanelItem.prototype.renderTitleBox = function () {
            return React.createElement(TitleBox_1.default, { title: this.title });
        };
        AbstractSidepanelItem.prototype.render = function () {
            return (React.createElement("div", { className: this.className + " ui-box-group" },
                this.renderTitleBox(),
                this.renderContent()));
        };
        return AbstractSidepanelItem;
    }(React.Component));
    exports.default = AbstractSidepanelItem;
});
///<amd-module name="sabre-ngv-UIComponents/abstractSidepanelItem/components/WidthChangingTitleBox" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/abstractSidepanelItem/components/WidthChangingTitleBox", ["require", "exports", "react", "sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractTitleBox", "sabre-ngv-UIComponents/abstractSidepanelItem/styles/styles", "sabre-ngv-UIComponents/Context", "sabre-ngv-sidepanel/services/ISidepanelService", "sabre-ngv-core/data/mutation/AttributeMutation", "sabre-ngv-core/decorators/methods/Lazy", "rxjs", "sabre-ngv-core/data/mutation/observeMutation"], function (require, exports, React, AbstractTitleBox_2, styles_9, Context_9, ISidepanelService_3, AttributeMutation_1, Lazy_1, Rx, observeMutation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WidthChangingTitleBox = (function (_super) {
        __extends(WidthChangingTitleBox, _super);
        function WidthChangingTitleBox(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {
                isWideModeEnabled: false
            };
            // FIXME: state mutation observers will be replaced with RX operator
            var store = _this.getSidepanelService().getStore();
            var store$ = Rx.Observable.from(store);
            store$
                .pipe(observeMutation_1.observeMutation(AttributeMutation_1.AttributeMutation.calculateMutationOf("isWideMode")))
                .subscribe(function (mutation) {
                _this.setState({
                    isWideModeEnabled: mutation.new.isWideMode
                });
            });
            return _this;
        }
        WidthChangingTitleBox.prototype.getSidepanelService = function () {
            return Context_9.getService(ISidepanelService_3.ISidepanelService);
        };
        WidthChangingTitleBox.prototype.handleTitleClick = function () {
            this.getSidepanelService().toggleWideMode();
        };
        WidthChangingTitleBox.prototype.renderIconElement = function () {
            if (this.state.isWideModeEnabled) {
                return (React.createElement("i", { className: "fa fa-angle-double-right", style: styles_9.styles.angleRight }));
            }
            else {
                return (React.createElement("i", { className: "fa fa-angle-double-left", style: styles_9.styles.angleLeft }));
            }
        };
        WidthChangingTitleBox.prototype.renderLeftIcon = function () {
            return (React.createElement("button", { className: "ui-box-group-title-icon btn", style: styles_9.styles.widthChangingIcon }, this.renderIconElement()));
        };
        return WidthChangingTitleBox;
    }(AbstractTitleBox_2.default));
    __decorate([
        Lazy_1.Lazy,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", ISidepanelService_3.ISidepanelService)
    ], WidthChangingTitleBox.prototype, "getSidepanelService", null);
    exports.default = WidthChangingTitleBox;
});
///<amd-module name="sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractWidthChangingSidepanelItem" />
/// <ngv scope="protected" />
define("sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractWidthChangingSidepanelItem", ["require", "exports", "react", "sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractSidepanelItem", "sabre-ngv-UIComponents/abstractSidepanelItem/components/WidthChangingTitleBox"], function (require, exports, React, AbstractSidepanelItem_1, WidthChangingTitleBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractWidthChangingSidepanelItem = (function (_super) {
        __extends(AbstractWidthChangingSidepanelItem, _super);
        function AbstractWidthChangingSidepanelItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbstractWidthChangingSidepanelItem.prototype.renderTitleBox = function () {
            return (React.createElement(WidthChangingTitleBox_1.default, { title: this.title }));
        };
        return AbstractWidthChangingSidepanelItem;
    }(AbstractSidepanelItem_1.default));
    exports.default = AbstractWidthChangingSidepanelItem;
});
define("sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/InfoTooltip", ["require", "exports", "react", "sabre-ngv-UIComponents-utils/classMerge/classMerge", "sabre-ngv-UIComponents/ngv-form-inputs/components/Tooltip/Tooltip"], function (require, exports, React, classMerge_7, Tooltip_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InfoTooltip = (function (_super) {
        __extends(InfoTooltip, _super);
        function InfoTooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.id = null;
            return _this;
        }
        InfoTooltip.prototype.render = function () {
            var _this = this;
            var isOpen = this.props.target && this.props.target.parentNode;
            return (React.createElement(Tooltip_4.Tooltip, { isOpen: !!isOpen, target: this.props.target, preferTop: true, preferMiddle: true, shell: 'InfoTooltipShell', ref: function (ref) { return (_this.id = ref ? ref.id : null); } },
                React.createElement("div", { className: classMerge_7.classMerge('InfoTooltip') }, this.props.text)));
        };
        return InfoTooltip;
    }(React.Component));
    exports.InfoTooltip = InfoTooltip;
});

//# sourceMappingURL=module.js.map
