var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
///<amd-module name="sabre-ngv-sidepanel/Context" />
/// <ngv scope="public" />
define("sabre-ngv-sidepanel/Context", ["require", "exports", "sabre-ngv-core/modules/ModuleContext"], function (require, exports, ModuleContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Cannot use IModuleContext['something'] for types - it seems to break generics
    // types are copied from IModuleContext
    /** @internal **/
    exports.context = new ModuleContext_1.ModuleContext("sabre-ngv-sidepanel");
    /** @internal **/
    exports.cf = exports.context.cf.bind(exports.context);
    /** @internal **/
    exports.registerService = exports.context.registerService.bind(exports.context);
    /** @internal **/
    exports.getService = exports.context.getService.bind(exports.context);
});
///<amd-module name="sabre-ngv-sidepanel/models/SidepanelItemSignature" />
/// <ngv scope="protected" />
define("sabre-ngv-sidepanel/models/SidepanelItemSignature", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-sidepanel/redux/state/SidepanelState" />
/// <ngv scope="protected" />
define("sabre-ngv-sidepanel/redux/state/SidepanelState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-sidepanel/redux/state/SidepanelStore" />
/// <ngv scope="protected" />
define("sabre-ngv-sidepanel/redux/state/SidepanelStore", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-sidepanel/services/ISidepanelService" />
/// <ngv scope="protected" />
define("sabre-ngv-sidepanel/services/ISidepanelService", ["require", "exports", "sabre-ngv-app/app/services/impl/AbstractService"], function (require, exports, AbstractService_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ISidepanelService = (function (_super) {
        __extends(ISidepanelService, _super);
        function ISidepanelService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ISidepanelService;
    }(AbstractService_1.AbstractService));
    ISidepanelService.SERVICE_NAME = 'sidepanel';
    exports.ISidepanelService = ISidepanelService;
});
///<amd-module name="sabre-ngv-sidepanel/redux/actions/TOGGLE" />
/// <ngv scope="protected" />
define("sabre-ngv-sidepanel/redux/actions/TOGGLE", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TOGGLE;
    (function (TOGGLE) {
        TOGGLE.key = 'TOGGLE';
        function is(action) {
            return action.type === TOGGLE.key;
        }
        TOGGLE.is = is;
        function reducer(state, action) {
            var isOn = action.isOn;
            if (typeof isOn === 'undefined') {
                isOn = state.visibleItem !== action.itemKey;
            }
            var newState = Object.assign({}, state, {
                visibleItem: isOn ? action.itemKey : undefined,
                isWideMode: false
            });
            return newState;
        }
        TOGGLE.reducer = reducer;
    })(TOGGLE = exports.TOGGLE || (exports.TOGGLE = {}));
});
///<amd-module name="sabre-ngv-sidepanel/redux/actions/WIDE_MODE" />
/// <ngv scope="protected" />
define("sabre-ngv-sidepanel/redux/actions/WIDE_MODE", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WIDE_MODE;
    (function (WIDE_MODE) {
        WIDE_MODE.key = 'WIDE_MODE';
        function is(action) {
            return action.type === WIDE_MODE.key;
        }
        WIDE_MODE.is = is;
        function reducer(state, action) {
            var isOn = action.isOn;
            if (typeof isOn === 'undefined') {
                isOn = !state.isWideMode;
            }
            var newState = Object.assign({}, state, {
                isWideMode: isOn
            });
            return newState;
        }
        WIDE_MODE.reducer = reducer;
    })(WIDE_MODE = exports.WIDE_MODE || (exports.WIDE_MODE = {}));
});
///<amd-module name="sabre-ngv-sidepanel/redux/FrontController" />
/// <ngv scope="protected" />
define("sabre-ngv-sidepanel/redux/FrontController", ["require", "exports", "sabre-ngv-sidepanel/redux/actions/TOGGLE", "sabre-ngv-sidepanel/redux/actions/WIDE_MODE"], function (require, exports, TOGGLE_1, WIDE_MODE_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FrontController;
    (function (FrontController) {
        function reducer(state, action) {
            if (TOGGLE_1.TOGGLE.is(action)) {
                return TOGGLE_1.TOGGLE.reducer(state, action);
            }
            else if (WIDE_MODE_1.WIDE_MODE.is(action)) {
                return WIDE_MODE_1.WIDE_MODE.reducer(state, action);
            }
            else {
                return state;
            }
        }
        FrontController.reducer = reducer;
    })(FrontController = exports.FrontController || (exports.FrontController = {}));
});
///<amd-module name="sabre-ngv-sidepanel/services/SidepanelService" />
/// <ngv scope="protected" />
define("sabre-ngv-sidepanel/services/SidepanelService", ["require", "exports", "sabre-ngv-app/app/services/impl/AbstractService", "sabre-ngv-sidepanel/services/ISidepanelService", "redux", "sabre-ngv-sidepanel/redux/FrontController", "sabre-ngv-app/app/services/impl/PrefsService", "sabre-ngv-sidepanel/Context"], function (require, exports, AbstractService_2, ISidepanelService_1, redux_1, FrontController_1, PrefsService_1, Context_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SidepanelService = (function (_super) {
        __extends(SidepanelService, _super);
        function SidepanelService() {
            var _this = _super.call(this) || this;
            var prefsService = Context_1.getService(PrefsService_1.PrefsService);
            _this.store = redux_1.createStore(FrontController_1.FrontController.reducer, {
                visibleItem: null,
                isWideMode: false
            });
            _this.store.subscribe(function () {
                var _a = _this.store.getState().visibleItem, visibleItem = _a === void 0 ? '' : _a;
                prefsService.setSidepanelVisibleItem(visibleItem);
            });
            return _this;
        }
        ;
        SidepanelService.prototype.getStore = function () {
            return this.store;
        };
        SidepanelService.prototype.closeAllItems = function () {
            var action = {
                type: "TOGGLE",
                itemKey: undefined
            };
            this.dispatchAction(action);
        };
        SidepanelService.prototype.toggleWideMode = function (isWideMode) {
            var action = {
                type: "WIDE_MODE",
                isOn: isWideMode
            };
            this.dispatchAction(action);
        };
        SidepanelService.prototype.isWideMode = function () {
            return this.getStore().getState().isWideMode;
        };
        SidepanelService.prototype.toggleItem = function (itemSignature, isOn) {
            var action = {
                type: "TOGGLE",
                itemKey: itemSignature,
                isOn: isOn
            };
            this.dispatchAction(action);
        };
        SidepanelService.prototype.dispatchAction = function (action) {
            this.getStore().dispatch(action);
        };
        return SidepanelService;
    }(AbstractService_2.AbstractService));
    SidepanelService.SERVICE_NAME = ISidepanelService_1.ISidepanelService.SERVICE_NAME;
    exports.SidepanelService = SidepanelService;
});
define("sabre-ngv-sidepanel/Main", ["require", "exports", "sabre-ngv-core/modules/Module", "sabre-ngv-sidepanel/Context", "sabre-ngv-sidepanel/services/SidepanelService", "sabre-ngv-sidepanel/services/ISidepanelService", "sabre-ngv-core/data/mutation/KeyValueMutation", "rxjs", "sabre-ngv-core/data/mutation/observeMutation"], function (require, exports, Module_1, Context_2, SidepanelService_1, ISidepanelService_2, KeyValueMutation_1, Rx, observeMutation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Main = (function (_super) {
        __extends(Main, _super);
        function Main() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Main.prototype.init = function () {
            _super.prototype.init.call(this);
            Context_2.registerService(SidepanelService_1.SidepanelService);
            // move to Sidepanel component when it is migrated
            this.initEventHandlers();
        };
        Main.prototype.initEventHandlers = function () {
            var _this = this;
            // this should be moved to Sidepanel component when it is migrated
            var sidepanelService = Context_2.getService(ISidepanelService_2.ISidepanelService);
            // change to getService(EventBus) when it becomes service
            sidepanelService.listenToEventBus('toggle-visible-sidepanel-item', function (itemKey) {
                sidepanelService.toggleItem(itemKey, true);
            });
            var store = sidepanelService.getStore();
            var store$ = Rx.Observable.from(store);
            store$
                .pipe(observeMutation_1.observeMutation(KeyValueMutation_1.KeyValueMutation.calculateMutation))
                .subscribe(function (mutation) {
                if (mutation.mutatedKeys.visibleItem) {
                    _this.getSidepanelWidget()._setVisibleItemKey(mutation.new.visibleItem);
                }
                if (mutation.mutatedKeys.isWideMode) {
                    _this.getSidepanelWidget()._handleWideModeChange(mutation.new.isWideMode);
                }
            });
        };
        Main.prototype.getSidepanelWidget = function () {
            // Sidepanel widget should be migrated to TS/React - do not expose it in API
            return app.areaView.sidepanel;
        };
        return Main;
    }(Module_1.Module));
    exports.Main = Main;
});
///<amd-module name="sabre-ngv-sidepanel" />
define("sabre-ngv-sidepanel", ["require", "exports", "sabre-ngv-sidepanel/Main", "sabre-ngv-sidepanel/Context"], function (require, exports, Main_1, Context_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Module_sabre_ngv_sidepanel = (function (_super) {
        __extends(Module_sabre_ngv_sidepanel, _super);
        function Module_sabre_ngv_sidepanel(manifest) {
            var _this = _super.call(this, manifest) || this;
            Context_3.context.setModule(_this);
            return _this;
        }
        return Module_sabre_ngv_sidepanel;
    }(Main_1.Main));
    exports.default = Module_sabre_ngv_sidepanel;
});

//# sourceMappingURL=module.js.map
