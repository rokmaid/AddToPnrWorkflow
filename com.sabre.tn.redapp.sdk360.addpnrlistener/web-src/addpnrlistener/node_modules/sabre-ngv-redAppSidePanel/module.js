var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
///<amd-module name="sabre-ngv-redAppSidePanel/Context" />
/// <ngv scope="public" />
define("sabre-ngv-redAppSidePanel/Context", ["require", "exports", "sabre-ngv-core/modules/ModuleContext"], function (require, exports, ModuleContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Cannot use IModuleContext['something'] for types - it seems to break generics
    // types are copied from IModuleContext
    /** @internal **/
    exports.context = new ModuleContext_1.ModuleContext("sabre-ngv-redAppSidePanel");
    /** @internal **/
    exports.cf = exports.context.cf.bind(exports.context);
    /** @internal **/
    exports.registerService = exports.context.registerService.bind(exports.context);
    /** @internal **/
    exports.getService = exports.context.getService.bind(exports.context);
});
///<amd-module name="sabre-ngv-redAppSidePanel/interfaces/IRedAppSidePanelButton" />
/// <ngv scope="public" />
define("sabre-ngv-redAppSidePanel/interfaces/IRedAppSidePanelButton", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-redAppSidePanel/interfaces/IRedAppSidePanelProps" />
/// <ngv scope="private" />
define("sabre-ngv-redAppSidePanel/interfaces/IRedAppSidePanelProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-redAppSidePanel/components/RedAppSidePanel" />
/// <ngv scope="private" />
define("sabre-ngv-redAppSidePanel/components/RedAppSidePanel", ["require", "exports", "sabre-ngv-UIComponents/abstractSidepanelItem/components/AbstractWidthChangingSidepanelItem", "sabre-ngv-app/app/services/impl/I18nService", "sabre-ngv-app/app/getService", "react"], function (require, exports, AbstractWidthChangingSidepanelItem_1, I18nService_1, getService_1, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var i18n = getService_1.getService(I18nService_1.I18nService);
    var t = i18n.getScopedTranslator('sabre-ngv-redAppSidePanel/translations');
    var RedAppSidePanel = (function (_super) {
        __extends(RedAppSidePanel, _super);
        function RedAppSidePanel(props) {
            var _this = _super.call(this) || this;
            _this.title = t('WORKFLOWS');
            _this.className = 'custom-workflow';
            _this.noWorkflowsToDisplay = t('NO_WORKFLOWS_TO_DISPLAY');
            _this.props = props;
            return _this;
        }
        ;
        RedAppSidePanel.prototype.getInfoMessageNotification = function (infoMessage) {
            return (React.createElement("div", { className: 'custom-workflow-info-message' },
                React.createElement("div", { className: 'alert alert-info' },
                    React.createElement("div", { className: 'icon-part' }),
                    React.createElement("div", { className: 'message-part' },
                        React.createElement("div", { className: 'message-title' }, infoMessage)))));
        };
        RedAppSidePanel.prototype.getRenderButtons = function () {
            var renderButtons = this.props.buttons.map(function (button, i) {
                return React.createElement("button", { key: i, className: button.className, onClick: button.onClick },
                    React.createElement("i", { className: "fa fa-play-circle-o", "aria-hidden": "true" }),
                    button.label);
            });
            return React.createElement("div", { className: 'buttons' }, renderButtons);
        };
        RedAppSidePanel.prototype.renderContent = function () {
            return this.props.buttons.length === 0 ? this.getInfoMessageNotification(this.noWorkflowsToDisplay) : this.getRenderButtons();
        };
        return RedAppSidePanel;
    }(AbstractWidthChangingSidepanelItem_1.default));
    exports.RedAppSidePanel = RedAppSidePanel;
});
///<amd-module name="sabre-ngv-redAppSidePanel/manager/RedAppSidePanelManager" />
/// <ngv scope="private" />
define("sabre-ngv-redAppSidePanel/manager/RedAppSidePanelManager", ["require", "exports", "sabre-ngv-app/app/C2WBridge", "sabre-ngv-redAppSidePanel/components/RedAppSidePanel"], function (require, exports, C2WBridge_1, RedAppSidePanel_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RedAppSidePanelManager = (function () {
        function RedAppSidePanelManager() {
            this.buttons = [];
        }
        RedAppSidePanelManager.prototype.addButtons = function (buttons) {
            this.buttons = this.buttons.concat(buttons);
        };
        RedAppSidePanelManager.prototype.getRedAppSidePanelWidget = function (className) {
            var c2wBridge = new C2WBridge_1.C2WBridge({
                componentClass: RedAppSidePanel_1.RedAppSidePanel,
                componentProps: {
                    buttons: this.buttons
                },
                className: className
            });
            return c2wBridge.getAsWidget();
        };
        return RedAppSidePanelManager;
    }());
    exports.RedAppSidePanelManager = RedAppSidePanelManager;
});
define("sabre-ngv-redAppSidePanel/Main", ["require", "exports", "sabre-ngv-core/modules/Module", "sabre-ngv-redAppSidePanel/manager/RedAppSidePanelManager"], function (require, exports, Module_1, RedAppSidePanelManager_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Main = (function (_super) {
        __extends(Main, _super);
        function Main() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Main.prototype.init = function () {
            _super.prototype.init.call(this);
            // initialize your module here
        };
        Main.prototype.getExposedClasses = function () {
            return {
                RedAppSidePanelManager: RedAppSidePanelManager_1.RedAppSidePanelManager
            };
        };
        return Main;
    }(Module_1.Module));
    exports.Main = Main;
});
///<amd-module name="sabre-ngv-redAppSidePanel" />
define("sabre-ngv-redAppSidePanel", ["require", "exports", "sabre-ngv-redAppSidePanel/Main", "sabre-ngv-redAppSidePanel/Context"], function (require, exports, Main_1, Context_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Module_sabre_ngv_redAppSidePanel = (function (_super) {
        __extends(Module_sabre_ngv_redAppSidePanel, _super);
        function Module_sabre_ngv_redAppSidePanel(manifest) {
            var _this = _super.call(this, manifest) || this;
            Context_1.context.setModule(_this);
            return _this;
        }
        return Module_sabre_ngv_redAppSidePanel;
    }(Main_1.Main));
    exports.default = Module_sabre_ngv_redAppSidePanel;
});
///<amd-module name="sabre-ngv-redAppSidePanel/models/RedAppSidePanelButton" />
/// <ngv scope="public" />
define("sabre-ngv-redAppSidePanel/models/RedAppSidePanelButton", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This class is used to configure single button for custom workflow panel.
     */
    var RedAppSidePanelButton = (function () {
        /**
         * Constructor
         *
         * @param {string} label label for the button
         * @param {string} className css class name to be used by button
         * @param {() => void} onClick function to be run when the button is clicked
         */
        function RedAppSidePanelButton(label, className, onClick) {
            this.label = label;
            this.className = className;
            this.onClick = onClick;
        }
        return RedAppSidePanelButton;
    }());
    exports.RedAppSidePanelButton = RedAppSidePanelButton;
});

//# sourceMappingURL=module.js.map
