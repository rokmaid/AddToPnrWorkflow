var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
///<amd-module name="sabre-ngv-state/Context" />
/// <ngv scope="public" />
define("sabre-ngv-state/Context", ["require", "exports", "sabre-ngv-core/modules/ModuleContext"], function (require, exports, ModuleContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Cannot use IModuleContext['something'] for types - it seems to break generics
    // types are copied from IModuleContext
    /** @internal **/
    exports.context = new ModuleContext_1.ModuleContext("sabre-ngv-state");
    /** @internal **/
    exports.cf = exports.context.cf.bind(exports.context);
    /** @internal **/
    exports.registerService = exports.context.registerService.bind(exports.context);
    /** @internal **/
    exports.getService = exports.context.getService.bind(exports.context);
});
define("sabre-ngv-state/GlobalState", ["require", "exports", "rxjs", "underscore"], function (require, exports, Rx, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GlobalState = (function () {
        function GlobalState() {
            this.state = {};
            this.stateSubjects$ = {};
        }
        /**
         * For name of type string resolve with value of given key, or with undefined when property is not found
         * For name of type string[] resolve with object, with not found fields set to undefined
         * @param name
         * @returns {Promise<StateValue | StateType}
         */
        GlobalState.prototype.get = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (typeof name === 'string') {
                        return [2 /*return*/, this.state[name]];
                    }
                    return [2 /*return*/, name.reduce(function (acc, key) {
                            acc[key] = _this.state[key];
                            return acc;
                        }, {})];
                });
            });
        };
        /**
         * Sets property(ies) in the global state.
         * @param properties
         * @returns {Promise<StateValue>}
         */
        GlobalState.prototype.set = function (properties) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    Object.keys(properties).forEach(function (key) {
                        _this.state[key] = properties[key];
                        if (_this.stateSubjects$[key]) {
                            _this.stateSubjects$[key].next(_this.state[key]);
                        }
                    });
                    return [2 /*return*/];
                });
            });
        };
        /**
         * If a given key is boolean, toggle it.
         * @param name
         * @returns {Promise<boolean>}
         */
        GlobalState.prototype.toggle = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var value, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.get(name)];
                        case 1:
                            value = _b.sent();
                            if (typeof value === 'undefined') {
                                throw new Error('GlobalState: Can\'t toggle value - no value found.');
                            }
                            if (!_.isBoolean(value)) {
                                throw new Error('GlobalState: Non-boolean value can\'t be toggled.');
                            }
                            return [4 /*yield*/, this.set((_a = {}, _a[name] = !value, _a))];
                        case 2:
                            _b.sent();
                            return [2 /*return*/, !value];
                    }
                });
            });
        };
        /**
         * Subscribe to changes for the given key.
         * @param name - key whose changes will be subscribed to.
         * @param observer - observer function to execute on state changes.
         * @returns {Rx.Subscription}
         */
        GlobalState.prototype.subscribeToState = function (name, observer) {
            if (!this.stateSubjects$[name]) {
                // BehaviorSubject is used instead of Subject, as it holds initial value, and therefore it
                // does not emit needlessly one time while value under certain key was same before subscription
                // as distinctUntilChanged had undefined as first value and emitted while Subject was used
                this.stateSubjects$[name] = new Rx.BehaviorSubject(this.state[name]);
            }
            return this.stateSubjects$[name]
                .distinctUntilChanged()
                .skip(1) // skip BehaviorSubject cached value emit
                .subscribe(observer);
        };
        /**
         * Removes the given key(s) from the global state.
         * @param name
         * @returns {Promise<StateValue>|Promise}
         */
        GlobalState.prototype.clear = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    typeof name === 'string'
                        ? delete this.state[name]
                        : name.forEach(function (key) { return delete _this.state[key]; });
                    return [2 /*return*/];
                });
            });
        };
        return GlobalState;
    }());
    exports.GlobalState = GlobalState;
});
///<amd-module name="sabre-ngv-state/Main" />
/// <ngv scope="protected" />
define("sabre-ngv-state/Main", ["require", "exports", "sabre-ngv-core/modules/Module", "sabre-ngv-state/GlobalState"], function (require, exports, Module_1, GlobalState_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var globalState = new GlobalState_1.GlobalState();
    function subscribeToState(name, observer) {
        return globalState.subscribeToState(name, observer);
    }
    exports.subscribeToState = subscribeToState;
    function getGlobalState(name) {
        return globalState.get(name);
    }
    exports.getGlobalState = getGlobalState;
    function toggleGlobalState(name) {
        return globalState.toggle(name);
    }
    exports.toggleGlobalState = toggleGlobalState;
    function setGlobalState(newState) {
        return globalState.set(newState);
    }
    exports.setGlobalState = setGlobalState;
    function clearGlobalState(name) {
        return globalState.clear(name);
    }
    exports.clearGlobalState = clearGlobalState;
    var Main = (function (_super) {
        __extends(Main, _super);
        function Main() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Main.prototype.getExposedClasses = function () {
            return {
                toggleGlobalState: toggleGlobalState,
                getGlobalState: getGlobalState,
                setGlobalState: setGlobalState,
                subscribeToState: subscribeToState,
                clearGlobalState: clearGlobalState
            };
        };
        return Main;
    }(Module_1.Module));
    exports.Main = Main;
});
///<amd-module name="sabre-ngv-state" />
define("sabre-ngv-state", ["require", "exports", "sabre-ngv-state/Main", "sabre-ngv-state/Context"], function (require, exports, Main_1, Context_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Module_sabre_ngv_state = (function (_super) {
        __extends(Module_sabre_ngv_state, _super);
        function Module_sabre_ngv_state(manifest) {
            var _this = _super.call(this, manifest) || this;
            Context_1.context.setModule(_this);
            return _this;
        }
        return Module_sabre_ngv_state;
    }(Main_1.Main));
    exports.default = Module_sabre_ngv_state;
});

//# sourceMappingURL=module.js.map
