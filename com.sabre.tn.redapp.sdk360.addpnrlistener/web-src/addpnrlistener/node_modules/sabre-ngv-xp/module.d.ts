declare module "sabre-ngv-xp/configs/IXPConfig" {
    /**
     * Extension Point service config interface
     */
    export abstract class IXPConfig {
        /**
         * Config type
         */
        readonly type: string;
        /**
         * Priority of config. The lowest is processed first.
         */
        readonly prio: number;
    }
}
declare module "sabre-ngv-xp/configs/IRightToolbarXPConfig" {
    import { IXPConfig } from "sabre-ngv-xp/configs/IXPConfig";
    export interface IRightToolbarXPConfig extends IXPConfig {
        key: string;
        caption: string;
    }
}
declare module "sabre-ngv-xp/configs/IWidgetXPConfig" {
    import { AbstractModel } from "sabre-ngv-app/app/AbstractModel";
    import { AbstractView } from "sabre-ngv-app/app/AbstractView";
    import { IXPConfig } from "sabre-ngv-xp/configs/IXPConfig";
    import { Descriptor } from "sabre-ngv-app/_types";
    export type Widget<T> = Descriptor<T> | AbstractView;
    /**
     * This class is to configure Extension Point with type 'widget'
     *
     * @param <T> Widget class used by config
     */
    export interface IWidgetXPConfig<T extends AbstractView<AbstractModel>> extends IXPConfig {
        /**
         * Fixed config type.
         */
        readonly type: 'widget';
        /**
         * Descriptor of the widget to be held by config
         */
        readonly widget: Widget<T>;
    }
}
declare module "sabre-ngv-xp/interfaces/IRedAppSidePanelConfig" {
    import { IRedAppSidePanelButton } from "sabre-ngv-redAppSidePanel/interfaces/IRedAppSidePanelButton";
    import { IXPConfig } from "sabre-ngv-xp/configs/IXPConfig";
    export interface IRedAppSidePanelConfig extends IXPConfig {
        readonly buttons: IRedAppSidePanelButton[];
    }
}
declare module "sabre-ngv-xp/configs/XPConfig" {
    import { IXPConfig } from "sabre-ngv-xp/configs/IXPConfig";
    /**
     * Extension Point service config class
     */
    export class XPConfig implements IXPConfig {
        readonly type: string;
        readonly prio: number;
        /**
         * Constructor.
         *
         * @param type - config type
         * @param prio - config priority
         */
        constructor(type?: string, prio?: number);
    }
}
declare module "sabre-ngv-xp/configs/RedAppSidePanelConfig" {
    import { IRedAppSidePanelConfig } from "sabre-ngv-xp/interfaces/IRedAppSidePanelConfig";
    import { IRedAppSidePanelButton } from "sabre-ngv-redAppSidePanel/interfaces/IRedAppSidePanelButton";
    import { XPConfig } from "sabre-ngv-xp/configs/XPConfig";
    /**
     * This class is used to configure Extension Point with groupName 'redAppSidePanel',
     * its purpose is to provide buttons to add to custom workflow panel.
     */
    export class RedAppSidePanelConfig extends XPConfig implements IRedAppSidePanelConfig {
        readonly buttons: IRedAppSidePanelButton[];
        constructor(buttons: IRedAppSidePanelButton[]);
    }
}
declare module "sabre-ngv-xp/configs/RightToolbarXPConfig" {
    import { IRightToolbarXPConfig } from "sabre-ngv-xp/configs/IRightToolbarXPConfig";
    import { XPConfig } from "sabre-ngv-xp/configs/XPConfig";
    export class RightToolbarXPConfig extends XPConfig implements IRightToolbarXPConfig {
        readonly key: string;
        readonly caption: string;
        readonly name: string;
        constructor({type, prio, name, key, caption}: {
            type?: string;
            prio?: number;
            name?: string;
            key?: string;
            caption?: string;
        });
    }
}
declare module "sabre-ngv-xp/configs/WidgetXPConfig" {
    import { XPConfig } from "sabre-ngv-xp/configs/XPConfig";
    import { Widget, IWidgetXPConfig } from "sabre-ngv-xp/configs/IWidgetXPConfig";
    import { AbstractView } from "sabre-ngv-app/app/AbstractView";
    /**
     * This class is to configure Extension Point with type 'widget'
     *
     * @param <T> Widget class used by config
     */
    export class WidgetXPConfig<T extends AbstractView> extends XPConfig implements IWidgetXPConfig<T> {
        readonly widget: Widget<T>;
        readonly prio: number;
        /**
         * @inheritDoc
         */
        readonly type: 'widget';
        /**
         * Constructor.
         *
         * @example new WidgetXPConfig(ProfilesButton, -1000)
         *
         * @param widget - descriptor of the widget to be held by config
         * @param prio - config priority
         */
        constructor(widget: Widget<T>, prio?: number);
    }
}
declare module "sabre-ngv-xp/services/IExtensionPointService" {
    import { IXPConfig } from "sabre-ngv-xp/configs/IXPConfig";
    import { Class } from "sabre-ngv-app/_types";
    /**
     * Interface of service to manage Extension Point Configurations
     */
    export abstract class IExtensionPointService {
        static readonly SERVICE_NAME: string;
        /**
         * Add Extension Point Configuration for specific groupName
         *
         * @param groupName - Name of config group
         * @param newConfig - Config
         */
        abstract addConfig<TConfig extends IXPConfig>(groupName: string, newConfig: TConfig): void;
        /**
         * Add Extension Point Configurations for each of groupName from array
         * number of groupNames and newConfigs should be equals
         *
         * @param groupNames - Names of config groups
         * @param newConfigs - Config
         */
        abstract addConfigs<TConfig extends IXPConfig>(groupNames: string[], newConfigs: TConfig[]): void;
        /**
         * Returns array of Extension Point Configuration for each groupName from array
         *
         * @param groupNames - Names of config groups
         * @param configTypes - Config types (classes)
         */
        abstract getConfigs<TConfig extends IXPConfig>(groupNames: string[], configTypes: Class<TConfig>[]): TConfig[];
    }
}
declare module "sabre-ngv-xp/services/ExtensionPointService" {
    import { AbstractService } from "sabre-ngv-app/app/services/impl/AbstractService";
    import { IXPConfig } from "sabre-ngv-xp/configs/IXPConfig";
    import { IExtensionPointService } from "sabre-ngv-xp/services/IExtensionPointService";
    import { Class } from "sabre-ngv-app/_types";
    import { ReplaySubject } from 'rxjs';
    /**
     * Service class to manage Extension Point Configurations
     */
    export class ExtensionPointService extends AbstractService implements IExtensionPointService {
        static readonly SERVICE_NAME: string;
        private readonly configsStore;
        private configSubjectsStore;
        private contextualInstances;
        /**
         * @inheritDoc
         */
        addConfig<TConfig extends IXPConfig>(groupName: string, newConfig: TConfig): void;
        /**
         * @inheritDoc
         */
        addConfigs<TConfig extends IXPConfig>(groupNames: string[], newConfigs: TConfig[]): void;
        /**
         * @inheritDoc
         */
        getConfigs<TConfig extends IXPConfig>(groupNames: string[], configTypes?: Class<TConfig>[]): TConfig[];
        getConfigSubject$(groupName: string): ReplaySubject<any>;
        private static getConfigAdder(configsStore, configSubjectsStore, newConfigs);
        private static getConfigSubjectFromStore(configSubjectsStore, groupName);
        private static getConfigsMerger(configsStore);
        private static getByTypeFilter(configTypes);
        private static compareConfigs(a, b);
        private static compareAny(a, b);
    }
}
