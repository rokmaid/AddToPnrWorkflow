var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
///<amd-module name="sabre-ngv-xp/Context" />
/// <ngv scope="public" />
define("sabre-ngv-xp/Context", ["require", "exports", "sabre-ngv-core/modules/ModuleContext"], function (require, exports, ModuleContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Cannot use IModuleContext['something'] for types - it seems to break generics
    // types are copied from IModuleContext
    /** @internal **/
    exports.context = new ModuleContext_1.ModuleContext("sabre-ngv-xp");
    /** @internal **/
    exports.cf = exports.context.cf.bind(exports.context);
    /** @internal **/
    exports.registerService = exports.context.registerService.bind(exports.context);
    /** @internal **/
    exports.getService = exports.context.getService.bind(exports.context);
});
///<amd-module name="sabre-ngv-xp/configs/IXPConfig" />
/// <ngv scope="public" />
define("sabre-ngv-xp/configs/IXPConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Extension Point service config interface
     */
    var IXPConfig = (function () {
        function IXPConfig() {
        }
        return IXPConfig;
    }());
    exports.IXPConfig = IXPConfig;
});
///<amd-module name="sabre-ngv-xp/services/IExtensionPointService" />
/// <ngv scope="public" />
define("sabre-ngv-xp/services/IExtensionPointService", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Interface of service to manage Extension Point Configurations
     */
    var IExtensionPointService = (function () {
        function IExtensionPointService() {
        }
        return IExtensionPointService;
    }());
    IExtensionPointService.SERVICE_NAME = 'xp';
    exports.IExtensionPointService = IExtensionPointService;
});
///<amd-module name="sabre-ngv-xp/services/ExtensionPointService" />
/// <ngv scope="public" />
define("sabre-ngv-xp/services/ExtensionPointService", ["require", "exports", "sabre-ngv-app/app/services/impl/AbstractService", "sabre-ngv-app/array", "sabre-ngv-app/bool", "rxjs", "sabre-ngv-core/modules/ModuleContext"], function (require, exports, AbstractService_1, array_1, bool_1, rxjs_1, ModuleContext_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Service class to manage Extension Point Configurations
     */
    var ExtensionPointService = (function (_super) {
        __extends(ExtensionPointService, _super);
        function ExtensionPointService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.configsStore = {};
            _this.configSubjectsStore = {};
            _this.contextualInstances = {};
            return _this;
        }
        /**
         * @inheritDoc
         */
        ExtensionPointService.prototype.addConfig = function (groupName, newConfig) {
            this.addConfigs([groupName], [newConfig]);
        };
        /**
         * @inheritDoc
         */
        ExtensionPointService.prototype.addConfigs = function (groupNames, newConfigs) {
            var _this = this;
            // array is used for type safety of JS input
            groupNames = array_1.array(groupNames);
            newConfigs.forEach(function (it) { return ModuleContext_2.ModuleContext.copyContexts(_this, it); });
            groupNames.forEach(ExtensionPointService.getConfigAdder(this.configsStore, this.configSubjectsStore, newConfigs));
            this.triggerOnEventBus('extension-configs-added', groupNames, newConfigs);
        };
        /**
         * @inheritDoc
         */
        ExtensionPointService.prototype.getConfigs = function (groupNames, configTypes) {
            if (configTypes === void 0) { configTypes = []; }
            // array is used for type safety of JS input
            return array_1.array(groupNames)
                .reduce(ExtensionPointService.getConfigsMerger(this.configsStore), [])
                .filter(ExtensionPointService.getByTypeFilter(configTypes))
                .sort(ExtensionPointService.compareConfigs);
        };
        ExtensionPointService.prototype.getConfigSubject$ = function (groupName) {
            return ExtensionPointService.getConfigSubjectFromStore(this.configSubjectsStore, groupName);
        };
        ExtensionPointService.getConfigAdder = function (configsStore, configSubjectsStore, newConfigs) {
            var _this = this;
            return function (groupName) {
                if (!configsStore[groupName]) {
                    configsStore[groupName] = [];
                }
                (_a = configsStore[groupName]).push.apply(_a, newConfigs);
                var configSubject$ = _this.getConfigSubjectFromStore(configSubjectsStore, groupName);
                newConfigs.forEach(function (config) { return configSubject$.next(config); });
                var _a;
            };
        };
        ExtensionPointService.getConfigSubjectFromStore = function (configSubjectsStore, groupName) {
            var configSubject$ = configSubjectsStore[groupName];
            if (!configSubject$) {
                configSubject$ = new rxjs_1.ReplaySubject();
                configSubjectsStore[groupName] = configSubject$;
            }
            return configSubject$;
        };
        ExtensionPointService.getConfigsMerger = function (configsStore) {
            return function (resultConfigs, configName) {
                if (configsStore[configName]) {
                    resultConfigs.splice.apply(resultConfigs, [resultConfigs.length, 0].concat(configsStore[configName]));
                }
                return resultConfigs;
            };
        };
        ExtensionPointService.getByTypeFilter = function (configTypes) {
            return function (config) {
                if (configTypes.length > 0) {
                    return bool_1.bool(configTypes.find(function (configType) { return config instanceof configType || config.type === configType.prototype.type; }));
                }
                else {
                    return true;
                }
            };
        };
        ExtensionPointService.compareConfigs = function (a, b) {
            return ExtensionPointService.compareAny(a.prio, b.prio)
                || ExtensionPointService.compareAny(a.type, b.type);
        };
        ExtensionPointService.compareAny = function (a, b) {
            var xa = typeof a === 'number' ? a : a.toString();
            var xb = typeof b === 'number' ? b : b.toString();
            if (xa < xb) {
                return -1;
            }
            else if (xa > xb) {
                return 1;
            }
            else {
                return 0;
            }
        };
        return ExtensionPointService;
    }(AbstractService_1.AbstractService));
    ExtensionPointService.SERVICE_NAME = 'xp';
    exports.ExtensionPointService = ExtensionPointService;
});
define("sabre-ngv-xp/Main", ["require", "exports", "sabre-ngv-core/modules/Module", "sabre-ngv-xp/services/ExtensionPointService", "sabre-ngv-xp/Context"], function (require, exports, Module_1, ExtensionPointService_1, Context_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Main = (function (_super) {
        __extends(Main, _super);
        function Main() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Main.prototype.init = function () {
            _super.prototype.init.call(this);
            Context_1.registerService(ExtensionPointService_1.ExtensionPointService);
        };
        return Main;
    }(Module_1.Module));
    exports.Main = Main;
});
///<amd-module name="sabre-ngv-xp" />
define("sabre-ngv-xp", ["require", "exports", "sabre-ngv-xp/Main", "sabre-ngv-xp/Context"], function (require, exports, Main_1, Context_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Module_sabre_ngv_xp = (function (_super) {
        __extends(Module_sabre_ngv_xp, _super);
        function Module_sabre_ngv_xp(manifest) {
            var _this = _super.call(this, manifest) || this;
            Context_2.context.setModule(_this);
            return _this;
        }
        return Module_sabre_ngv_xp;
    }(Main_1.Main));
    exports.default = Module_sabre_ngv_xp;
});
define("sabre-ngv-xp/configs/IEndPnrXPConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sabre-ngv-xp/configs/IRightToolbarXPConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-xp/configs/IWidgetXPConfig" />
/// <ngv scope="public" />
define("sabre-ngv-xp/configs/IWidgetXPConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-xp/configs/XPConfig" />
/// <ngv scope="public" />
define("sabre-ngv-xp/configs/XPConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Extension Point service config class
     */
    var XPConfig = (function () {
        /**
         * Constructor.
         *
         * @param type - config type
         * @param prio - config priority
         */
        function XPConfig(type, prio) {
            if (type === void 0) { type = 'common'; }
            if (prio === void 0) { prio = 0; }
            this.type = type;
            this.prio = prio;
        }
        return XPConfig;
    }());
    exports.XPConfig = XPConfig;
});
///<amd-module name="sabre-ngv-xp/interfaces/IMountableXPConfig" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/interfaces/IMountableXPConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-xp/configs/MountableXPConfig" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/configs/MountableXPConfig", ["require", "exports", "sabre-ngv-xp/configs/XPConfig"], function (require, exports, XPConfig_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This class is to configure Extension Point with type 'mountable'
     */
    var MountableXPConfig = (function (_super) {
        __extends(MountableXPConfig, _super);
        /**
         * Constructor.
         *
         * @param mountable - mountable class instance
         * @param prio - config priority
         */
        function MountableXPConfig(prio) {
            if (prio === void 0) { prio = 0; }
            var _this = _super.call(this, 'mountable', prio) || this;
            _this.prio = prio;
            /**
             * @inheritDoc
             */
            _this.type = 'mountable';
            return _this;
        }
        return MountableXPConfig;
    }(XPConfig_1.XPConfig));
    exports.MountableXPConfig = MountableXPConfig;
});
///<amd-module name="sabre-ngv-xp/interfaces/IRedAppSidePanelConfig" />
/// <ngv scope="public" />
define("sabre-ngv-xp/interfaces/IRedAppSidePanelConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-xp/configs/RedAppSidePanelConfig" />
/// <ngv scope="public" />
define("sabre-ngv-xp/configs/RedAppSidePanelConfig", ["require", "exports", "sabre-ngv-xp/configs/XPConfig"], function (require, exports, XPConfig_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This class is used to configure Extension Point with groupName 'redAppSidePanel',
     * its purpose is to provide buttons to add to custom workflow panel.
     */
    var RedAppSidePanelConfig = (function (_super) {
        __extends(RedAppSidePanelConfig, _super);
        function RedAppSidePanelConfig(buttons) {
            var _this = _super.call(this, 'red-app-side-panel') || this;
            _this.buttons = buttons;
            return _this;
        }
        return RedAppSidePanelConfig;
    }(XPConfig_2.XPConfig));
    exports.RedAppSidePanelConfig = RedAppSidePanelConfig;
});
define("sabre-ngv-xp/configs/RightToolbarXPConfig", ["require", "exports", "sabre-ngv-xp/configs/XPConfig"], function (require, exports, XPConfig_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RightToolbarXPConfig = (function (_super) {
        __extends(RightToolbarXPConfig, _super);
        function RightToolbarXPConfig(_a) {
            var _b = _a.type, type = _b === void 0 ? 'toolbar' : _b, _c = _a.prio, prio = _c === void 0 ? 0 : _c, _d = _a.name, name = _d === void 0 ? '' : _d, _e = _a.key, key = _e === void 0 ? '' : _e, _f = _a.caption, caption = _f === void 0 ? '' : _f;
            var _this = _super.call(this, type, prio) || this;
            _this.name = name;
            _this.key = key;
            _this.caption = caption;
            return _this;
        }
        return RightToolbarXPConfig;
    }(XPConfig_3.XPConfig));
    exports.RightToolbarXPConfig = RightToolbarXPConfig;
});
///<amd-module name="sabre-ngv-xp/interfaces/ISettingsMenuItem" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/interfaces/ISettingsMenuItem", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-xp/configs/SettingsMenuItem" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/configs/SettingsMenuItem", ["require", "exports", "sabre-ngv-xp/configs/MountableXPConfig"], function (require, exports, MountableXPConfig_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SettingsMenuItem = (function (_super) {
        __extends(SettingsMenuItem, _super);
        function SettingsMenuItem(_a) {
            var _b = _a.prio, prio = _b === void 0 ? 0 : _b, props = _a.props, verticalTabItem = _a.verticalTabItem;
            var _this = _super.call(this, prio) || this;
            _this.props = props;
            _this.verticalTabItem = verticalTabItem;
            return _this;
        }
        return SettingsMenuItem;
    }(MountableXPConfig_1.MountableXPConfig));
    exports.SettingsMenuItem = SettingsMenuItem;
});
///<amd-module name="sabre-ngv-xp/interfaces/ISidepanelWithCustomButtonOptions" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/interfaces/ISidepanelWithCustomButtonOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-xp/interfaces/ISidepanelWithCustomButtonXPConfig" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/interfaces/ISidepanelWithCustomButtonXPConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-xp/configs/SidepanelWithCustomButtonXPConfig" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/configs/SidepanelWithCustomButtonXPConfig", ["require", "exports", "sabre-ngv-xp/configs/MountableXPConfig"], function (require, exports, MountableXPConfig_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SidepanelWithCustomButtonXPConfig = (function (_super) {
        __extends(SidepanelWithCustomButtonXPConfig, _super);
        function SidepanelWithCustomButtonXPConfig(_a) {
            var _b = _a.prio, prio = _b === void 0 ? 0 : _b, sidepanelMountable = _a.sidepanelMountable, _c = _a.sidepanelKey, sidepanelKey = _c === void 0 ? '' : _c, customButton = _a.customButton;
            var _this = _super.call(this, prio) || this;
            _this.sidepanelMountable = sidepanelMountable;
            _this.sidepanelKey = sidepanelKey;
            _this.customButton = customButton;
            return _this;
        }
        return SidepanelWithCustomButtonXPConfig;
    }(MountableXPConfig_2.MountableXPConfig));
    exports.SidepanelWithCustomButtonXPConfig = SidepanelWithCustomButtonXPConfig;
});
///<amd-module name="sabre-ngv-xp/interfaces/ISidepanelWithIconXPConfig" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/interfaces/ISidepanelWithIconXPConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-xp/interfaces/ISidepanelWithIconOptions" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/interfaces/ISidepanelWithIconOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-xp/configs/SidepanelWithIconXPConfig" />
/// <ngv scope="protected" />
define("sabre-ngv-xp/configs/SidepanelWithIconXPConfig", ["require", "exports", "sabre-ngv-xp/configs/MountableXPConfig"], function (require, exports, MountableXPConfig_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SidepanelWithIconXPConfig = (function (_super) {
        __extends(SidepanelWithIconXPConfig, _super);
        function SidepanelWithIconXPConfig(_a) {
            var _b = _a.prio, prio = _b === void 0 ? 0 : _b, sidepanelMountable = _a.sidepanelMountable, _c = _a.sidepanelKey, sidepanelKey = _c === void 0 ? '' : _c, _d = _a.iconClass, iconClass = _d === void 0 ? '' : _d;
            var _this = _super.call(this, prio) || this;
            _this.sidepanelMountable = sidepanelMountable;
            _this.sidepanelKey = sidepanelKey;
            _this.iconClass = iconClass;
            return _this;
        }
        return SidepanelWithIconXPConfig;
    }(MountableXPConfig_3.MountableXPConfig));
    exports.SidepanelWithIconXPConfig = SidepanelWithIconXPConfig;
});
///<amd-module name="sabre-ngv-xp/configs/WidgetXPConfig" />
/// <ngv scope="public" />
define("sabre-ngv-xp/configs/WidgetXPConfig", ["require", "exports", "sabre-ngv-xp/configs/XPConfig"], function (require, exports, XPConfig_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This class is to configure Extension Point with type 'widget'
     *
     * @param <T> Widget class used by config
     */
    var WidgetXPConfig = (function (_super) {
        __extends(WidgetXPConfig, _super);
        /**
         * Constructor.
         *
         * @example new WidgetXPConfig(ProfilesButton, -1000)
         *
         * @param widget - descriptor of the widget to be held by config
         * @param prio - config priority
         */
        function WidgetXPConfig(widget, prio) {
            if (prio === void 0) { prio = 0; }
            var _this = _super.call(this, 'widget', prio) || this;
            _this.widget = widget;
            _this.prio = prio;
            return _this;
        }
        return WidgetXPConfig;
    }(XPConfig_4.XPConfig));
    exports.WidgetXPConfig = WidgetXPConfig;
});
define("sabre-ngv-xp/configs/endPnrXpConfigFactory", ["require", "exports", "underscore"], function (require, exports, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function endPnrXpConfigFactory(config) {
        return _.defaults(config, {
            type: 'button',
            prio: 0,
            key: '',
            buttonText: '',
            buttonCommandHint: '',
            buttonDescription: '',
            commandFlow: '',
            isDisabled: false,
            onClick: function () { },
            onInitialize: function () { }
        });
    }
    exports.endPnrXpConfigFactory = endPnrXpConfigFactory;
});

//# sourceMappingURL=module.js.map
